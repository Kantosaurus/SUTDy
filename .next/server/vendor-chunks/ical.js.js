"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ical.js";
exports.ids = ["vendor-chunks/ical.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/ical.js/dist/ical.js":
/*!*******************************************!*\
  !*** ./node_modules/ical.js/dist/ical.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ICALmodule)\n/* harmony export */ });\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * Represents the BINARY value type, which contains extra methods for encoding and decoding.\n *\n * @memberof ICAL\n */ class Binary {\n    /**\n   * Creates a binary value from the given string.\n   *\n   * @param {String} aString        The binary value string\n   * @return {Binary}               The binary value instance\n   */ static fromString(aString) {\n        return new Binary(aString);\n    }\n    /**\n   * Creates a new ICAL.Binary instance\n   *\n   * @param {String} aValue     The binary data for this value\n   */ constructor(aValue){\n        /**\n   * The type name, to be used in the jCal object.\n   * @default \"binary\"\n   * @constant\n   */ this.icaltype = \"binary\";\n        this.value = aValue;\n    }\n    /**\n   * Base64 decode the current value\n   *\n   * @return {String}         The base64-decoded value\n   */ decodeValue() {\n        return this._b64_decode(this.value);\n    }\n    /**\n   * Encodes the passed parameter with base64 and sets the internal\n   * value to the result.\n   *\n   * @param {String} aValue      The raw binary value to encode\n   */ setEncodedValue(aValue) {\n        this.value = this._b64_encode(aValue);\n    }\n    _b64_encode(data) {\n        // http://kevin.vanzonneveld.net\n        // +   original by: Tyler Akins (http://rumkin.com)\n        // +   improved by: Bayron Guevara\n        // +   improved by: Thunder.m\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +   bugfixed by: Pellentesque Malesuada\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +   improved by: Rafa≈Ç Kukawski (http://kukawski.pl)\n        // *     example 1: base64_encode('Kevin van Zonneveld');\n        // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n        // mozilla has this native\n        // - but breaks in 2.0.0.12!\n        //if (typeof this.window['atob'] == 'function') {\n        //    return atob(data);\n        //}\n        let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        let o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = \"\", tmp_arr = [];\n        if (!data) {\n            return data;\n        }\n        do {\n            o1 = data.charCodeAt(i++);\n            o2 = data.charCodeAt(i++);\n            o3 = data.charCodeAt(i++);\n            bits = o1 << 16 | o2 << 8 | o3;\n            h1 = bits >> 18 & 0x3f;\n            h2 = bits >> 12 & 0x3f;\n            h3 = bits >> 6 & 0x3f;\n            h4 = bits & 0x3f;\n            // use hexets to index into b64, and append result to encoded string\n            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n        }while (i < data.length);\n        enc = tmp_arr.join(\"\");\n        let r = data.length % 3;\n        return (r ? enc.slice(0, r - 3) : enc) + \"===\".slice(r || 3);\n    }\n    _b64_decode(data) {\n        // http://kevin.vanzonneveld.net\n        // +   original by: Tyler Akins (http://rumkin.com)\n        // +   improved by: Thunder.m\n        // +      input by: Aman Gupta\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +   bugfixed by: Onno Marsman\n        // +   bugfixed by: Pellentesque Malesuada\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +      input by: Brett Zamir (http://brett-zamir.me)\n        // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n        // *     returns 1: 'Kevin van Zonneveld'\n        // mozilla has this native\n        // - but breaks in 2.0.0.12!\n        //if (typeof this.window['btoa'] == 'function') {\n        //    return btoa(data);\n        //}\n        let b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        let o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = \"\", tmp_arr = [];\n        if (!data) {\n            return data;\n        }\n        data += \"\";\n        do {\n            h1 = b64.indexOf(data.charAt(i++));\n            h2 = b64.indexOf(data.charAt(i++));\n            h3 = b64.indexOf(data.charAt(i++));\n            h4 = b64.indexOf(data.charAt(i++));\n            bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n            o1 = bits >> 16 & 0xff;\n            o2 = bits >> 8 & 0xff;\n            o3 = bits & 0xff;\n            if (h3 == 64) {\n                tmp_arr[ac++] = String.fromCharCode(o1);\n            } else if (h4 == 64) {\n                tmp_arr[ac++] = String.fromCharCode(o1, o2);\n            } else {\n                tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n            }\n        }while (i < data.length);\n        dec = tmp_arr.join(\"\");\n        return dec;\n    }\n    /**\n   * The string representation of this value\n   * @return {String}\n   */ toString() {\n        return this.value;\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ const DURATION_LETTERS = /([PDWHMTS]{1,1})/;\nconst DATA_PROPS_TO_COPY = [\n    \"weeks\",\n    \"days\",\n    \"hours\",\n    \"minutes\",\n    \"seconds\",\n    \"isNegative\"\n];\n/**\n * This class represents the \"duration\" value type, with various calculation\n * and manipulation methods.\n *\n * @memberof ICAL\n */ class Duration {\n    /**\n   * Returns a new ICAL.Duration instance from the passed seconds value.\n   *\n   * @param {Number} aSeconds       The seconds to create the instance from\n   * @return {Duration}             The newly created duration instance\n   */ static fromSeconds(aSeconds) {\n        return new Duration().fromSeconds(aSeconds);\n    }\n    /**\n   * Checks if the given string is an iCalendar duration value.\n   *\n   * @param {String} value      The raw ical value\n   * @return {Boolean}          True, if the given value is of the\n   *                              duration ical type\n   */ static isValueString(string) {\n        return string[0] === \"P\" || string[1] === \"P\";\n    }\n    /**\n   * Creates a new {@link ICAL.Duration} instance from the passed string.\n   *\n   * @param {String} aStr       The string to parse\n   * @return {Duration}         The created duration instance\n   */ static fromString(aStr) {\n        let pos = 0;\n        let dict = Object.create(null);\n        let chunks = 0;\n        while((pos = aStr.search(DURATION_LETTERS)) !== -1){\n            let type = aStr[pos];\n            let numeric = aStr.slice(0, Math.max(0, pos));\n            aStr = aStr.slice(pos + 1);\n            chunks += parseDurationChunk(type, numeric, dict);\n        }\n        if (chunks < 2) {\n            // There must be at least a chunk with \"P\" and some unit chunk\n            throw new Error('invalid duration value: Not enough duration components in \"' + aStr + '\"');\n        }\n        return new Duration(dict);\n    }\n    /**\n   * Creates a new ICAL.Duration instance from the given data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   * @return {Duration}                   The createad duration instance\n   */ static fromData(aData) {\n        return new Duration(aData);\n    }\n    /**\n   * Creates a new ICAL.Duration instance.\n   *\n   * @param {Object} data                 An object with members of the duration\n   * @param {Number=} data.weeks          Duration in weeks\n   * @param {Number=} data.days           Duration in days\n   * @param {Number=} data.hours          Duration in hours\n   * @param {Number=} data.minutes        Duration in minutes\n   * @param {Number=} data.seconds        Duration in seconds\n   * @param {Boolean=} data.isNegative    If true, the duration is negative\n   */ constructor(data){\n        /**\n   * The weeks in this duration\n   * @type {Number}\n   * @default 0\n   */ this.weeks = 0;\n        /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */ this.days = 0;\n        /**\n   * The days in this duration\n   * @type {Number}\n   * @default 0\n   */ this.hours = 0;\n        /**\n   * The minutes in this duration\n   * @type {Number}\n   * @default 0\n   */ this.minutes = 0;\n        /**\n   * The seconds in this duration\n   * @type {Number}\n   * @default 0\n   */ this.seconds = 0;\n        /**\n   * The seconds in this duration\n   * @type {Boolean}\n   * @default false\n   */ this.isNegative = false;\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalduration\"\n   */ this.icalclass = \"icalduration\";\n        /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"duration\"\n   */ this.icaltype = \"duration\";\n        this.wrappedJSObject = this;\n        this.fromData(data);\n    }\n    /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Duration}      The cloned object\n   */ clone() {\n        return Duration.fromData(this);\n    }\n    /**\n   * The duration value expressed as a number of seconds.\n   *\n   * @return {Number}             The duration value in seconds\n   */ toSeconds() {\n        let seconds = this.seconds + 60 * this.minutes + 3600 * this.hours + 86400 * this.days + 7 * 86400 * this.weeks;\n        return this.isNegative ? -seconds : seconds;\n    }\n    /**\n   * Reads the passed seconds value into this duration object. Afterwards,\n   * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up\n   * accordingly.\n   *\n   * @param {Number} aSeconds     The duration value in seconds\n   * @return {Duration}           Returns this instance\n   */ fromSeconds(aSeconds) {\n        let secs = Math.abs(aSeconds);\n        this.isNegative = aSeconds < 0;\n        this.days = trunc(secs / 86400);\n        // If we have a flat number of weeks, use them.\n        if (this.days % 7 == 0) {\n            this.weeks = this.days / 7;\n            this.days = 0;\n        } else {\n            this.weeks = 0;\n        }\n        secs -= (this.days + 7 * this.weeks) * 86400;\n        this.hours = trunc(secs / 3600);\n        secs -= this.hours * 3600;\n        this.minutes = trunc(secs / 60);\n        secs -= this.minutes * 60;\n        this.seconds = secs;\n        return this;\n    }\n    /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData                An object with members of the duration\n   * @param {Number=} aData.weeks         Duration in weeks\n   * @param {Number=} aData.days          Duration in days\n   * @param {Number=} aData.hours         Duration in hours\n   * @param {Number=} aData.minutes       Duration in minutes\n   * @param {Number=} aData.seconds       Duration in seconds\n   * @param {Boolean=} aData.isNegative   If true, the duration is negative\n   */ fromData(aData) {\n        for (let prop of DATA_PROPS_TO_COPY){\n            if (aData && prop in aData) {\n                this[prop] = aData[prop];\n            } else {\n                this[prop] = 0;\n            }\n        }\n    }\n    /**\n   * Resets the duration instance to the default values, i.e. PT0S\n   */ reset() {\n        this.isNegative = false;\n        this.weeks = 0;\n        this.days = 0;\n        this.hours = 0;\n        this.minutes = 0;\n        this.seconds = 0;\n    }\n    /**\n   * Compares the duration instance with another one.\n   *\n   * @param {Duration} aOther             The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */ compare(aOther) {\n        let thisSeconds = this.toSeconds();\n        let otherSeconds = aOther.toSeconds();\n        return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);\n    }\n    /**\n   * Normalizes the duration instance. For example, a duration with a value\n   * of 61 seconds will be normalized to 1 minute and 1 second.\n   */ normalize() {\n        this.fromSeconds(this.toSeconds());\n    }\n    /**\n   * The string representation of this duration.\n   * @return {String}\n   */ toString() {\n        if (this.toSeconds() == 0) {\n            return \"PT0S\";\n        } else {\n            let str = \"\";\n            if (this.isNegative) str += \"-\";\n            str += \"P\";\n            if (this.weeks) str += this.weeks + \"W\";\n            if (this.days) str += this.days + \"D\";\n            if (this.hours || this.minutes || this.seconds) {\n                str += \"T\";\n                if (this.hours) str += this.hours + \"H\";\n                if (this.minutes) str += this.minutes + \"M\";\n                if (this.seconds) str += this.seconds + \"S\";\n            }\n            return str;\n        }\n    }\n    /**\n   * The iCalendar string representation of this duration.\n   * @return {String}\n   */ toICALString() {\n        return this.toString();\n    }\n}\n/**\n * Internal helper function to handle a chunk of a duration.\n *\n * @private\n * @param {String} letter type of duration chunk\n * @param {String} number numeric value or -/+\n * @param {Object} dict target to assign values to\n */ function parseDurationChunk(letter, number, object) {\n    let type;\n    switch(letter){\n        case \"P\":\n            if (number && number === \"-\") {\n                object.isNegative = true;\n            } else {\n                object.isNegative = false;\n            }\n            break;\n        case \"D\":\n            type = \"days\";\n            break;\n        case \"W\":\n            type = \"weeks\";\n            break;\n        case \"H\":\n            type = \"hours\";\n            break;\n        case \"M\":\n            type = \"minutes\";\n            break;\n        case \"S\":\n            type = \"seconds\";\n            break;\n        default:\n            // Not a valid chunk\n            return 0;\n    }\n    if (type) {\n        if (!number && number !== 0) {\n            throw new Error('invalid duration value: Missing number before \"' + letter + '\"');\n        }\n        let num = parseInt(number, 10);\n        if (isStrictlyNaN(num)) {\n            throw new Error('invalid duration value: Invalid number \"' + number + '\" before \"' + letter + '\"');\n        }\n        object[type] = num;\n    }\n    return 1;\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */ /**\n * @classdesc\n * iCalendar Time representation (similar to JS Date object).  Fully\n * independent of system (OS) timezone / time.  Unlike JS Date, the month\n * January is 1, not zero.\n *\n * @example\n * var time = new ICAL.Time({\n *   year: 2012,\n *   month: 10,\n *   day: 11\n *   minute: 0,\n *   second: 0,\n *   isDate: false\n * });\n *\n *\n * @memberof ICAL\n*/ class Time {\n    static{\n        this._dowCache = {};\n    }\n    static{\n        this._wnCache = {};\n    }\n    /**\n   * Returns the days in the given month\n   *\n   * @param {Number} month      The month to check\n   * @param {Number} year       The year to check\n   * @return {Number}           The number of days in the month\n   */ static daysInMonth(month, year) {\n        let _daysInMonth = [\n            0,\n            31,\n            28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ];\n        let days = 30;\n        if (month < 1 || month > 12) return days;\n        days = _daysInMonth[month];\n        if (month == 2) {\n            days += Time.isLeapYear(year);\n        }\n        return days;\n    }\n    /**\n   * Checks if the year is a leap year\n   *\n   * @param {Number} year       The year to check\n   * @return {Boolean}          True, if the year is a leap year\n   */ static isLeapYear(year) {\n        if (year <= 1752) {\n            return year % 4 == 0;\n        } else {\n            return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n        }\n    }\n    /**\n   * Create a new ICAL.Time from the day of year and year. The date is returned\n   * in floating timezone.\n   *\n   * @param {Number} aDayOfYear     The day of year\n   * @param {Number} aYear          The year to create the instance in\n   * @return {Time}                 The created instance with the calculated date\n   */ static fromDayOfYear(aDayOfYear, aYear) {\n        let year = aYear;\n        let doy = aDayOfYear;\n        let tt = new Time();\n        tt.auto_normalize = false;\n        let is_leap = Time.isLeapYear(year) ? 1 : 0;\n        if (doy < 1) {\n            year--;\n            is_leap = Time.isLeapYear(year) ? 1 : 0;\n            doy += Time.daysInYearPassedMonth[is_leap][12];\n            return Time.fromDayOfYear(doy, year);\n        } else if (doy > Time.daysInYearPassedMonth[is_leap][12]) {\n            is_leap = Time.isLeapYear(year) ? 1 : 0;\n            doy -= Time.daysInYearPassedMonth[is_leap][12];\n            year++;\n            return Time.fromDayOfYear(doy, year);\n        }\n        tt.year = year;\n        tt.isDate = true;\n        for(let month = 11; month >= 0; month--){\n            if (doy > Time.daysInYearPassedMonth[is_leap][month]) {\n                tt.month = month + 1;\n                tt.day = doy - Time.daysInYearPassedMonth[is_leap][month];\n                break;\n            }\n        }\n        tt.auto_normalize = true;\n        return tt;\n    }\n    /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @deprecated                Use {@link ICAL.Time.fromDateString} instead\n   * @param {String} str        The string to create from\n   * @return {Time}             The date/time instance\n   */ static fromStringv2(str) {\n        return new Time({\n            year: parseInt(str.slice(0, 4), 10),\n            month: parseInt(str.slice(5, 7), 10),\n            day: parseInt(str.slice(8, 10), 10),\n            isDate: true\n        });\n    }\n    /**\n   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.\n   *\n   * @param {String} aValue     The string to create from\n   * @return {Time}             The date/time instance\n   */ static fromDateString(aValue) {\n        // Dates should have no timezone.\n        // Google likes to sometimes specify Z on dates\n        // we specifically ignore that to avoid issues.\n        // YYYY-MM-DD\n        // 2012-10-10\n        return new Time({\n            year: strictParseInt(aValue.slice(0, 4)),\n            month: strictParseInt(aValue.slice(5, 7)),\n            day: strictParseInt(aValue.slice(8, 10)),\n            isDate: true\n        });\n    }\n    /**\n   * Returns a new ICAL.Time instance from a date-time string, e.g\n   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up\n   * from the property's TZID parameter.\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */ static fromDateTimeString(aValue, prop) {\n        if (aValue.length < 19) {\n            throw new Error('invalid date-time value: \"' + aValue + '\"');\n        }\n        let zone;\n        let zoneId;\n        if (aValue[19] && aValue[19] === \"Z\") {\n            zone = Timezone.utcTimezone;\n        } else if (prop) {\n            zoneId = prop.getParameter(\"tzid\");\n            if (prop.parent) {\n                if (prop.parent.name === \"standard\" || prop.parent.name === \"daylight\") {\n                    // Per RFC 5545 3.8.2.4 and 3.8.2.2, start/end date-times within\n                    // these components MUST be specified in local time.\n                    zone = Timezone.localTimezone;\n                } else if (zoneId) {\n                    // If the desired time zone is defined within the component tree,\n                    // fetch its definition and prefer that.\n                    zone = prop.parent.getTimeZoneByID(zoneId);\n                }\n            }\n        }\n        const timeData = {\n            year: strictParseInt(aValue.slice(0, 4)),\n            month: strictParseInt(aValue.slice(5, 7)),\n            day: strictParseInt(aValue.slice(8, 10)),\n            hour: strictParseInt(aValue.slice(11, 13)),\n            minute: strictParseInt(aValue.slice(14, 16)),\n            second: strictParseInt(aValue.slice(17, 19))\n        };\n        // Although RFC 5545 requires that all TZIDs used within a file have a\n        // corresponding time zone definition, we may not be parsing the full file\n        // or we may be dealing with a non-compliant file; in either case, we can\n        // check our own time zone service for the TZID in a last-ditch effort.\n        if (zoneId && !zone) {\n            timeData.timezone = zoneId;\n        }\n        // 2012-10-10T10:10:10(Z)?\n        return new Time(timeData, zone);\n    }\n    /**\n   * Returns a new ICAL.Time instance from a date or date-time string,\n   *\n   * @param {String} aValue         The string to create from\n   * @param {Property=} prop        The property the date belongs to\n   * @return {Time}                 The date/time instance\n   */ static fromString(aValue, aProperty) {\n        if (aValue.length > 10) {\n            return Time.fromDateTimeString(aValue, aProperty);\n        } else {\n            return Time.fromDateString(aValue);\n        }\n    }\n    /**\n   * Creates a new ICAL.Time instance from the given Javascript Date.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */ static fromJSDate(aDate, useUTC) {\n        let tt = new Time();\n        return tt.fromJSDate(aDate, useUTC);\n    }\n    static{\n        /**\n   * Creates a new ICAL.Time instance from the the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */ this.fromData = function fromData(aData, aZone) {\n            let t = new Time();\n            return t.fromData(aData, aZone);\n        };\n    }\n    /**\n   * Creates a new ICAL.Time instance from the current moment.\n   * The instance is ‚Äúfloating‚Äù - has no timezone relation.\n   * To create an instance considering the time zone, call\n   * ICAL.Time.fromJSDate(new Date(), true)\n   * @return {Time}\n   */ static now() {\n        return Time.fromJSDate(new Date(), false);\n    }\n    /**\n   * Returns the date on which ISO week number 1 starts.\n   *\n   * @see Time#weekNumber\n   * @param {Number} aYear                  The year to search in\n   * @param {weekDay=} aWeekStart           The week start weekday, used for calculation.\n   * @return {Time}                         The date on which week number 1 starts\n   */ static weekOneStarts(aYear, aWeekStart) {\n        let t = Time.fromData({\n            year: aYear,\n            month: 1,\n            day: 1,\n            isDate: true\n        });\n        let dow = t.dayOfWeek();\n        let wkst = aWeekStart || Time.DEFAULT_WEEK_START;\n        if (dow > Time.THURSDAY) {\n            t.day += 7;\n        }\n        if (wkst > Time.THURSDAY) {\n            t.day -= 7;\n        }\n        t.day -= dow - wkst;\n        return t;\n    }\n    /**\n   * Get the dominical letter for the given year. Letters range from A - G for\n   * common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */ static getDominicalLetter(yr) {\n        let LTRS = \"GFEDCBA\";\n        let dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;\n        let isLeap = Time.isLeapYear(yr);\n        if (isLeap) {\n            return LTRS[(dom + 6) % 7] + LTRS[dom];\n        } else {\n            return LTRS[dom];\n        }\n    }\n    static #epochTime = null;\n    /**\n   * January 1st, 1970 as an ICAL.Time.\n   * @type {Time}\n   * @constant\n   * @instance\n   */ static get epochTime() {\n        if (!this.#epochTime) {\n            this.#epochTime = Time.fromData({\n                year: 1970,\n                month: 1,\n                day: 1,\n                hour: 0,\n                minute: 0,\n                second: 0,\n                isDate: false,\n                timezone: \"Z\"\n            });\n        }\n        return this.#epochTime;\n    }\n    static _cmp_attr(a, b, attr) {\n        if (a[attr] > b[attr]) return 1;\n        if (a[attr] < b[attr]) return -1;\n        return 0;\n    }\n    static{\n        /**\n   * The days that have passed in the year after a given month. The array has\n   * two members, one being an array of passed days for non-leap years, the\n   * other analog for leap years.\n   * @example\n   * var isLeapYear = ICAL.Time.isLeapYear(year);\n   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];\n   * @type {Array.<Array.<Number>>}\n   */ this.daysInYearPassedMonth = [\n            [\n                0,\n                31,\n                59,\n                90,\n                120,\n                151,\n                181,\n                212,\n                243,\n                273,\n                304,\n                334,\n                365\n            ],\n            [\n                0,\n                31,\n                60,\n                91,\n                121,\n                152,\n                182,\n                213,\n                244,\n                274,\n                305,\n                335,\n                366\n            ]\n        ];\n    }\n    static{\n        this.SUNDAY = 1;\n    }\n    static{\n        this.MONDAY = 2;\n    }\n    static{\n        this.TUESDAY = 3;\n    }\n    static{\n        this.WEDNESDAY = 4;\n    }\n    static{\n        this.THURSDAY = 5;\n    }\n    static{\n        this.FRIDAY = 6;\n    }\n    static{\n        this.SATURDAY = 7;\n    }\n    static{\n        /**\n   * The default weekday for the WKST part.\n   * @constant\n   * @default ICAL.Time.MONDAY\n   */ this.DEFAULT_WEEK_START = 2 // MONDAY\n        ;\n    }\n    /**\n   * Creates a new ICAL.Time instance.\n   *\n   * @param {Object} data           Time initialization\n   * @param {Number=} data.year     The year for this date\n   * @param {Number=} data.month    The month for this date\n   * @param {Number=} data.day      The day for this date\n   * @param {Number=} data.hour     The hour for this date\n   * @param {Number=} data.minute   The minute for this date\n   * @param {Number=} data.second   The second for this date\n   * @param {Boolean=} data.isDate  If true, the instance represents a date (as\n   *                                  opposed to a date-time)\n   * @param {Timezone} zone         timezone this position occurs in\n   */ constructor(data, zone){\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltime\"\n   */ this.icalclass = \"icaltime\";\n        this._cachedUnixTime = null;\n        /**\n   * The timezone for this time.\n   * @type {Timezone}\n   */ this.zone = null;\n        /**\n   * Internal uses to indicate that a change has been made and the next read\n   * operation must attempt to normalize the value (for example changing the\n   * day to 33).\n   *\n   * @type {Boolean}\n   * @private\n   */ this._pendingNormalization = false;\n        this.wrappedJSObject = this;\n        let time = this._time = Object.create(null);\n        /* time defaults */ time.year = 0;\n        time.month = 1;\n        time.day = 1;\n        time.hour = 0;\n        time.minute = 0;\n        time.second = 0;\n        time.isDate = false;\n        this.fromData(data, zone);\n    }\n    /**\n   * The type name, to be used in the jCal object. This value may change and\n   * is strictly defined by the {@link ICAL.Time#isDate isDate} member.\n   * @type {String}\n   * @default \"date-time\"\n   */ get icaltype() {\n        return this.isDate ? \"date\" : \"date-time\";\n    }\n    /**\n   * Returns a clone of the time object.\n   *\n   * @return {Time}              The cloned object\n   */ clone() {\n        return new Time(this._time, this.zone);\n    }\n    /**\n   * Reset the time instance to epoch time\n   */ reset() {\n        this.fromData(Time.epochTime);\n        this.zone = Timezone.utcTimezone;\n    }\n    /**\n   * Reset the time instance to the given date/time values.\n   *\n   * @param {Number} year             The year to set\n   * @param {Number} month            The month to set\n   * @param {Number} day              The day to set\n   * @param {Number} hour             The hour to set\n   * @param {Number} minute           The minute to set\n   * @param {Number} second           The second to set\n   * @param {Timezone} timezone       The timezone to set\n   */ resetTo(year, month, day, hour, minute, second, timezone) {\n        this.fromData({\n            year: year,\n            month: month,\n            day: day,\n            hour: hour,\n            minute: minute,\n            second: second,\n            zone: timezone\n        });\n    }\n    /**\n   * Set up the current instance from the Javascript date value.\n   *\n   * @param {?Date} aDate             The Javascript Date to read, or null to reset\n   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used\n   */ fromJSDate(aDate, useUTC) {\n        if (!aDate) {\n            this.reset();\n        } else {\n            if (useUTC) {\n                this.zone = Timezone.utcTimezone;\n                this.year = aDate.getUTCFullYear();\n                this.month = aDate.getUTCMonth() + 1;\n                this.day = aDate.getUTCDate();\n                this.hour = aDate.getUTCHours();\n                this.minute = aDate.getUTCMinutes();\n                this.second = aDate.getUTCSeconds();\n            } else {\n                this.zone = Timezone.localTimezone;\n                this.year = aDate.getFullYear();\n                this.month = aDate.getMonth() + 1;\n                this.day = aDate.getDate();\n                this.hour = aDate.getHours();\n                this.minute = aDate.getMinutes();\n                this.second = aDate.getSeconds();\n            }\n        }\n        this._cachedUnixTime = null;\n        return this;\n    }\n    /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData            Time initialization\n   * @param {Number=} aData.year      The year for this date\n   * @param {Number=} aData.month     The month for this date\n   * @param {Number=} aData.day       The day for this date\n   * @param {Number=} aData.hour      The hour for this date\n   * @param {Number=} aData.minute    The minute for this date\n   * @param {Number=} aData.second    The second for this date\n   * @param {Boolean=} aData.isDate   If true, the instance represents a date\n   *                                    (as opposed to a date-time)\n   * @param {Timezone=} aZone         Timezone this position occurs in\n   */ fromData(aData, aZone) {\n        if (aData) {\n            for (let [key, value] of Object.entries(aData)){\n                // ical type cannot be set\n                if (key === \"icaltype\") continue;\n                this[key] = value;\n            }\n        }\n        if (aZone) {\n            this.zone = aZone;\n        }\n        if (aData && !(\"isDate\" in aData)) {\n            this.isDate = !(\"hour\" in aData);\n        } else if (aData && \"isDate\" in aData) {\n            this.isDate = aData.isDate;\n        }\n        if (aData && \"timezone\" in aData) {\n            let zone = TimezoneService.get(aData.timezone);\n            this.zone = zone || Timezone.localTimezone;\n        }\n        if (aData && \"zone\" in aData) {\n            this.zone = aData.zone;\n        }\n        if (!this.zone) {\n            this.zone = Timezone.localTimezone;\n        }\n        this._cachedUnixTime = null;\n        return this;\n    }\n    /**\n   * Calculate the day of week.\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {weekDay}\n   */ dayOfWeek(aWeekStart) {\n        let firstDow = aWeekStart || Time.SUNDAY;\n        let dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;\n        if (dowCacheKey in Time._dowCache) {\n            return Time._dowCache[dowCacheKey];\n        }\n        // Using Zeller's algorithm\n        let q = this.day;\n        let m = this.month + (this.month < 3 ? 12 : 0);\n        let Y = this.year - (this.month < 3 ? 1 : 0);\n        let h = q + Y + trunc((m + 1) * 26 / 10) + trunc(Y / 4);\n        {\n            h += trunc(Y / 100) * 6 + trunc(Y / 400);\n        }\n        // Normalize to 1 = wkst\n        h = (h + 7 - firstDow) % 7 + 1;\n        Time._dowCache[dowCacheKey] = h;\n        return h;\n    }\n    /**\n   * Calculate the day of year.\n   * @return {Number}\n   */ dayOfYear() {\n        let is_leap = Time.isLeapYear(this.year) ? 1 : 0;\n        let diypm = Time.daysInYearPassedMonth;\n        return diypm[is_leap][this.month - 1] + this.day;\n    }\n    /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * week. The resulting ICAL.Time instance is of icaltype date, even if this\n   * is a date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The start of the week (cloned)\n   */ startOfWeek(aWeekStart) {\n        let firstDow = aWeekStart || Time.SUNDAY;\n        let result = this.clone();\n        result.day -= (this.dayOfWeek() + 7 - firstDow) % 7;\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * Returns a copy of the current date/time, shifted to the end of the week.\n   * The resulting ICAL.Time instance is of icaltype date, even if this is a\n   * date-time.\n   *\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Time}      The end of the week (cloned)\n   */ endOfWeek(aWeekStart) {\n        let firstDow = aWeekStart || Time.SUNDAY;\n        let result = this.clone();\n        result.day += (7 - this.dayOfWeek() + firstDow - Time.SUNDAY) % 7;\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * month. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the month (cloned)\n   */ startOfMonth() {\n        let result = this.clone();\n        result.day = 1;\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * month.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the month (cloned)\n   */ endOfMonth() {\n        let result = this.clone();\n        result.day = Time.daysInMonth(result.month, result.year);\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * Returns a copy of the current date/time, rewound to the start of the\n   * year. The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The start of the year (cloned)\n   */ startOfYear() {\n        let result = this.clone();\n        result.day = 1;\n        result.month = 1;\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * Returns a copy of the current date/time, shifted to the end of the\n   * year.  The resulting ICAL.Time instance is of icaltype date, even if\n   * this is a date-time.\n   *\n   * @return {Time}      The end of the year (cloned)\n   */ endOfYear() {\n        let result = this.clone();\n        result.day = 31;\n        result.month = 12;\n        result.isDate = true;\n        result.hour = 0;\n        result.minute = 0;\n        result.second = 0;\n        return result;\n    }\n    /**\n   * First calculates the start of the week, then returns the day of year for\n   * this date. If the day falls into the previous year, the day is zero or negative.\n   *\n   * @param {weekDay=} aFirstDayOfWeek\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}     The calculated day of year\n   */ startDoyWeek(aFirstDayOfWeek) {\n        let firstDow = aFirstDayOfWeek || Time.SUNDAY;\n        let delta = this.dayOfWeek() - firstDow;\n        if (delta < 0) delta += 7;\n        return this.dayOfYear() - delta;\n    }\n    /**\n   * Get the dominical letter for the current year. Letters range from A - G\n   * for common years, and AG to GF for leap years.\n   *\n   * @param {Number} yr           The year to retrieve the letter for\n   * @return {String}             The dominical letter.\n   */ getDominicalLetter() {\n        return Time.getDominicalLetter(this.year);\n    }\n    /**\n   * Finds the nthWeekDay relative to the current month (not day).  The\n   * returned value is a day relative the month that this month belongs to so\n   * 1 would indicate the first of the month and 40 would indicate a day in\n   * the following month.\n   *\n   * @param {Number} aDayOfWeek   Day of the week see the day name constants\n   * @param {Number} aPos         Nth occurrence of a given week day values\n   *        of 1 and 0 both indicate the first weekday of that type. aPos may\n   *        be either positive or negative\n   *\n   * @return {Number} numeric value indicating a day relative\n   *                   to the current month of this time object\n   */ nthWeekDay(aDayOfWeek, aPos) {\n        let daysInMonth = Time.daysInMonth(this.month, this.year);\n        let weekday;\n        let pos = aPos;\n        let start = 0;\n        let otherDay = this.clone();\n        if (pos >= 0) {\n            otherDay.day = 1;\n            // because 0 means no position has been given\n            // 1 and 0 indicate the same day.\n            if (pos != 0) {\n                // remove the extra numeric value\n                pos--;\n            }\n            // set current start offset to current day.\n            start = otherDay.day;\n            // find the current day of week\n            let startDow = otherDay.dayOfWeek();\n            // calculate the difference between current\n            // day of the week and desired day of the week\n            let offset = aDayOfWeek - startDow;\n            // if the offset goes into the past\n            // week we add 7 so it goes into the next\n            // week. We only want to go forward in time here.\n            if (offset < 0) // this is really important otherwise we would\n            // end up with dates from in the past.\n            offset += 7;\n            // add offset to start so start is the same\n            // day of the week as the desired day of week.\n            start += offset;\n            // because we are going to add (and multiply)\n            // the numeric value of the day we subtract it\n            // from the start position so not to add it twice.\n            start -= aDayOfWeek;\n            // set week day\n            weekday = aDayOfWeek;\n        } else {\n            // then we set it to the last day in the current month\n            otherDay.day = daysInMonth;\n            // find the ends weekday\n            let endDow = otherDay.dayOfWeek();\n            pos++;\n            weekday = endDow - aDayOfWeek;\n            if (weekday < 0) {\n                weekday += 7;\n            }\n            weekday = daysInMonth - weekday;\n        }\n        weekday += pos * 7;\n        return start + weekday;\n    }\n    /**\n   * Checks if current time is the nth weekday, relative to the current\n   * month.  Will always return false when rule resolves outside of current\n   * month.\n   *\n   * @param {weekDay} aDayOfWeek                 Day of week to check\n   * @param {Number} aPos                        Relative position\n   * @return {Boolean}                           True, if it is the nth weekday\n   */ isNthWeekDay(aDayOfWeek, aPos) {\n        let dow = this.dayOfWeek();\n        if (aPos === 0 && dow === aDayOfWeek) {\n            return true;\n        }\n        // get pos\n        let day = this.nthWeekDay(aDayOfWeek, aPos);\n        if (day === this.day) {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Calculates the ISO 8601 week number. The first week of a year is the\n   * week that contains the first Thursday. The year can have 53 weeks, if\n   * January 1st is a Friday.\n   *\n   * Note there are regions where the first week of the year is the one that\n   * starts on January 1st, which may offset the week number. Also, if a\n   * different week start is specified, this will also affect the week\n   * number.\n   *\n   * @see Time.weekOneStarts\n   * @param {weekDay} aWeekStart                  The weekday the week starts with\n   * @return {Number}                             The ISO week number\n   */ weekNumber(aWeekStart) {\n        let wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;\n        if (wnCacheKey in Time._wnCache) {\n            return Time._wnCache[wnCacheKey];\n        }\n        // This function courtesty of Julian Bucknall, published under the MIT license\n        // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html\n        // plus some fixes to be able to use different week starts.\n        let week1;\n        let dt = this.clone();\n        dt.isDate = true;\n        let isoyear = this.year;\n        if (dt.month == 12 && dt.day > 25) {\n            week1 = Time.weekOneStarts(isoyear + 1, aWeekStart);\n            if (dt.compare(week1) < 0) {\n                week1 = Time.weekOneStarts(isoyear, aWeekStart);\n            } else {\n                isoyear++;\n            }\n        } else {\n            week1 = Time.weekOneStarts(isoyear, aWeekStart);\n            if (dt.compare(week1) < 0) {\n                week1 = Time.weekOneStarts(--isoyear, aWeekStart);\n            }\n        }\n        let daysBetween = dt.subtractDate(week1).toSeconds() / 86400;\n        let answer = trunc(daysBetween / 7) + 1;\n        Time._wnCache[wnCacheKey] = answer;\n        return answer;\n    }\n    /**\n   * Adds the duration to the current time. The instance is modified in\n   * place.\n   *\n   * @param {Duration} aDuration         The duration to add\n   */ addDuration(aDuration) {\n        let mult = aDuration.isNegative ? -1 : 1;\n        // because of the duration optimizations it is much\n        // more efficient to grab all the values up front\n        // then set them directly (which will avoid a normalization call).\n        // So we don't actually normalize until we need it.\n        let second = this.second;\n        let minute = this.minute;\n        let hour = this.hour;\n        let day = this.day;\n        second += mult * aDuration.seconds;\n        minute += mult * aDuration.minutes;\n        hour += mult * aDuration.hours;\n        day += mult * aDuration.days;\n        day += mult * 7 * aDuration.weeks;\n        this.second = second;\n        this.minute = minute;\n        this.hour = hour;\n        this.day = day;\n        this._cachedUnixTime = null;\n    }\n    /**\n   * Subtract the date details (_excluding_ timezone).  Useful for finding\n   * the relative difference between two time objects excluding their\n   * timezone differences.\n   *\n   * @param {Time} aDate     The date to subtract\n   * @return {Duration}      The difference as a duration\n   */ subtractDate(aDate) {\n        let unixTime = this.toUnixTime() + this.utcOffset();\n        let other = aDate.toUnixTime() + aDate.utcOffset();\n        return Duration.fromSeconds(unixTime - other);\n    }\n    /**\n   * Subtract the date details, taking timezones into account.\n   *\n   * @param {Time} aDate  The date to subtract\n   * @return {Duration}   The difference in duration\n   */ subtractDateTz(aDate) {\n        let unixTime = this.toUnixTime();\n        let other = aDate.toUnixTime();\n        return Duration.fromSeconds(unixTime - other);\n    }\n    /**\n   * Compares the ICAL.Time instance with another one.\n   *\n   * @param {Duration} aOther        The instance to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */ compare(other) {\n        let a = this.toUnixTime();\n        let b = other.toUnixTime();\n        if (a > b) return 1;\n        if (b > a) return -1;\n        return 0;\n    }\n    /**\n   * Compares only the date part of this instance with another one.\n   *\n   * @param {Duration} other              The instance to compare with\n   * @param {Timezone} tz                 The timezone to compare in\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */ compareDateOnlyTz(other, tz) {\n        let a = this.convertToZone(tz);\n        let b = other.convertToZone(tz);\n        let rc = 0;\n        if ((rc = Time._cmp_attr(a, b, \"year\")) != 0) return rc;\n        if ((rc = Time._cmp_attr(a, b, \"month\")) != 0) return rc;\n        if ((rc = Time._cmp_attr(a, b, \"day\")) != 0) return rc;\n        return rc;\n    }\n    /**\n   * Convert the instance into another timezone. The returned ICAL.Time\n   * instance is always a copy.\n   *\n   * @param {Timezone} zone      The zone to convert to\n   * @return {Time}              The copy, converted to the zone\n   */ convertToZone(zone) {\n        let copy = this.clone();\n        let zone_equals = this.zone.tzid == zone.tzid;\n        if (!this.isDate && !zone_equals) {\n            Timezone.convert_time(copy, this.zone, zone);\n        }\n        copy.zone = zone;\n        return copy;\n    }\n    /**\n   * Calculates the UTC offset of the current date/time in the timezone it is\n   * in.\n   *\n   * @return {Number}     UTC offset in seconds\n   */ utcOffset() {\n        if (this.zone == Timezone.localTimezone || this.zone == Timezone.utcTimezone) {\n            return 0;\n        } else {\n            return this.zone.utcOffset(this);\n        }\n    }\n    /**\n   * Returns an RFC 5545 compliant ical representation of this object.\n   *\n   * @return {String} ical date/date-time\n   */ toICALString() {\n        let string = this.toString();\n        if (string.length > 10) {\n            return design$1.icalendar.value[\"date-time\"].toICAL(string);\n        } else {\n            return design$1.icalendar.value.date.toICAL(string);\n        }\n    }\n    /**\n   * The string representation of this date/time, in jCal form\n   * (including : and - separators).\n   * @return {String}\n   */ toString() {\n        let result = this.year + \"-\" + pad2(this.month) + \"-\" + pad2(this.day);\n        if (!this.isDate) {\n            result += \"T\" + pad2(this.hour) + \":\" + pad2(this.minute) + \":\" + pad2(this.second);\n            if (this.zone === Timezone.utcTimezone) {\n                result += \"Z\";\n            }\n        }\n        return result;\n    }\n    /**\n   * Converts the current instance to a Javascript date\n   * @return {Date}\n   */ toJSDate() {\n        if (this.zone == Timezone.localTimezone) {\n            if (this.isDate) {\n                return new Date(this.year, this.month - 1, this.day);\n            } else {\n                return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, 0);\n            }\n        } else {\n            return new Date(this.toUnixTime() * 1000);\n        }\n    }\n    _normalize() {\n        if (this._time.isDate) {\n            this._time.hour = 0;\n            this._time.minute = 0;\n            this._time.second = 0;\n        }\n        this.adjust(0, 0, 0, 0);\n        return this;\n    }\n    /**\n   * Adjust the date/time by the given offset\n   *\n   * @param {Number} aExtraDays       The extra amount of days\n   * @param {Number} aExtraHours      The extra amount of hours\n   * @param {Number} aExtraMinutes    The extra amount of minutes\n   * @param {Number} aExtraSeconds    The extra amount of seconds\n   * @param {Number=} aTime           The time to adjust, defaults to the\n   *                                    current instance.\n   */ adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {\n        let minutesOverflow, hoursOverflow, daysOverflow = 0, yearsOverflow = 0;\n        let second, minute, hour, day;\n        let daysInMonth;\n        let time = aTime || this._time;\n        if (!time.isDate) {\n            second = time.second + aExtraSeconds;\n            time.second = second % 60;\n            minutesOverflow = trunc(second / 60);\n            if (time.second < 0) {\n                time.second += 60;\n                minutesOverflow--;\n            }\n            minute = time.minute + aExtraMinutes + minutesOverflow;\n            time.minute = minute % 60;\n            hoursOverflow = trunc(minute / 60);\n            if (time.minute < 0) {\n                time.minute += 60;\n                hoursOverflow--;\n            }\n            hour = time.hour + aExtraHours + hoursOverflow;\n            time.hour = hour % 24;\n            daysOverflow = trunc(hour / 24);\n            if (time.hour < 0) {\n                time.hour += 24;\n                daysOverflow--;\n            }\n        }\n        // Adjust month and year first, because we need to know what month the day\n        // is in before adjusting it.\n        if (time.month > 12) {\n            yearsOverflow = trunc((time.month - 1) / 12);\n        } else if (time.month < 1) {\n            yearsOverflow = trunc(time.month / 12) - 1;\n        }\n        time.year += yearsOverflow;\n        time.month -= 12 * yearsOverflow;\n        // Now take care of the days (and adjust month if needed)\n        day = time.day + aExtraDays + daysOverflow;\n        if (day > 0) {\n            for(;;){\n                daysInMonth = Time.daysInMonth(time.month, time.year);\n                if (day <= daysInMonth) {\n                    break;\n                }\n                time.month++;\n                if (time.month > 12) {\n                    time.year++;\n                    time.month = 1;\n                }\n                day -= daysInMonth;\n            }\n        } else {\n            while(day <= 0){\n                if (time.month == 1) {\n                    time.year--;\n                    time.month = 12;\n                } else {\n                    time.month--;\n                }\n                day += Time.daysInMonth(time.month, time.year);\n            }\n        }\n        time.day = day;\n        this._cachedUnixTime = null;\n        return this;\n    }\n    /**\n   * Sets up the current instance from unix time, the number of seconds since\n   * January 1st, 1970.\n   *\n   * @param {Number} seconds      The seconds to set up with\n   */ fromUnixTime(seconds) {\n        this.zone = Timezone.utcTimezone;\n        // We could use `fromJSDate` here, but this is about twice as fast.\n        // We could also clone `epochTime` and use `adjust` for a more\n        // ical.js-centric approach, but this is about 100 times as fast.\n        let date = new Date(seconds * 1000);\n        this.year = date.getUTCFullYear();\n        this.month = date.getUTCMonth() + 1;\n        this.day = date.getUTCDate();\n        if (this._time.isDate) {\n            this.hour = 0;\n            this.minute = 0;\n            this.second = 0;\n        } else {\n            this.hour = date.getUTCHours();\n            this.minute = date.getUTCMinutes();\n            this.second = date.getUTCSeconds();\n        }\n        this._cachedUnixTime = null;\n    }\n    /**\n   * Converts the current instance to seconds since January 1st 1970.\n   *\n   * @return {Number}         Seconds since 1970\n   */ toUnixTime() {\n        if (this._cachedUnixTime !== null) {\n            return this._cachedUnixTime;\n        }\n        let offset = this.utcOffset();\n        // we use the offset trick to ensure\n        // that we are getting the actual UTC time\n        let ms = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second - offset);\n        // seconds\n        this._cachedUnixTime = ms / 1000;\n        return this._cachedUnixTime;\n    }\n    /**\n   * Converts time to into Object which can be serialized then re-created\n   * using the constructor.\n   *\n   * @example\n   * // toJSON will automatically be called\n   * var json = JSON.stringify(mytime);\n   *\n   * var deserialized = JSON.parse(json);\n   *\n   * var time = new ICAL.Time(deserialized);\n   *\n   * @return {Object}\n   */ toJSON() {\n        let copy = [\n            \"year\",\n            \"month\",\n            \"day\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n            \"isDate\"\n        ];\n        let result = Object.create(null);\n        let i = 0;\n        let len = copy.length;\n        let prop;\n        for(; i < len; i++){\n            prop = copy[i];\n            result[prop] = this[prop];\n        }\n        if (this.zone) {\n            result.timezone = this.zone.tzid;\n        }\n        return result;\n    }\n}\n(function setupNormalizeAttributes() {\n    // This needs to run before any instances are created!\n    function defineAttr(attr) {\n        Object.defineProperty(Time.prototype, attr, {\n            get: function getTimeAttr() {\n                if (this._pendingNormalization) {\n                    this._normalize();\n                    this._pendingNormalization = false;\n                }\n                return this._time[attr];\n            },\n            set: function setTimeAttr(val) {\n                // Check if isDate will be set and if was not set to normalize date.\n                // This avoids losing days when seconds, minutes and hours are zeroed\n                // what normalize will do when time is a date.\n                if (attr === \"isDate\" && val && !this._time.isDate) {\n                    this.adjust(0, 0, 0, 0);\n                }\n                this._cachedUnixTime = null;\n                this._pendingNormalization = true;\n                this._time[attr] = val;\n            }\n        });\n    }\n    defineAttr(\"year\");\n    defineAttr(\"month\");\n    defineAttr(\"day\");\n    defineAttr(\"hour\");\n    defineAttr(\"minute\");\n    defineAttr(\"second\");\n    defineAttr(\"isDate\");\n})();\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").parserState} parserState\n * Imports the 'parserState' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */ const CHAR = /[^ \\t]/;\nconst VALUE_DELIMITER = \":\";\nconst PARAM_DELIMITER = \";\";\nconst PARAM_NAME_DELIMITER = \"=\";\nconst DEFAULT_VALUE_TYPE$1 = \"unknown\";\nconst DEFAULT_PARAM_TYPE = \"text\";\nconst RFC6868_REPLACE_MAP$1 = {\n    \"^'\": '\"',\n    \"^n\": \"\\n\",\n    \"^^\": \"^\"\n};\n/**\n * Parses iCalendar or vCard data into a raw jCal object. Consult\n * documentation on the {@tutorial layers|layers of parsing} for more\n * details.\n *\n * @function ICAL.parse\n * @memberof ICAL\n * @variation function\n * @todo Fix the API to be more clear on the return type\n * @param {String} input      The string data to parse\n * @return {Object|Object[]}  A single jCal object, or an array thereof\n */ function parse(input) {\n    let state = {};\n    let root = state.component = [];\n    state.stack = [\n        root\n    ];\n    parse._eachLine(input, function(err, line) {\n        parse._handleContentLine(line, state);\n    });\n    // when there are still items on the stack\n    // throw a fatal error, a component was not closed\n    // correctly in that case.\n    if (state.stack.length > 1) {\n        throw new ParserError(\"invalid ical body. component began but did not end\");\n    }\n    state = null;\n    return root.length == 1 ? root[0] : root;\n}\n/**\n * Parse an iCalendar property value into the jCal for a single property\n *\n * @function ICAL.parse.property\n * @param {String} str\n *   The iCalendar property string to parse\n * @param {designSet=} designSet\n *   The design data to use for this property\n * @return {Object}\n *   The jCal Object containing the property\n */ parse.property = function(str, designSet) {\n    let state = {\n        component: [\n            [],\n            []\n        ],\n        designSet: designSet || design$1.defaultSet\n    };\n    parse._handleContentLine(str, state);\n    return state.component[1][0];\n};\n/**\n * Convenience method to parse a component. You can use ICAL.parse() directly\n * instead.\n *\n * @function ICAL.parse.component\n * @see ICAL.parse(function)\n * @param {String} str    The iCalendar component string to parse\n * @return {Object}       The jCal Object containing the component\n */ parse.component = function(str) {\n    return parse(str);\n};\n/**\n * An error that occurred during parsing.\n *\n * @param {String} message        The error message\n * @memberof ICAL.parse\n * @extends {Error}\n */ class ParserError extends Error {\n    constructor(...args){\n        super(...args);\n        this.name = this.constructor.name;\n    }\n}\n// classes & constants\nparse.ParserError = ParserError;\n/**\n * Handles a single line of iCalendar/vCard, updating the state.\n *\n * @private\n * @function ICAL.parse._handleContentLine\n * @param {String} line          The content line to process\n * @param {parserState} state    The current state of the line parsing\n */ parse._handleContentLine = function(line, state) {\n    // break up the parts of the line\n    let valuePos = line.indexOf(VALUE_DELIMITER);\n    let paramPos = line.indexOf(PARAM_DELIMITER);\n    let lastParamIndex;\n    let lastValuePos;\n    // name of property or begin/end\n    let name;\n    let value;\n    // params is only overridden if paramPos !== -1.\n    // we can't do params = params || {} later on\n    // because it sacrifices ops.\n    let params = {};\n    /**\n   * Different property cases\n   *\n   *\n   * 1. RRULE:FREQ=foo\n   *    // FREQ= is not a param but the value\n   *\n   * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;\n   *    // ROLE= is a param because : has not happened yet\n   */ // when the parameter delimiter is after the\n    // value delimiter then it is not a parameter.\n    if (paramPos !== -1 && valuePos !== -1) {\n        // when the parameter delimiter is after the\n        // value delimiter then it is not a parameter.\n        if (paramPos > valuePos) {\n            paramPos = -1;\n        }\n    }\n    let parsedParams;\n    if (paramPos !== -1) {\n        name = line.slice(0, Math.max(0, paramPos)).toLowerCase();\n        parsedParams = parse._parseParameters(line.slice(Math.max(0, paramPos)), 0, state.designSet);\n        if (parsedParams[2] == -1) {\n            throw new ParserError(\"Invalid parameters in '\" + line + \"'\");\n        }\n        params = parsedParams[0];\n        lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;\n        if ((lastValuePos = line.slice(Math.max(0, lastParamIndex)).indexOf(VALUE_DELIMITER)) !== -1) {\n            value = line.slice(Math.max(0, lastParamIndex + lastValuePos + 1));\n        } else {\n            throw new ParserError(\"Missing parameter value in '\" + line + \"'\");\n        }\n    } else if (valuePos !== -1) {\n        // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)\n        name = line.slice(0, Math.max(0, valuePos)).toLowerCase();\n        value = line.slice(Math.max(0, valuePos + 1));\n        if (name === \"begin\") {\n            let newComponent = [\n                value.toLowerCase(),\n                [],\n                []\n            ];\n            if (state.stack.length === 1) {\n                state.component.push(newComponent);\n            } else {\n                state.component[2].push(newComponent);\n            }\n            state.stack.push(state.component);\n            state.component = newComponent;\n            if (!state.designSet) {\n                state.designSet = design$1.getDesignSet(state.component[0]);\n            }\n            return;\n        } else if (name === \"end\") {\n            state.component = state.stack.pop();\n            return;\n        }\n    // If it is not begin/end, then this is a property with an empty value,\n    // which should be considered valid.\n    } else {\n        /**\n     * Invalid line.\n     * The rational to throw an error is we will\n     * never be certain that the rest of the file\n     * is sane and it is unlikely that we can serialize\n     * the result correctly either.\n     */ throw new ParserError('invalid line (no token \";\" or \":\") \"' + line + '\"');\n    }\n    let valueType;\n    let multiValue = false;\n    let structuredValue = false;\n    let propertyDetails;\n    let splitName;\n    let ungroupedName;\n    // fetch the ungrouped part of the name\n    if (state.designSet.propertyGroups && name.indexOf(\".\") !== -1) {\n        splitName = name.split(\".\");\n        params.group = splitName[0];\n        ungroupedName = splitName[1];\n    } else {\n        ungroupedName = name;\n    }\n    if (ungroupedName in state.designSet.property) {\n        propertyDetails = state.designSet.property[ungroupedName];\n        if (\"multiValue\" in propertyDetails) {\n            multiValue = propertyDetails.multiValue;\n        }\n        if (\"structuredValue\" in propertyDetails) {\n            structuredValue = propertyDetails.structuredValue;\n        }\n        if (value && \"detectType\" in propertyDetails) {\n            valueType = propertyDetails.detectType(value);\n        }\n    }\n    // attempt to determine value\n    if (!valueType) {\n        if (!(\"value\" in params)) {\n            if (propertyDetails) {\n                valueType = propertyDetails.defaultType;\n            } else {\n                valueType = DEFAULT_VALUE_TYPE$1;\n            }\n        } else {\n            // possible to avoid this?\n            valueType = params.value.toLowerCase();\n        }\n    }\n    delete params.value;\n    /**\n   * Note on `var result` juggling:\n   *\n   * I observed that building the array in pieces has adverse\n   * effects on performance, so where possible we inline the creation.\n   * It is a little ugly but resulted in ~2000 additional ops/sec.\n   */ let result;\n    if (multiValue && structuredValue) {\n        value = parse._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);\n        result = [\n            ungroupedName,\n            params,\n            valueType,\n            value\n        ];\n    } else if (multiValue) {\n        result = [\n            ungroupedName,\n            params,\n            valueType\n        ];\n        parse._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);\n    } else if (structuredValue) {\n        value = parse._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);\n        result = [\n            ungroupedName,\n            params,\n            valueType,\n            value\n        ];\n    } else {\n        value = parse._parseValue(value, valueType, state.designSet, false);\n        result = [\n            ungroupedName,\n            params,\n            valueType,\n            value\n        ];\n    }\n    // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n    // component with as value 4.0, note that 3.0 does not have this requirement.\n    if (state.component[0] === \"vcard\" && state.component[1].length === 0 && !(name === \"version\" && value === \"4.0\")) {\n        state.designSet = design$1.getDesignSet(\"vcard3\");\n    }\n    state.component[1].push(result);\n};\n/**\n * Parse a value from the raw value into the jCard/jCal value.\n *\n * @private\n * @function ICAL.parse._parseValue\n * @param {String} value          Original value\n * @param {String} type           Type of value\n * @param {Object} designSet      The design data to use for this value\n * @return {Object} varies on type\n */ parse._parseValue = function(value, type, designSet, structuredValue) {\n    if (type in designSet.value && \"fromICAL\" in designSet.value[type]) {\n        return designSet.value[type].fromICAL(value, structuredValue);\n    }\n    return value;\n};\n/**\n * Parse parameters from a string to object.\n *\n * @function ICAL.parse._parseParameters\n * @private\n * @param {String} line           A single unfolded line\n * @param {Number} start         Position to start looking for properties\n * @param {Object} designSet      The design data to use for this property\n * @return {Object} key/value pairs\n */ parse._parseParameters = function(line, start, designSet) {\n    let lastParam = start;\n    let pos = 0;\n    let delim = PARAM_NAME_DELIMITER;\n    let result = {};\n    let name, lcname;\n    let value, valuePos = -1;\n    let type, multiValue, mvdelim;\n    // find the next '=' sign\n    // use lastParam and pos to find name\n    // check if \" is used if so get value from \"->\"\n    // then increment pos to find next ;\n    while(pos !== false && (pos = line.indexOf(delim, pos + 1)) !== -1){\n        name = line.slice(lastParam + 1, pos);\n        if (name.length == 0) {\n            throw new ParserError(\"Empty parameter name in '\" + line + \"'\");\n        }\n        lcname = name.toLowerCase();\n        mvdelim = false;\n        multiValue = false;\n        if (lcname in designSet.param && designSet.param[lcname].valueType) {\n            type = designSet.param[lcname].valueType;\n        } else {\n            type = DEFAULT_PARAM_TYPE;\n        }\n        if (lcname in designSet.param) {\n            multiValue = designSet.param[lcname].multiValue;\n            if (designSet.param[lcname].multiValueSeparateDQuote) {\n                mvdelim = parse._rfc6868Escape('\"' + multiValue + '\"');\n            }\n        }\n        let nextChar = line[pos + 1];\n        if (nextChar === '\"') {\n            valuePos = pos + 2;\n            pos = line.indexOf('\"', valuePos);\n            if (multiValue && pos != -1) {\n                let extendedValue = true;\n                while(extendedValue){\n                    if (line[pos + 1] == multiValue && line[pos + 2] == '\"') {\n                        pos = line.indexOf('\"', pos + 3);\n                    } else {\n                        extendedValue = false;\n                    }\n                }\n            }\n            if (pos === -1) {\n                throw new ParserError('invalid line (no matching double quote) \"' + line + '\"');\n            }\n            value = line.slice(valuePos, pos);\n            lastParam = line.indexOf(PARAM_DELIMITER, pos);\n            let propValuePos = line.indexOf(VALUE_DELIMITER, pos);\n            // if either no next parameter or delimeter in property value, let's stop here\n            if (lastParam === -1 || propValuePos !== -1 && lastParam > propValuePos) {\n                pos = false;\n            }\n        } else {\n            valuePos = pos + 1;\n            // move to next \";\"\n            let nextPos = line.indexOf(PARAM_DELIMITER, valuePos);\n            let propValuePos = line.indexOf(VALUE_DELIMITER, valuePos);\n            if (propValuePos !== -1 && nextPos > propValuePos) {\n                // this is a delimiter in the property value, let's stop here\n                nextPos = propValuePos;\n                pos = false;\n            } else if (nextPos === -1) {\n                // no \";\"\n                if (propValuePos === -1) {\n                    nextPos = line.length;\n                } else {\n                    nextPos = propValuePos;\n                }\n                pos = false;\n            } else {\n                lastParam = nextPos;\n                pos = nextPos;\n            }\n            value = line.slice(valuePos, nextPos);\n        }\n        const length_before = value.length;\n        value = parse._rfc6868Escape(value);\n        valuePos += length_before - value.length;\n        if (multiValue) {\n            let delimiter = mvdelim || multiValue;\n            value = parse._parseMultiValue(value, delimiter, type, [], null, designSet);\n        } else {\n            value = parse._parseValue(value, type, designSet);\n        }\n        if (multiValue && lcname in result) {\n            if (Array.isArray(result[lcname])) {\n                result[lcname].push(value);\n            } else {\n                result[lcname] = [\n                    result[lcname],\n                    value\n                ];\n            }\n        } else {\n            result[lcname] = value;\n        }\n    }\n    return [\n        result,\n        value,\n        valuePos\n    ];\n};\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.parse so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @function ICAL.parse._rfc6868Escape\n * @param {String} val        The value to escape\n * @return {String}           The escaped value\n */ parse._rfc6868Escape = function(val) {\n    return val.replace(/\\^['n^]/g, function(x) {\n        return RFC6868_REPLACE_MAP$1[x];\n    });\n};\n/**\n * Parse a multi value string. This function is used either for parsing\n * actual multi-value property's values, or for handling parameter values. It\n * can be used for both multi-value properties and structured value properties.\n *\n * @private\n * @function ICAL.parse._parseMultiValue\n * @param {String} buffer           The buffer containing the full value\n * @param {String} delim            The multi-value delimiter\n * @param {String} type             The value type to be parsed\n * @param {Array.<?>} result        The array to append results to, varies on value type\n * @param {String} innerMulti       The inner delimiter to split each value with\n * @param {designSet} designSet     The design data for this value\n * @return {?|Array.<?>}            Either an array of results, or the first result\n */ parse._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {\n    let pos = 0;\n    let lastPos = 0;\n    let value;\n    if (delim.length === 0) {\n        return buffer;\n    }\n    // split each piece\n    while((pos = unescapedIndexOf(buffer, delim, lastPos)) !== -1){\n        value = buffer.slice(lastPos, pos);\n        if (innerMulti) {\n            value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n        } else {\n            value = parse._parseValue(value, type, designSet, structuredValue);\n        }\n        result.push(value);\n        lastPos = pos + delim.length;\n    }\n    // on the last piece take the rest of string\n    value = buffer.slice(lastPos);\n    if (innerMulti) {\n        value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);\n    } else {\n        value = parse._parseValue(value, type, designSet, structuredValue);\n    }\n    result.push(value);\n    return result.length == 1 ? result[0] : result;\n};\n/**\n * Process a complete buffer of iCalendar/vCard data line by line, correctly\n * unfolding content. Each line will be processed with the given callback\n *\n * @private\n * @function ICAL.parse._eachLine\n * @param {String} buffer                         The buffer to process\n * @param {function(?String, String)} callback    The callback for each line\n */ parse._eachLine = function(buffer, callback) {\n    let len = buffer.length;\n    let lastPos = buffer.search(CHAR);\n    let pos = lastPos;\n    let line;\n    let firstChar;\n    let newlineOffset;\n    do {\n        pos = buffer.indexOf(\"\\n\", lastPos) + 1;\n        if (pos > 1 && buffer[pos - 2] === \"\\r\") {\n            newlineOffset = 2;\n        } else {\n            newlineOffset = 1;\n        }\n        if (pos === 0) {\n            pos = len;\n            newlineOffset = 0;\n        }\n        firstChar = buffer[lastPos];\n        if (firstChar === \" \" || firstChar === \"\t\") {\n            // add to line\n            line += buffer.slice(lastPos + 1, pos - newlineOffset);\n        } else {\n            if (line) callback(null, line);\n            // push line\n            line = buffer.slice(lastPos, pos - newlineOffset);\n        }\n        lastPos = pos;\n    }while (pos !== len);\n    // extra ending line\n    line = line.trim();\n    if (line.length) callback(null, line);\n};\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ const OPTIONS = [\n    \"tzid\",\n    \"location\",\n    \"tznames\",\n    \"latitude\",\n    \"longitude\"\n];\n/**\n * Timezone representation.\n *\n * @example\n * var vcalendar;\n * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');\n * var tzid = timezoneComp.getFirstPropertyValue('tzid');\n *\n * var timezone = new ICAL.Timezone({\n *   component: timezoneComp,\n *   tzid\n * });\n *\n * @memberof ICAL\n */ class Timezone {\n    static _compare_change_fn(a, b) {\n        if (a.year < b.year) return -1;\n        else if (a.year > b.year) return 1;\n        if (a.month < b.month) return -1;\n        else if (a.month > b.month) return 1;\n        if (a.day < b.day) return -1;\n        else if (a.day > b.day) return 1;\n        if (a.hour < b.hour) return -1;\n        else if (a.hour > b.hour) return 1;\n        if (a.minute < b.minute) return -1;\n        else if (a.minute > b.minute) return 1;\n        if (a.second < b.second) return -1;\n        else if (a.second > b.second) return 1;\n        return 0;\n    }\n    /**\n   * Convert the date/time from one zone to the next.\n   *\n   * @param {Time} tt                  The time to convert\n   * @param {Timezone} from_zone       The source zone to convert from\n   * @param {Timezone} to_zone         The target zone to convert to\n   * @return {Time}                    The converted date/time object\n   */ static convert_time(tt, from_zone, to_zone) {\n        if (tt.isDate || from_zone.tzid == to_zone.tzid || from_zone == Timezone.localTimezone || to_zone == Timezone.localTimezone) {\n            tt.zone = to_zone;\n            return tt;\n        }\n        let utcOffset = from_zone.utcOffset(tt);\n        tt.adjust(0, 0, 0, -utcOffset);\n        utcOffset = to_zone.utcOffset(tt);\n        tt.adjust(0, 0, 0, utcOffset);\n        return null;\n    }\n    /**\n   * Creates a new ICAL.Timezone instance from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */ static fromData(aData) {\n        let tt = new Timezone();\n        return tt.fromData(aData);\n    }\n    /**\n   * The instance describing the UTC timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */ static #utcTimezone = null;\n    static get utcTimezone() {\n        if (!this.#utcTimezone) {\n            this.#utcTimezone = Timezone.fromData({\n                tzid: \"UTC\"\n            });\n        }\n        return this.#utcTimezone;\n    }\n    /**\n   * The instance describing the local timezone\n   * @type {Timezone}\n   * @constant\n   * @instance\n   */ static #localTimezone = null;\n    static get localTimezone() {\n        if (!this.#localTimezone) {\n            this.#localTimezone = Timezone.fromData({\n                tzid: \"floating\"\n            });\n        }\n        return this.#localTimezone;\n    }\n    /**\n   * Adjust a timezone change object.\n   * @private\n   * @param {Object} change     The timezone change object\n   * @param {Number} days       The extra amount of days\n   * @param {Number} hours      The extra amount of hours\n   * @param {Number} minutes    The extra amount of minutes\n   * @param {Number} seconds    The extra amount of seconds\n   */ static adjust_change(change, days, hours, minutes, seconds) {\n        return Time.prototype.adjust.call(change, days, hours, minutes, seconds, change);\n    }\n    static{\n        this._minimumExpansionYear = -1;\n    }\n    static{\n        this.EXTRA_COVERAGE = 5;\n    }\n    /**\n   * Creates a new ICAL.Timezone instance, by passing in a tzid and component.\n   *\n   * @param {Component|Object} data options for class\n   * @param {String|Component} data.component\n   *        If data is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} data.tzid      The timezone identifier\n   * @param {String} data.location  The timezone locationw\n   * @param {String} data.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} data.latitude  The latitude of the timezone\n   * @param {Number} data.longitude The longitude of the timezone\n   */ constructor(data){\n        /**\n   * Timezone identifier\n   * @type {String}\n   */ this.tzid = \"\";\n        /**\n   * Timezone location\n   * @type {String}\n   */ this.location = \"\";\n        /**\n   * Alternative timezone name, for the string representation\n   * @type {String}\n   */ this.tznames = \"\";\n        /**\n   * The primary latitude for the timezone.\n   * @type {Number}\n   */ this.latitude = 0.0;\n        /**\n   * The primary longitude for the timezone.\n   * @type {Number}\n   */ this.longitude = 0.0;\n        /**\n   * The vtimezone component for this timezone.\n   * @type {Component}\n   */ this.component = null;\n        /**\n   * The year this timezone has been expanded to. All timezone transition\n   * dates until this year are known and can be used for calculation\n   *\n   * @private\n   * @type {Number}\n   */ this.expandedUntilYear = 0;\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icaltimezone\"\n   */ this.icalclass = \"icaltimezone\";\n        this.wrappedJSObject = this;\n        this.fromData(data);\n    }\n    /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Component|Object} aData options for class\n   * @param {String|Component} aData.component\n   *        If aData is a simple object, then this member can be set to either a\n   *        string containing the component data, or an already parsed\n   *        ICAL.Component\n   * @param {String} aData.tzid      The timezone identifier\n   * @param {String} aData.location  The timezone locationw\n   * @param {String} aData.tznames   An alternative string representation of the\n   *                                  timezone\n   * @param {Number} aData.latitude  The latitude of the timezone\n   * @param {Number} aData.longitude The longitude of the timezone\n   */ fromData(aData) {\n        this.expandedUntilYear = 0;\n        this.changes = [];\n        if (aData instanceof Component) {\n            // Either a component is passed directly\n            this.component = aData;\n        } else {\n            // Otherwise the component may be in the data object\n            if (aData && \"component\" in aData) {\n                if (typeof aData.component == \"string\") {\n                    // If a string was passed, parse it as a component\n                    let jCal = parse(aData.component);\n                    this.component = new Component(jCal);\n                } else if (aData.component instanceof Component) {\n                    // If it was a component already, then just set it\n                    this.component = aData.component;\n                } else {\n                    // Otherwise just null out the component\n                    this.component = null;\n                }\n            }\n            // Copy remaining passed properties\n            for (let prop of OPTIONS){\n                if (aData && prop in aData) {\n                    this[prop] = aData[prop];\n                }\n            }\n        }\n        // If we have a component but no TZID, attempt to get it from the\n        // component's properties.\n        if (this.component instanceof Component && !this.tzid) {\n            this.tzid = this.component.getFirstPropertyValue(\"tzid\");\n        }\n        return this;\n    }\n    /**\n   * Finds the utcOffset the given time would occur in this timezone.\n   *\n   * @param {Time} tt         The time to check for\n   * @return {Number}         utc offset in seconds\n   */ utcOffset(tt) {\n        if (this == Timezone.utcTimezone || this == Timezone.localTimezone) {\n            return 0;\n        }\n        this._ensureCoverage(tt.year);\n        if (!this.changes.length) {\n            return 0;\n        }\n        let tt_change = {\n            year: tt.year,\n            month: tt.month,\n            day: tt.day,\n            hour: tt.hour,\n            minute: tt.minute,\n            second: tt.second\n        };\n        let change_num = this._findNearbyChange(tt_change);\n        let change_num_to_use = -1;\n        let step = 1;\n        // TODO: replace with bin search?\n        for(;;){\n            let change = clone(this.changes[change_num], true);\n            if (change.utcOffset < change.prevUtcOffset) {\n                Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);\n            } else {\n                Timezone.adjust_change(change, 0, 0, 0, change.prevUtcOffset);\n            }\n            let cmp = Timezone._compare_change_fn(tt_change, change);\n            if (cmp >= 0) {\n                change_num_to_use = change_num;\n            } else {\n                step = -1;\n            }\n            if (step == -1 && change_num_to_use != -1) {\n                break;\n            }\n            change_num += step;\n            if (change_num < 0) {\n                return 0;\n            }\n            if (change_num >= this.changes.length) {\n                break;\n            }\n        }\n        let zone_change = this.changes[change_num_to_use];\n        let utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;\n        if (utcOffset_change < 0 && change_num_to_use > 0) {\n            let tmp_change = clone(zone_change, true);\n            Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);\n            if (Timezone._compare_change_fn(tt_change, tmp_change) < 0) {\n                let prev_zone_change = this.changes[change_num_to_use - 1];\n                let want_daylight = false; // TODO\n                if (zone_change.is_daylight != want_daylight && prev_zone_change.is_daylight == want_daylight) {\n                    zone_change = prev_zone_change;\n                }\n            }\n        }\n        // TODO return is_daylight?\n        return zone_change.utcOffset;\n    }\n    _findNearbyChange(change) {\n        // find the closest match\n        let idx = binsearchInsert(this.changes, change, Timezone._compare_change_fn);\n        if (idx >= this.changes.length) {\n            return this.changes.length - 1;\n        }\n        return idx;\n    }\n    _ensureCoverage(aYear) {\n        if (Timezone._minimumExpansionYear == -1) {\n            let today = Time.now();\n            Timezone._minimumExpansionYear = today.year;\n        }\n        let changesEndYear = aYear;\n        if (changesEndYear < Timezone._minimumExpansionYear) {\n            changesEndYear = Timezone._minimumExpansionYear;\n        }\n        changesEndYear += Timezone.EXTRA_COVERAGE;\n        if (!this.changes.length || this.expandedUntilYear < aYear) {\n            let subcomps = this.component.getAllSubcomponents();\n            let compLen = subcomps.length;\n            let compIdx = 0;\n            for(; compIdx < compLen; compIdx++){\n                this._expandComponent(subcomps[compIdx], changesEndYear, this.changes);\n            }\n            this.changes.sort(Timezone._compare_change_fn);\n            this.expandedUntilYear = changesEndYear;\n        }\n    }\n    _expandComponent(aComponent, aYear, changes) {\n        if (!aComponent.hasProperty(\"dtstart\") || !aComponent.hasProperty(\"tzoffsetto\") || !aComponent.hasProperty(\"tzoffsetfrom\")) {\n            return null;\n        }\n        let dtstart = aComponent.getFirstProperty(\"dtstart\").getFirstValue();\n        let change;\n        function convert_tzoffset(offset) {\n            return offset.factor * (offset.hours * 3600 + offset.minutes * 60);\n        }\n        function init_changes() {\n            let changebase = {};\n            changebase.is_daylight = aComponent.name == \"daylight\";\n            changebase.utcOffset = convert_tzoffset(aComponent.getFirstProperty(\"tzoffsetto\").getFirstValue());\n            changebase.prevUtcOffset = convert_tzoffset(aComponent.getFirstProperty(\"tzoffsetfrom\").getFirstValue());\n            return changebase;\n        }\n        if (!aComponent.hasProperty(\"rrule\") && !aComponent.hasProperty(\"rdate\")) {\n            change = init_changes();\n            change.year = dtstart.year;\n            change.month = dtstart.month;\n            change.day = dtstart.day;\n            change.hour = dtstart.hour;\n            change.minute = dtstart.minute;\n            change.second = dtstart.second;\n            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n            changes.push(change);\n        } else {\n            let props = aComponent.getAllProperties(\"rdate\");\n            for (let rdate of props){\n                let time = rdate.getFirstValue();\n                change = init_changes();\n                change.year = time.year;\n                change.month = time.month;\n                change.day = time.day;\n                if (time.isDate) {\n                    change.hour = dtstart.hour;\n                    change.minute = dtstart.minute;\n                    change.second = dtstart.second;\n                    if (dtstart.zone != Timezone.utcTimezone) {\n                        Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n                    }\n                } else {\n                    change.hour = time.hour;\n                    change.minute = time.minute;\n                    change.second = time.second;\n                    if (time.zone != Timezone.utcTimezone) {\n                        Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n                    }\n                }\n                changes.push(change);\n            }\n            let rrule = aComponent.getFirstProperty(\"rrule\");\n            if (rrule) {\n                rrule = rrule.getFirstValue();\n                change = init_changes();\n                if (rrule.until && rrule.until.zone == Timezone.utcTimezone) {\n                    rrule.until.adjust(0, 0, 0, change.prevUtcOffset);\n                    rrule.until.zone = Timezone.localTimezone;\n                }\n                let iterator = rrule.iterator(dtstart);\n                let occ;\n                while(occ = iterator.next()){\n                    change = init_changes();\n                    if (occ.year > aYear || !occ) {\n                        break;\n                    }\n                    change.year = occ.year;\n                    change.month = occ.month;\n                    change.day = occ.day;\n                    change.hour = occ.hour;\n                    change.minute = occ.minute;\n                    change.second = occ.second;\n                    change.isDate = occ.isDate;\n                    Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);\n                    changes.push(change);\n                }\n            }\n        }\n        return changes;\n    }\n    /**\n   * The string representation of this timezone.\n   * @return {String}\n   */ toString() {\n        return this.tznames ? this.tznames : this.tzid;\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ let zones = null;\n/**\n * @classdesc\n * Singleton class to contain timezones.  Right now it is all manual registry in\n * the future we may use this class to download timezone information or handle\n * loading pre-expanded timezones.\n *\n * @exports module:ICAL.TimezoneService\n * @memberof ICAL\n */ const TimezoneService = {\n    get count () {\n        if (zones === null) {\n            return 0;\n        }\n        return Object.keys(zones).length;\n    },\n    reset: function() {\n        zones = Object.create(null);\n        let utc = Timezone.utcTimezone;\n        zones.Z = utc;\n        zones.UTC = utc;\n        zones.GMT = utc;\n    },\n    _hard_reset: function() {\n        zones = null;\n    },\n    /**\n   * Checks if timezone id has been registered.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Boolean}        False, when not present\n   */ has: function(tzid) {\n        if (zones === null) {\n            return false;\n        }\n        return !!zones[tzid];\n    },\n    /**\n   * Returns a timezone by its tzid if present.\n   *\n   * @param {String} tzid               Timezone identifier (e.g. America/Los_Angeles)\n   * @return {Timezone | undefined}     The timezone, or undefined if not found\n   */ get: function(tzid) {\n        if (zones === null) {\n            this.reset();\n        }\n        return zones[tzid];\n    },\n    /**\n   * Registers a timezone object or component.\n   *\n   * @param {Component|Timezone} timezone\n   *        The initialized zone or vtimezone.\n   *\n   * @param {String=} name\n   *        The name of the timezone. Defaults to the component's TZID if not\n   *        passed.\n   */ register: function(timezone, name) {\n        if (zones === null) {\n            this.reset();\n        }\n        // This avoids a breaking change by the change of argument order\n        // TODO remove in v3\n        if (typeof timezone === \"string\" && name instanceof Timezone) {\n            [timezone, name] = [\n                name,\n                timezone\n            ];\n        }\n        if (!name) {\n            if (timezone instanceof Timezone) {\n                name = timezone.tzid;\n            } else {\n                if (timezone.name === \"vtimezone\") {\n                    timezone = new Timezone(timezone);\n                    name = timezone.tzid;\n                }\n            }\n        }\n        if (!name) {\n            throw new TypeError(\"Neither a timezone nor a name was passed\");\n        }\n        if (timezone instanceof Timezone) {\n            zones[name] = timezone;\n        } else {\n            throw new TypeError(\"timezone must be ICAL.Timezone or ICAL.Component\");\n        }\n    },\n    /**\n   * Removes a timezone by its tzid from the list.\n   *\n   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)\n   * @return {?Timezone}      The removed timezone, or null if not registered\n   */ remove: function(tzid) {\n        if (zones === null) {\n            return null;\n        }\n        return delete zones[tzid];\n    }\n};\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * Helper functions used in various places within ical.js\n * @module ICAL.helpers\n */ /**\n * Compiles a list of all referenced TZIDs in all subcomponents and\n * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs\n * are referenced by a component, but a VTIMEZONE does not exist,\n * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.\n *\n * @param {Component} vcal     The top-level VCALENDAR component.\n * @return {Component}         The ICAL.Component that was passed in.\n */ function updateTimezones(vcal) {\n    let allsubs, properties, vtimezones, reqTzid, i;\n    if (!vcal || vcal.name !== \"vcalendar\") {\n        //not a top-level vcalendar component\n        return vcal;\n    }\n    //Store vtimezone subcomponents in an object reference by tzid.\n    //Store properties from everything else in another array\n    allsubs = vcal.getAllSubcomponents();\n    properties = [];\n    vtimezones = {};\n    for(i = 0; i < allsubs.length; i++){\n        if (allsubs[i].name === \"vtimezone\") {\n            let tzid = allsubs[i].getFirstProperty(\"tzid\").getFirstValue();\n            vtimezones[tzid] = allsubs[i];\n        } else {\n            properties = properties.concat(allsubs[i].getAllProperties());\n        }\n    }\n    //create an object with one entry for each required tz\n    reqTzid = {};\n    for(i = 0; i < properties.length; i++){\n        let tzid = properties[i].getParameter(\"tzid\");\n        if (tzid) {\n            reqTzid[tzid] = true;\n        }\n    }\n    //delete any vtimezones that are not on the reqTzid list.\n    for (let [tzid, comp] of Object.entries(vtimezones)){\n        if (!reqTzid[tzid]) {\n            vcal.removeSubcomponent(comp);\n        }\n    }\n    //create any missing, but registered timezones\n    for (let tzid of Object.keys(reqTzid)){\n        if (!vtimezones[tzid] && TimezoneService.has(tzid)) {\n            vcal.addSubcomponent(TimezoneService.get(tzid).component);\n        }\n    }\n    return vcal;\n}\n/**\n * Checks if the given type is of the number type and also NaN.\n *\n * @param {Number} number     The number to check\n * @return {Boolean}          True, if the number is strictly NaN\n */ function isStrictlyNaN(number) {\n    return typeof number === \"number\" && isNaN(number);\n}\n/**\n * Parses a string value that is expected to be an integer, when the valid is\n * not an integer throws a decoration error.\n *\n * @param {String} string     Raw string input\n * @return {Number}           Parsed integer\n */ function strictParseInt(string) {\n    let result = parseInt(string, 10);\n    if (isStrictlyNaN(result)) {\n        throw new Error('Could not extract integer from \"' + string + '\"');\n    }\n    return result;\n}\n/**\n * Creates or returns a class instance of a given type with the initialization\n * data if the data is not already an instance of the given type.\n *\n * @example\n * var time = new ICAL.Time(...);\n * var result = ICAL.helpers.formatClassType(time, ICAL.Time);\n *\n * (result instanceof ICAL.Time)\n * // => true\n *\n * result = ICAL.helpers.formatClassType({}, ICAL.Time);\n * (result isntanceof ICAL.Time)\n * // => true\n *\n *\n * @param {Object} data       object initialization data\n * @param {Object} type       object type (like ICAL.Time)\n * @return {?}                An instance of the found type.\n */ function formatClassType(data, type) {\n    if (typeof data === \"undefined\") {\n        return undefined;\n    }\n    if (data instanceof type) {\n        return data;\n    }\n    return new type(data);\n}\n/**\n * Identical to indexOf but will only match values when they are not preceded\n * by a backslash character.\n *\n * @param {String} buffer         String to search\n * @param {String} search         Value to look for\n * @param {Number} pos            Start position\n * @return {Number}               The position, or -1 if not found\n */ function unescapedIndexOf(buffer, search, pos) {\n    while((pos = buffer.indexOf(search, pos)) !== -1){\n        if (pos > 0 && buffer[pos - 1] === \"\\\\\") {\n            pos += 1;\n        } else {\n            return pos;\n        }\n    }\n    return -1;\n}\n/**\n * Find the index for insertion using binary search.\n *\n * @param {Array} list            The list to search\n * @param {?} seekVal             The value to insert\n * @param {function(?,?)} cmpfunc The comparison func, that can\n *                                  compare two seekVals\n * @return {Number}               The insert position\n */ function binsearchInsert(list, seekVal, cmpfunc) {\n    if (!list.length) return 0;\n    let low = 0, high = list.length - 1, mid, cmpval;\n    while(low <= high){\n        mid = low + Math.floor((high - low) / 2);\n        cmpval = cmpfunc(seekVal, list[mid]);\n        if (cmpval < 0) high = mid - 1;\n        else if (cmpval > 0) low = mid + 1;\n        else break;\n    }\n    if (cmpval < 0) return mid; // insertion is displacing, so use mid outright.\n    else if (cmpval > 0) return mid + 1;\n    else return mid;\n}\n/**\n * Clone the passed object or primitive. By default a shallow clone will be\n * executed.\n *\n * @param {*} aSrc            The thing to clone\n * @param {Boolean=} aDeep    If true, a deep clone will be performed\n * @return {*}                The copy of the thing\n */ function clone(aSrc, aDeep) {\n    if (!aSrc || typeof aSrc != \"object\") {\n        return aSrc;\n    } else if (aSrc instanceof Date) {\n        return new Date(aSrc.getTime());\n    } else if (\"clone\" in aSrc) {\n        return aSrc.clone();\n    } else if (Array.isArray(aSrc)) {\n        let arr = [];\n        for(let i = 0; i < aSrc.length; i++){\n            arr.push(aDeep ? clone(aSrc[i], true) : aSrc[i]);\n        }\n        return arr;\n    } else {\n        let obj = {};\n        for (let [name, value] of Object.entries(aSrc)){\n            if (aDeep) {\n                obj[name] = clone(value, true);\n            } else {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n}\n/**\n * Performs iCalendar line folding. A line ending character is inserted and\n * the next line begins with a whitespace.\n *\n * @example\n * SUMMARY:This line will be fold\n *  ed right in the middle of a word.\n *\n * @param {String} aLine      The line to fold\n * @return {String}           The folded line\n */ function foldline(aLine) {\n    let result = \"\";\n    let line = aLine || \"\", pos = 0, line_length = 0;\n    //pos counts position in line for the UTF-16 presentation\n    //line_length counts the bytes for the UTF-8 presentation\n    while(line.length){\n        let cp = line.codePointAt(pos);\n        if (cp < 128) ++line_length;\n        else if (cp < 2048) line_length += 2; //needs 2 UTF-8 bytes\n        else if (cp < 65536) line_length += 3;\n        else line_length += 4; //cp is less than 1114112\n        if (line_length < ICALmodule.foldLength + 1) pos += cp > 65535 ? 2 : 1;\n        else {\n            result += ICALmodule.newLineChar + \" \" + line.slice(0, Math.max(0, pos));\n            line = line.slice(Math.max(0, pos));\n            pos = line_length = 0;\n        }\n    }\n    return result.slice(ICALmodule.newLineChar.length + 1);\n}\n/**\n * Pads the given string or number with zeros so it will have at least two\n * characters.\n *\n * @param {String|Number} data    The string or number to pad\n * @return {String}               The number padded as a string\n */ function pad2(data) {\n    if (typeof data !== \"string\") {\n        // handle fractions.\n        if (typeof data === \"number\") {\n            data = parseInt(data);\n        }\n        data = String(data);\n    }\n    let len = data.length;\n    switch(len){\n        case 0:\n            return \"00\";\n        case 1:\n            return \"0\" + data;\n        default:\n            return data;\n    }\n}\n/**\n * Truncates the given number, correctly handling negative numbers.\n *\n * @param {Number} number     The number to truncate\n * @return {Number}           The truncated number\n */ function trunc(number) {\n    return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n/**\n * Poor-man's cross-browser object extension. Doesn't support all the\n * features, but enough for our usage. Note that the target's properties are\n * not overwritten with the source properties.\n *\n * @example\n * var child = ICAL.helpers.extend(parent, {\n *   \"bar\": 123\n * });\n *\n * @param {Object} source     The object to extend\n * @param {Object} target     The object to extend with\n * @return {Object}           Returns the target.\n */ function extend(source, target) {\n    for(let key in source){\n        let descr = Object.getOwnPropertyDescriptor(source, key);\n        if (descr && !Object.getOwnPropertyDescriptor(target, key)) {\n            Object.defineProperty(target, key, descr);\n        }\n    }\n    return target;\n}\nvar helpers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    updateTimezones: updateTimezones,\n    isStrictlyNaN: isStrictlyNaN,\n    strictParseInt: strictParseInt,\n    formatClassType: formatClassType,\n    unescapedIndexOf: unescapedIndexOf,\n    binsearchInsert: binsearchInsert,\n    clone: clone,\n    foldline: foldline,\n    pad2: pad2,\n    trunc: trunc,\n    extend: extend\n});\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This class represents the \"utc-offset\" value type, with various calculation and manipulation\n * methods.\n *\n * @memberof ICAL\n */ class UtcOffset {\n    /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.\n   *\n   * @param {String} aString    The string to parse\n   * @return {Duration}         The created utc-offset instance\n   */ static fromString(aString) {\n        // -05:00\n        let options = {};\n        //TODO: support seconds per rfc5545 ?\n        options.factor = aString[0] === \"+\" ? 1 : -1;\n        options.hours = strictParseInt(aString.slice(1, 3));\n        options.minutes = strictParseInt(aString.slice(4, 6));\n        return new UtcOffset(options);\n    }\n    /**\n   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds\n   * value.\n   *\n   * @param {Number} aSeconds       The number of seconds to convert\n   */ static fromSeconds(aSeconds) {\n        let instance = new UtcOffset();\n        instance.fromSeconds(aSeconds);\n        return instance;\n    }\n    /**\n   * Creates a new ICAL.UtcOffset instance.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */ constructor(aData){\n        /**\n   * The hours in the utc-offset\n   * @type {Number}\n   */ this.hours = 0;\n        /**\n   * The minutes in the utc-offset\n   * @type {Number}\n   */ this.minutes = 0;\n        /**\n   * The sign of the utc offset, 1 for positive offset, -1 for negative\n   * offsets.\n   * @type {Number}\n   */ this.factor = 1;\n        /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"utc-offset\"\n   */ this.icaltype = \"utc-offset\";\n        this.fromData(aData);\n    }\n    /**\n   * Returns a clone of the utc offset object.\n   *\n   * @return {UtcOffset}     The cloned object\n   */ clone() {\n        return UtcOffset.fromSeconds(this.toSeconds());\n    }\n    /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} aData          An object with members of the utc offset\n   * @param {Number=} aData.hours   The hours for the utc offset\n   * @param {Number=} aData.minutes The minutes in the utc offset\n   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1\n   */ fromData(aData) {\n        if (aData) {\n            for (let [key, value] of Object.entries(aData)){\n                this[key] = value;\n            }\n        }\n        this._normalize();\n    }\n    /**\n   * Sets up the current instance from the given seconds value. The seconds\n   * value is truncated to the minute. Offsets are wrapped when the world\n   * ends, the hour after UTC+14:00 is UTC-12:00.\n   *\n   * @param {Number} aSeconds         The seconds to convert into an offset\n   */ fromSeconds(aSeconds) {\n        let secs = Math.abs(aSeconds);\n        this.factor = aSeconds < 0 ? -1 : 1;\n        this.hours = trunc(secs / 3600);\n        secs -= this.hours * 3600;\n        this.minutes = trunc(secs / 60);\n        return this;\n    }\n    /**\n   * Convert the current offset to a value in seconds\n   *\n   * @return {Number}                 The offset in seconds\n   */ toSeconds() {\n        return this.factor * (60 * this.minutes + 3600 * this.hours);\n    }\n    /**\n   * Compare this utc offset with another one.\n   *\n   * @param {UtcOffset} other             The other offset to compare with\n   * @return {Number}                     -1, 0 or 1 for less/equal/greater\n   */ compare(other) {\n        let a = this.toSeconds();\n        let b = other.toSeconds();\n        return (a > b) - (b > a);\n    }\n    _normalize() {\n        // Range: 97200 seconds (with 1 hour inbetween)\n        let secs = this.toSeconds();\n        let factor = this.factor;\n        while(secs < -43200){\n            secs += 97200;\n        }\n        while(secs > 50400){\n            secs -= 97200;\n        }\n        this.fromSeconds(secs);\n        // Avoid changing the factor when on zero seconds\n        if (secs == 0) {\n            this.factor = factor;\n        }\n    }\n    /**\n   * The iCalendar string representation of this utc-offset.\n   * @return {String}\n   */ toICALString() {\n        return design$1.icalendar.value[\"utc-offset\"].toICAL(this.toString());\n    }\n    /**\n   * The string representation of this utc-offset.\n   * @return {String}\n   */ toString() {\n        return (this.factor == 1 ? \"+\" : \"-\") + pad2(this.hours) + \":\" + pad2(this.minutes);\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * Describes a vCard time, which has slight differences to the ICAL.Time.\n * Properties can be null if not specified, for example for dates with\n * reduced accuracy or truncation.\n *\n * Note that currently not all methods are correctly re-implemented for\n * VCardTime. For example, comparison will have undefined results when some\n * members are null.\n *\n * Also, normalization is not yet implemented for this class!\n *\n * @memberof ICAL\n * @extends {ICAL.Time}\n */ class VCardTime extends Time {\n    /**\n   * Returns a new ICAL.VCardTime instance from a date and/or time string.\n   *\n   * @param {String} aValue     The string to create from\n   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time\n   * @return {VCardTime}        The date/time instance\n   */ static fromDateAndOrTimeString(aValue, aIcalType) {\n        function part(v, s, e) {\n            return v ? strictParseInt(v.slice(s, s + e)) : null;\n        }\n        let parts = aValue.split(\"T\");\n        let dt = parts[0], tmz = parts[1];\n        let splitzone = tmz ? design$1.vcard.value.time._splitZone(tmz) : [];\n        let zone = splitzone[0], tm = splitzone[1];\n        let dtlen = dt ? dt.length : 0;\n        let tmlen = tm ? tm.length : 0;\n        let hasDashDate = dt && dt[0] == \"-\" && dt[1] == \"-\";\n        let hasDashTime = tm && tm[0] == \"-\";\n        let o = {\n            year: hasDashDate ? null : part(dt, 0, 4),\n            month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,\n            day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,\n            hour: hasDashTime ? null : part(tm, 0, 2),\n            minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,\n            second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null\n        };\n        if (zone == \"Z\") {\n            zone = Timezone.utcTimezone;\n        } else if (zone && zone[3] == \":\") {\n            zone = UtcOffset.fromString(zone);\n        } else {\n            zone = null;\n        }\n        return new VCardTime(o, zone, aIcalType);\n    }\n    /**\n   * Creates a new ICAL.VCardTime instance.\n   *\n   * @param {Object} data                           The data for the time instance\n   * @param {Number=} data.year                     The year for this date\n   * @param {Number=} data.month                    The month for this date\n   * @param {Number=} data.day                      The day for this date\n   * @param {Number=} data.hour                     The hour for this date\n   * @param {Number=} data.minute                   The minute for this date\n   * @param {Number=} data.second                   The second for this date\n   * @param {Timezone|UtcOffset} zone               The timezone to use\n   * @param {String} icaltype                       The type for this date/time object\n   */ constructor(data, zone, icaltype){\n        super(data, zone);\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"vcardtime\"\n   */ this.icalclass = \"vcardtime\";\n        /**\n   * The type name, to be used in the jCal object.\n   * @type {String}\n   * @default \"date-and-or-time\"\n   */ this.icaltype = \"date-and-or-time\";\n        this.icaltype = icaltype || \"date-and-or-time\";\n    }\n    /**\n   * Returns a clone of the vcard date/time object.\n   *\n   * @return {VCardTime}     The cloned object\n   */ clone() {\n        return new VCardTime(this._time, this.zone, this.icaltype);\n    }\n    _normalize() {\n        return this;\n    }\n    /**\n   * @inheritdoc\n   */ utcOffset() {\n        if (this.zone instanceof UtcOffset) {\n            return this.zone.toSeconds();\n        } else {\n            return Time.prototype.utcOffset.apply(this, arguments);\n        }\n    }\n    /**\n   * Returns an RFC 6350 compliant representation of this object.\n   *\n   * @return {String}         vcard date/time string\n   */ toICALString() {\n        return design$1.vcard.value[this.icaltype].toICAL(this.toString());\n    }\n    /**\n   * The string representation of this date/time, in jCard form\n   * (including : and - separators).\n   * @return {String}\n   */ toString() {\n        let y = this.year, m = this.month, d = this.day;\n        let h = this.hour, mm = this.minute, s = this.second;\n        let hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;\n        let hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;\n        let datepart = (hasYear ? pad2(y) + (hasMonth || hasDay ? \"-\" : \"\") : hasMonth || hasDay ? \"--\" : \"\") + (hasMonth ? pad2(m) : \"\") + (hasDay ? \"-\" + pad2(d) : \"\");\n        let timepart = (hasHour ? pad2(h) : \"-\") + (hasHour && hasMinute ? \":\" : \"\") + (hasMinute ? pad2(mm) : \"\") + (!hasHour && !hasMinute ? \"-\" : \"\") + (hasMinute && hasSecond ? \":\" : \"\") + (hasSecond ? pad2(s) : \"\");\n        let zone;\n        if (this.zone === Timezone.utcTimezone) {\n            zone = \"Z\";\n        } else if (this.zone instanceof UtcOffset) {\n            zone = this.zone.toString();\n        } else if (this.zone === Timezone.localTimezone) {\n            zone = \"\";\n        } else if (this.zone instanceof Timezone) {\n            let offset = UtcOffset.fromSeconds(this.zone.utcOffset(this));\n            zone = offset.toString();\n        } else {\n            zone = \"\";\n        }\n        switch(this.icaltype){\n            case \"time\":\n                return timepart + zone;\n            case \"date-and-or-time\":\n            case \"date-time\":\n                return datepart + (timepart == \"--\" ? \"\" : \"T\" + timepart + zone);\n            case \"date\":\n                return datepart;\n        }\n        return null;\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n */ /**\n * An iterator for a single recurrence rule. This class usually doesn't have to be instanciated\n * directly, the convenience method {@link ICAL.Recur#iterator} can be used.\n *\n * @memberof ICAL\n */ class RecurIterator {\n    static{\n        this._indexMap = {\n            \"BYSECOND\": 0,\n            \"BYMINUTE\": 1,\n            \"BYHOUR\": 2,\n            \"BYDAY\": 3,\n            \"BYMONTHDAY\": 4,\n            \"BYYEARDAY\": 5,\n            \"BYWEEKNO\": 6,\n            \"BYMONTH\": 7,\n            \"BYSETPOS\": 8\n        };\n    }\n    static{\n        this._expandMap = {\n            \"SECONDLY\": [\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1\n            ],\n            \"MINUTELY\": [\n                2,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1\n            ],\n            \"HOURLY\": [\n                2,\n                2,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1\n            ],\n            \"DAILY\": [\n                2,\n                2,\n                2,\n                1,\n                1,\n                1,\n                1,\n                1\n            ],\n            \"WEEKLY\": [\n                2,\n                2,\n                2,\n                2,\n                3,\n                3,\n                1,\n                1\n            ],\n            \"MONTHLY\": [\n                2,\n                2,\n                2,\n                2,\n                2,\n                3,\n                3,\n                1\n            ],\n            \"YEARLY\": [\n                2,\n                2,\n                2,\n                2,\n                2,\n                2,\n                2,\n                2\n            ]\n        };\n    }\n    static{\n        this.UNKNOWN = 0;\n    }\n    static{\n        this.CONTRACT = 1;\n    }\n    static{\n        this.EXPAND = 2;\n    }\n    static{\n        this.ILLEGAL = 3;\n    }\n    /**\n   * Creates a new ICAL.RecurIterator instance. The options object may contain additional members\n   * when resuming iteration from a previous run.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */ constructor(options){\n        /**\n   * True when iteration is finished.\n   * @type {Boolean}\n   */ this.completed = false;\n        /**\n   * The rule that is being iterated\n   * @type {Recur}\n   */ this.rule = null;\n        /**\n   * The start date of the event being iterated.\n   * @type {Time}\n   */ this.dtstart = null;\n        /**\n   * The last occurrence that was returned from the\n   * {@link RecurIterator#next} method.\n   * @type {Time}\n   */ this.last = null;\n        /**\n   * The sequence number from the occurrence\n   * @type {Number}\n   */ this.occurrence_number = 0;\n        /**\n   * The indices used for the {@link ICAL.RecurIterator#by_data} object.\n   * @type {Object}\n   * @private\n   */ this.by_indices = null;\n        /**\n   * If true, the iterator has already been initialized\n   * @type {Boolean}\n   * @private\n   */ this.initialized = false;\n        /**\n   * The initializd by-data.\n   * @type {Object}\n   * @private\n   */ this.by_data = null;\n        /**\n   * The expanded yeardays\n   * @type {Array}\n   * @private\n   */ this.days = null;\n        /**\n   * The index in the {@link ICAL.RecurIterator#days} array.\n   * @type {Number}\n   * @private\n   */ this.days_index = 0;\n        this.fromData(options);\n    }\n    /**\n   * Initialize the recurrence iterator from the passed data object. This\n   * method is usually not called directly, you can initialize the iterator\n   * through the constructor.\n   *\n   * @param {Object} options                The iterator options\n   * @param {Recur} options.rule            The rule to iterate.\n   * @param {Time} options.dtstart          The start date of the event.\n   * @param {Boolean=} options.initialized  When true, assume that options are\n   *        from a previously constructed iterator. Initialization will not be\n   *        repeated.\n   */ fromData(options) {\n        this.rule = formatClassType(options.rule, Recur);\n        if (!this.rule) {\n            throw new Error(\"iterator requires a (ICAL.Recur) rule\");\n        }\n        this.dtstart = formatClassType(options.dtstart, Time);\n        if (!this.dtstart) {\n            throw new Error(\"iterator requires a (ICAL.Time) dtstart\");\n        }\n        if (options.by_data) {\n            this.by_data = options.by_data;\n        } else {\n            this.by_data = clone(this.rule.parts, true);\n        }\n        if (options.occurrence_number) this.occurrence_number = options.occurrence_number;\n        this.days = options.days || [];\n        if (options.last) {\n            this.last = formatClassType(options.last, Time);\n        }\n        this.by_indices = options.by_indices;\n        if (!this.by_indices) {\n            this.by_indices = {\n                \"BYSECOND\": 0,\n                \"BYMINUTE\": 0,\n                \"BYHOUR\": 0,\n                \"BYDAY\": 0,\n                \"BYMONTH\": 0,\n                \"BYWEEKNO\": 0,\n                \"BYMONTHDAY\": 0\n            };\n        }\n        this.initialized = options.initialized || false;\n        if (!this.initialized) {\n            try {\n                this.init();\n            } catch (e) {\n                if (e instanceof InvalidRecurrenceRuleError) {\n                    // Init may error if there are no possible recurrence instances from\n                    // the rule, but we don't want to bubble this error up. Instead, we\n                    // create an empty iterator.\n                    this.completed = true;\n                } else {\n                    // Propagate other errors to consumers.\n                    throw e;\n                }\n            }\n        }\n    }\n    /**\n   * Initialize the iterator\n   * @private\n   */ init() {\n        this.initialized = true;\n        this.last = this.dtstart.clone();\n        let parts = this.by_data;\n        if (\"BYDAY\" in parts) {\n            // libical does this earlier when the rule is loaded, but we postpone to\n            // now so we can preserve the original order.\n            this.sort_byday_rules(parts.BYDAY);\n        }\n        // If the BYYEARDAY appares, no other date rule part may appear\n        if (\"BYYEARDAY\" in parts) {\n            if (\"BYMONTH\" in parts || \"BYWEEKNO\" in parts || \"BYMONTHDAY\" in parts || \"BYDAY\" in parts) {\n                throw new Error(\"Invalid BYYEARDAY rule\");\n            }\n        }\n        // BYWEEKNO and BYMONTHDAY rule parts may not both appear\n        if (\"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) {\n            throw new Error(\"BYWEEKNO does not fit to BYMONTHDAY\");\n        }\n        // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor\n        // BYWEEKNO may appear.\n        if (this.rule.freq == \"MONTHLY\" && (\"BYYEARDAY\" in parts || \"BYWEEKNO\" in parts)) {\n            throw new Error(\"For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear\");\n        }\n        // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor\n        // BYYEARDAY may appear.\n        if (this.rule.freq == \"WEEKLY\" && (\"BYYEARDAY\" in parts || \"BYMONTHDAY\" in parts)) {\n            throw new Error(\"For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear\");\n        }\n        // BYYEARDAY may only appear in YEARLY rules\n        if (this.rule.freq != \"YEARLY\" && \"BYYEARDAY\" in parts) {\n            throw new Error(\"BYYEARDAY may only appear in YEARLY rules\");\n        }\n        this.last.second = this.setup_defaults(\"BYSECOND\", \"SECONDLY\", this.dtstart.second);\n        this.last.minute = this.setup_defaults(\"BYMINUTE\", \"MINUTELY\", this.dtstart.minute);\n        this.last.hour = this.setup_defaults(\"BYHOUR\", \"HOURLY\", this.dtstart.hour);\n        this.last.day = this.setup_defaults(\"BYMONTHDAY\", \"DAILY\", this.dtstart.day);\n        this.last.month = this.setup_defaults(\"BYMONTH\", \"MONTHLY\", this.dtstart.month);\n        if (this.rule.freq == \"WEEKLY\") {\n            if (\"BYDAY\" in parts) {\n                let [, dow] = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);\n                let wkdy = dow - this.last.dayOfWeek(this.rule.wkst);\n                if (this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0 || wkdy < 0) {\n                    // Initial time is after first day of BYDAY data\n                    this.last.day += wkdy;\n                }\n            } else {\n                let dayName = Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());\n                parts.BYDAY = [\n                    dayName\n                ];\n            }\n        }\n        if (this.rule.freq == \"YEARLY\") {\n            // Some yearly recurrence rules may be specific enough to not actually\n            // occur on a yearly basis, e.g. the 29th day of February or the fifth\n            // Monday of a given month. The standard isn't clear on the intended\n            // behavior in these cases, but `libical` at least will iterate until it\n            // finds a matching year.\n            // CAREFUL: Some rules may specify an occurrence that can never happen,\n            // e.g. the first Monday of April so long as it falls on the 15th\n            // through the 21st. Detecting these is non-trivial, so ensure that we\n            // stop iterating at some point.\n            const untilYear = this.rule.until ? this.rule.until.year : 20000;\n            while(this.last.year <= untilYear){\n                this.expand_year_days(this.last.year);\n                if (this.days.length > 0) {\n                    break;\n                }\n                this.increment_year(this.rule.interval);\n            }\n            if (this.days.length == 0) {\n                throw new InvalidRecurrenceRuleError();\n            }\n            this._nextByYearDay();\n        }\n        if (this.rule.freq == \"MONTHLY\") {\n            if (this.has_by_data(\"BYDAY\")) {\n                let tempLast = null;\n                let initLast = this.last.clone();\n                let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n                // Check every weekday in BYDAY with relative dow and pos.\n                for (let bydow of this.by_data.BYDAY){\n                    this.last = initLast.clone();\n                    let [pos, dow] = this.ruleDayOfWeek(bydow);\n                    let dayOfMonth = this.last.nthWeekDay(dow, pos);\n                    // If |pos| >= 6, the byday is invalid for a monthly rule.\n                    if (pos >= 6 || pos <= -6) {\n                        throw new Error(\"Malformed values in BYDAY part\");\n                    }\n                    // If a Byday with pos=+/-5 is not in the current month it\n                    // must be searched in the next months.\n                    if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {\n                        // Skip if we have already found a \"last\" in this month.\n                        if (tempLast && tempLast.month == initLast.month) {\n                            continue;\n                        }\n                        while(dayOfMonth > daysInMonth || dayOfMonth <= 0){\n                            this.increment_month();\n                            daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n                            dayOfMonth = this.last.nthWeekDay(dow, pos);\n                        }\n                    }\n                    this.last.day = dayOfMonth;\n                    if (!tempLast || this.last.compare(tempLast) < 0) {\n                        tempLast = this.last.clone();\n                    }\n                }\n                this.last = tempLast.clone();\n                //XXX: This feels like a hack, but we need to initialize\n                //     the BYMONTHDAY case correctly and byDayAndMonthDay handles\n                //     this case. It accepts a special flag which will avoid incrementing\n                //     the initial value without the flag days that match the start time\n                //     would be missed.\n                if (this.has_by_data(\"BYMONTHDAY\")) {\n                    this._byDayAndMonthDay(true);\n                }\n                if (this.last.day > daysInMonth || this.last.day == 0) {\n                    throw new Error(\"Malformed values in BYDAY part\");\n                }\n            } else if (this.has_by_data(\"BYMONTHDAY\")) {\n                // Change the day value so that normalisation won't change the month.\n                this.last.day = 1;\n                // Get a sorted list of days in the starting month that match the rule.\n                let normalized = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY).filter((d)=>d >= this.last.day);\n                if (normalized.length) {\n                    // There's at least one valid day, use it.\n                    this.last.day = normalized[0];\n                    this.by_data.BYMONTHDAY = normalized;\n                } else {\n                    // There's no occurrence in this month, find the next valid month.\n                    // The longest possible sequence of skipped months is February-April-June,\n                    // so we might need to call next_month up to three times.\n                    if (!this.next_month() && !this.next_month() && !this.next_month()) {\n                        throw new Error(\"No possible occurrences\");\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * Retrieve the next occurrence from the iterator.\n   * @return {Time}\n   */ next(again = false) {\n        let before = this.last ? this.last.clone() : null;\n        if (this.rule.count && this.occurrence_number >= this.rule.count || this.rule.until && this.last.compare(this.rule.until) > 0) {\n            this.completed = true;\n        }\n        if (this.completed) {\n            return null;\n        }\n        if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {\n            // First of all, give the instance that was initialized\n            this.occurrence_number++;\n            return this.last;\n        }\n        let valid;\n        do {\n            valid = 1;\n            switch(this.rule.freq){\n                case \"SECONDLY\":\n                    this.next_second();\n                    break;\n                case \"MINUTELY\":\n                    this.next_minute();\n                    break;\n                case \"HOURLY\":\n                    this.next_hour();\n                    break;\n                case \"DAILY\":\n                    this.next_day();\n                    break;\n                case \"WEEKLY\":\n                    this.next_week();\n                    break;\n                case \"MONTHLY\":\n                    valid = this.next_month();\n                    break;\n                case \"YEARLY\":\n                    this.next_year();\n                    break;\n                default:\n                    return null;\n            }\n        }while (!this.check_contracting_rules() || this.last.compare(this.dtstart) < 0 || !valid);\n        if (this.last.compare(before) == 0) {\n            if (again) {\n                throw new Error(\"Same occurrence found twice, protecting you from death by recursion\");\n            }\n            this.next(true);\n        }\n        if (this.rule.until && this.last.compare(this.rule.until) > 0) {\n            this.completed = true;\n            return null;\n        } else {\n            this.occurrence_number++;\n            return this.last;\n        }\n    }\n    next_second() {\n        return this.next_generic(\"BYSECOND\", \"SECONDLY\", \"second\", \"minute\");\n    }\n    increment_second(inc) {\n        return this.increment_generic(inc, \"second\", 60, \"minute\");\n    }\n    next_minute() {\n        return this.next_generic(\"BYMINUTE\", \"MINUTELY\", \"minute\", \"hour\", \"next_second\");\n    }\n    increment_minute(inc) {\n        return this.increment_generic(inc, \"minute\", 60, \"hour\");\n    }\n    next_hour() {\n        return this.next_generic(\"BYHOUR\", \"HOURLY\", \"hour\", \"monthday\", \"next_minute\");\n    }\n    increment_hour(inc) {\n        this.increment_generic(inc, \"hour\", 24, \"monthday\");\n    }\n    next_day() {\n        let this_freq = this.rule.freq == \"DAILY\";\n        if (this.next_hour() == 0) {\n            return 0;\n        }\n        if (this_freq) {\n            this.increment_monthday(this.rule.interval);\n        } else {\n            this.increment_monthday(1);\n        }\n        return 0;\n    }\n    next_week() {\n        let end_of_data = 0;\n        if (this.next_weekday_by_week() == 0) {\n            return end_of_data;\n        }\n        if (this.has_by_data(\"BYWEEKNO\")) {\n            this.by_indices.BYWEEKNO++;\n            if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {\n                this.by_indices.BYWEEKNO = 0;\n                end_of_data = 1;\n            }\n            // HACK should be first month of the year\n            this.last.month = 1;\n            this.last.day = 1;\n            let week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];\n            this.last.day += 7 * week_no;\n            if (end_of_data) {\n                this.increment_year(1);\n            }\n        } else {\n            // Jump to the next week\n            this.increment_monthday(7 * this.rule.interval);\n        }\n        return end_of_data;\n    }\n    /**\n   * Normalize each by day rule for a given year/month.\n   * Takes into account ordering and negative rules\n   *\n   * @private\n   * @param {Number} year         Current year.\n   * @param {Number} month        Current month.\n   * @param {Array}  rules        Array of rules.\n   *\n   * @return {Array} sorted and normalized rules.\n   *                 Negative rules will be expanded to their\n   *                 correct positive values for easier processing.\n   */ normalizeByMonthDayRules(year, month, rules) {\n        let daysInMonth = Time.daysInMonth(month, year);\n        // XXX: This is probably bad for performance to allocate\n        //      a new array for each month we scan, if possible\n        //      we should try to optimize this...\n        let newRules = [];\n        let ruleIdx = 0;\n        let len = rules.length;\n        let rule;\n        for(; ruleIdx < len; ruleIdx++){\n            rule = parseInt(rules[ruleIdx], 10);\n            if (isNaN(rule)) {\n                throw new Error(\"Invalid BYMONTHDAY value\");\n            }\n            // if this rule falls outside of given\n            // month discard it.\n            if (Math.abs(rule) > daysInMonth) {\n                continue;\n            }\n            // negative case\n            if (rule < 0) {\n                // we add (not subtract it is a negative number)\n                // one from the rule because 1 === last day of month\n                rule = daysInMonth + (rule + 1);\n            } else if (rule === 0) {\n                continue;\n            }\n            // only add unique items...\n            if (newRules.indexOf(rule) === -1) {\n                newRules.push(rule);\n            }\n        }\n        // unique and sort\n        return newRules.sort(function(a, b) {\n            return a - b;\n        });\n    }\n    /**\n   * NOTES:\n   * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)\n   * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when\n   * both conditions match a given date (this.last.day) iteration stops.\n   *\n   * @private\n   * @param {Boolean=} isInit     When given true will not increment the\n   *                                current day (this.last).\n   */ _byDayAndMonthDay(isInit) {\n        let byMonthDay; // setup in initMonth\n        let byDay = this.by_data.BYDAY;\n        let date;\n        let dateIdx = 0;\n        let dateLen; // setup in initMonth\n        let dayLen = byDay.length;\n        // we are not valid by default\n        let dataIsValid = 0;\n        let daysInMonth;\n        let self = this;\n        // we need a copy of this, because a DateTime gets normalized\n        // automatically if the day is out of range. At some points we\n        // set the last day to 0 to start counting.\n        let lastDay = this.last.day;\n        function initMonth() {\n            daysInMonth = Time.daysInMonth(self.last.month, self.last.year);\n            byMonthDay = self.normalizeByMonthDayRules(self.last.year, self.last.month, self.by_data.BYMONTHDAY);\n            dateLen = byMonthDay.length;\n            // For the case of more than one occurrence in one month\n            // we have to be sure to start searching after the last\n            // found date or at the last BYMONTHDAY, unless we are\n            // initializing the iterator because in this case we have\n            // to consider the last found date too.\n            while(byMonthDay[dateIdx] <= lastDay && !(isInit && byMonthDay[dateIdx] == lastDay) && dateIdx < dateLen - 1){\n                dateIdx++;\n            }\n        }\n        function nextMonth() {\n            // since the day is incremented at the start\n            // of the loop below, we need to start at 0\n            lastDay = 0;\n            self.increment_month();\n            dateIdx = 0;\n            initMonth();\n        }\n        initMonth();\n        // should come after initMonth\n        if (isInit) {\n            lastDay -= 1;\n        }\n        // Use a counter to avoid an infinite loop with malformed rules.\n        // Stop checking after 4 years so we consider also a leap year.\n        let monthsCounter = 48;\n        while(!dataIsValid && monthsCounter){\n            monthsCounter--;\n            // increment the current date. This is really\n            // important otherwise we may fall into the infinite\n            // loop trap. The initial date takes care of the case\n            // where the current date is the date we are looking\n            // for.\n            date = lastDay + 1;\n            if (date > daysInMonth) {\n                nextMonth();\n                continue;\n            }\n            // find next date\n            let next = byMonthDay[dateIdx++];\n            // this logic is dependent on the BYMONTHDAYS\n            // being in order (which is done by #normalizeByMonthDayRules)\n            if (next >= date) {\n                // if the next month day is in the future jump to it.\n                lastDay = next;\n            } else {\n                // in this case the 'next' monthday has past\n                // we must move to the month.\n                nextMonth();\n                continue;\n            }\n            // Now we can loop through the day rules to see\n            // if one matches the current month date.\n            for(let dayIdx = 0; dayIdx < dayLen; dayIdx++){\n                let parts = this.ruleDayOfWeek(byDay[dayIdx]);\n                let pos = parts[0];\n                let dow = parts[1];\n                this.last.day = lastDay;\n                if (this.last.isNthWeekDay(dow, pos)) {\n                    // when we find the valid one we can mark\n                    // the conditions as met and break the loop.\n                    // (Because we have this condition above\n                    //  it will also break the parent loop).\n                    dataIsValid = 1;\n                    break;\n                }\n            }\n            // It is completely possible that the combination\n            // cannot be matched in the current month.\n            // When we reach the end of possible combinations\n            // in the current month we iterate to the next one.\n            // since dateIdx is incremented right after getting\n            // \"next\", we don't need dateLen -1 here.\n            if (!dataIsValid && dateIdx === dateLen) {\n                nextMonth();\n                continue;\n            }\n        }\n        if (monthsCounter <= 0) {\n            // Checked 4 years without finding a Byday that matches\n            // a Bymonthday. Maybe the rule is not correct.\n            throw new Error(\"Malformed values in BYDAY combined with BYMONTHDAY parts\");\n        }\n        return dataIsValid;\n    }\n    next_month() {\n        let data_valid = 1;\n        if (this.next_hour() == 0) {\n            return data_valid;\n        }\n        if (this.has_by_data(\"BYDAY\") && this.has_by_data(\"BYMONTHDAY\")) {\n            data_valid = this._byDayAndMonthDay();\n        } else if (this.has_by_data(\"BYDAY\")) {\n            let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n            let setpos = 0;\n            let setpos_total = 0;\n            if (this.has_by_data(\"BYSETPOS\")) {\n                let last_day = this.last.day;\n                for(let day = 1; day <= daysInMonth; day++){\n                    this.last.day = day;\n                    if (this.is_day_in_byday(this.last)) {\n                        setpos_total++;\n                        if (day <= last_day) {\n                            setpos++;\n                        }\n                    }\n                }\n                this.last.day = last_day;\n            }\n            data_valid = 0;\n            let day;\n            for(day = this.last.day + 1; day <= daysInMonth; day++){\n                this.last.day = day;\n                if (this.is_day_in_byday(this.last)) {\n                    if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(++setpos) || this.check_set_position(setpos - setpos_total - 1)) {\n                        data_valid = 1;\n                        break;\n                    }\n                }\n            }\n            if (day > daysInMonth) {\n                this.last.day = 1;\n                this.increment_month();\n                if (this.is_day_in_byday(this.last)) {\n                    if (!this.has_by_data(\"BYSETPOS\") || this.check_set_position(1)) {\n                        data_valid = 1;\n                    }\n                } else {\n                    data_valid = 0;\n                }\n            }\n        } else if (this.has_by_data(\"BYMONTHDAY\")) {\n            this.by_indices.BYMONTHDAY++;\n            if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n                this.by_indices.BYMONTHDAY = 0;\n                this.increment_month();\n                if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {\n                    return 0;\n                }\n            }\n            let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n            let day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];\n            if (day < 0) {\n                day = daysInMonth + day + 1;\n            }\n            if (day > daysInMonth) {\n                this.last.day = 1;\n                data_valid = this.is_day_in_byday(this.last);\n            } else {\n                this.last.day = day;\n            }\n        } else {\n            this.increment_month();\n            let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n            if (this.by_data.BYMONTHDAY[0] > daysInMonth) {\n                data_valid = 0;\n            } else {\n                this.last.day = this.by_data.BYMONTHDAY[0];\n            }\n        }\n        return data_valid;\n    }\n    next_weekday_by_week() {\n        let end_of_data = 0;\n        if (this.next_hour() == 0) {\n            return end_of_data;\n        }\n        if (!this.has_by_data(\"BYDAY\")) {\n            return 1;\n        }\n        for(;;){\n            let tt = new Time();\n            this.by_indices.BYDAY++;\n            if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {\n                this.by_indices.BYDAY = 0;\n                end_of_data = 1;\n            }\n            let coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];\n            let parts = this.ruleDayOfWeek(coded_day);\n            let dow = parts[1];\n            dow -= this.rule.wkst;\n            if (dow < 0) {\n                dow += 7;\n            }\n            tt.year = this.last.year;\n            tt.month = this.last.month;\n            tt.day = this.last.day;\n            let startOfWeek = tt.startDoyWeek(this.rule.wkst);\n            if (dow + startOfWeek < 1) {\n                // The selected date is in the previous year\n                if (!end_of_data) {\n                    continue;\n                }\n            }\n            let next = Time.fromDayOfYear(startOfWeek + dow, this.last.year);\n            /**\n       * The normalization horrors below are due to\n       * the fact that when the year/month/day changes\n       * it can effect the other operations that come after.\n       */ this.last.year = next.year;\n            this.last.month = next.month;\n            this.last.day = next.day;\n            return end_of_data;\n        }\n    }\n    next_year() {\n        if (this.next_hour() == 0) {\n            return 0;\n        }\n        if (++this.days_index == this.days.length) {\n            this.days_index = 0;\n            do {\n                this.increment_year(this.rule.interval);\n                if (this.has_by_data(\"BYMONTHDAY\")) {\n                    this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY);\n                }\n                this.expand_year_days(this.last.year);\n            }while (this.days.length == 0);\n        }\n        this._nextByYearDay();\n        return 1;\n    }\n    _nextByYearDay() {\n        let doy = this.days[this.days_index];\n        let year = this.last.year;\n        if (doy < 1) {\n            // Time.fromDayOfYear(doy, year) indexes relative to the\n            // start of the given year. That is different from the\n            // semantics of BYYEARDAY where negative indexes are an\n            // offset from the end of the given year.\n            doy += 1;\n            year += 1;\n        }\n        let next = Time.fromDayOfYear(doy, year);\n        this.last.day = next.day;\n        this.last.month = next.month;\n    }\n    /**\n   * @param dow (eg: '1TU', '-1MO')\n   * @param {weekDay=} aWeekStart The week start weekday\n   * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart\n   */ ruleDayOfWeek(dow, aWeekStart) {\n        let matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);\n        if (matches) {\n            let pos = parseInt(matches[1] || 0, 10);\n            dow = Recur.icalDayToNumericDay(matches[2], aWeekStart);\n            return [\n                pos,\n                dow\n            ];\n        } else {\n            return [\n                0,\n                0\n            ];\n        }\n    }\n    next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {\n        let has_by_rule = aRuleType in this.by_data;\n        let this_freq = this.rule.freq == aInterval;\n        let end_of_data = 0;\n        if (aPreviousIncr && this[aPreviousIncr]() == 0) {\n            return end_of_data;\n        }\n        if (has_by_rule) {\n            this.by_indices[aRuleType]++;\n            let dta = this.by_data[aRuleType];\n            if (this.by_indices[aRuleType] == dta.length) {\n                this.by_indices[aRuleType] = 0;\n                end_of_data = 1;\n            }\n            this.last[aDateAttr] = dta[this.by_indices[aRuleType]];\n        } else if (this_freq) {\n            this[\"increment_\" + aDateAttr](this.rule.interval);\n        }\n        if (has_by_rule && end_of_data && this_freq) {\n            this[\"increment_\" + aFollowingAttr](1);\n        }\n        return end_of_data;\n    }\n    increment_monthday(inc) {\n        for(let i = 0; i < inc; i++){\n            let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);\n            this.last.day++;\n            if (this.last.day > daysInMonth) {\n                this.last.day -= daysInMonth;\n                this.increment_month();\n            }\n        }\n    }\n    increment_month() {\n        this.last.day = 1;\n        if (this.has_by_data(\"BYMONTH\")) {\n            this.by_indices.BYMONTH++;\n            if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {\n                this.by_indices.BYMONTH = 0;\n                this.increment_year(1);\n            }\n            this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];\n        } else {\n            if (this.rule.freq == \"MONTHLY\") {\n                this.last.month += this.rule.interval;\n            } else {\n                this.last.month++;\n            }\n            this.last.month--;\n            let years = trunc(this.last.month / 12);\n            this.last.month %= 12;\n            this.last.month++;\n            if (years != 0) {\n                this.increment_year(years);\n            }\n        }\n        if (this.has_by_data(\"BYMONTHDAY\")) {\n            this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(this.last.year, this.last.month, this.rule.parts.BYMONTHDAY);\n        }\n    }\n    increment_year(inc) {\n        // Don't jump into the next month if this.last is Feb 29.\n        this.last.day = 1;\n        this.last.year += inc;\n    }\n    increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {\n        this.last[aDateAttr] += inc;\n        let nextunit = trunc(this.last[aDateAttr] / aFactor);\n        this.last[aDateAttr] %= aFactor;\n        if (nextunit != 0) {\n            this[\"increment_\" + aNextIncrement](nextunit);\n        }\n    }\n    has_by_data(aRuleType) {\n        return aRuleType in this.rule.parts;\n    }\n    expand_year_days(aYear) {\n        let t = new Time();\n        this.days = [];\n        // We need our own copy with a few keys set\n        let parts = {};\n        let rules = [\n            \"BYDAY\",\n            \"BYWEEKNO\",\n            \"BYMONTHDAY\",\n            \"BYMONTH\",\n            \"BYYEARDAY\"\n        ];\n        for (let part of rules){\n            if (part in this.rule.parts) {\n                parts[part] = this.rule.parts[part];\n            }\n        }\n        if (\"BYMONTH\" in parts && \"BYWEEKNO\" in parts) {\n            let valid = 1;\n            let validWeeks = {};\n            t.year = aYear;\n            t.isDate = true;\n            for(let monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++){\n                let month = this.by_data.BYMONTH[monthIdx];\n                t.month = month;\n                t.day = 1;\n                let first_week = t.weekNumber(this.rule.wkst);\n                t.day = Time.daysInMonth(month, aYear);\n                let last_week = t.weekNumber(this.rule.wkst);\n                for(monthIdx = first_week; monthIdx < last_week; monthIdx++){\n                    validWeeks[monthIdx] = 1;\n                }\n            }\n            for(let weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++){\n                let weekno = this.by_data.BYWEEKNO[weekIdx];\n                if (weekno < 52) {\n                    valid &= validWeeks[weekIdx];\n                } else {\n                    valid = 0;\n                }\n            }\n            if (valid) {\n                delete parts.BYMONTH;\n            } else {\n                delete parts.BYWEEKNO;\n            }\n        }\n        let partCount = Object.keys(parts).length;\n        if (partCount == 0) {\n            let t1 = this.dtstart.clone();\n            t1.year = this.last.year;\n            this.days.push(t1.dayOfYear());\n        } else if (partCount == 1 && \"BYMONTH\" in parts) {\n            for (let month of this.by_data.BYMONTH){\n                let t2 = this.dtstart.clone();\n                t2.year = aYear;\n                t2.month = month;\n                t2.isDate = true;\n                this.days.push(t2.dayOfYear());\n            }\n        } else if (partCount == 1 && \"BYMONTHDAY\" in parts) {\n            for (let monthday of this.by_data.BYMONTHDAY){\n                let t3 = this.dtstart.clone();\n                if (monthday < 0) {\n                    let daysInMonth = Time.daysInMonth(t3.month, aYear);\n                    monthday = monthday + daysInMonth + 1;\n                }\n                t3.day = monthday;\n                t3.year = aYear;\n                t3.isDate = true;\n                this.days.push(t3.dayOfYear());\n            }\n        } else if (partCount == 2 && \"BYMONTHDAY\" in parts && \"BYMONTH\" in parts) {\n            for (let month of this.by_data.BYMONTH){\n                let daysInMonth = Time.daysInMonth(month, aYear);\n                for (let monthday of this.by_data.BYMONTHDAY){\n                    if (monthday < 0) {\n                        monthday = monthday + daysInMonth + 1;\n                    }\n                    t.day = monthday;\n                    t.month = month;\n                    t.year = aYear;\n                    t.isDate = true;\n                    this.days.push(t.dayOfYear());\n                }\n            }\n        } else if (partCount == 1 && \"BYWEEKNO\" in parts) ;\n        else if (partCount == 2 && \"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) ;\n        else if (partCount == 1 && \"BYDAY\" in parts) {\n            this.days = this.days.concat(this.expand_by_day(aYear));\n        } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTH\" in parts) {\n            for (let month of this.by_data.BYMONTH){\n                let daysInMonth = Time.daysInMonth(month, aYear);\n                t.year = aYear;\n                t.month = month;\n                t.day = 1;\n                t.isDate = true;\n                let first_dow = t.dayOfWeek();\n                let doy_offset = t.dayOfYear() - 1;\n                t.day = daysInMonth;\n                let last_dow = t.dayOfWeek();\n                if (this.has_by_data(\"BYSETPOS\")) {\n                    let by_month_day = [];\n                    for(let day = 1; day <= daysInMonth; day++){\n                        t.day = day;\n                        if (this.is_day_in_byday(t)) {\n                            by_month_day.push(day);\n                        }\n                    }\n                    for(let spIndex = 0; spIndex < by_month_day.length; spIndex++){\n                        if (this.check_set_position(spIndex + 1) || this.check_set_position(spIndex - by_month_day.length)) {\n                            this.days.push(doy_offset + by_month_day[spIndex]);\n                        }\n                    }\n                } else {\n                    for (let coded_day of this.by_data.BYDAY){\n                        let bydayParts = this.ruleDayOfWeek(coded_day);\n                        let pos = bydayParts[0];\n                        let dow = bydayParts[1];\n                        let month_day;\n                        let first_matching_day = (dow + 7 - first_dow) % 7 + 1;\n                        let last_matching_day = daysInMonth - (last_dow + 7 - dow) % 7;\n                        if (pos == 0) {\n                            for(let day = first_matching_day; day <= daysInMonth; day += 7){\n                                this.days.push(doy_offset + day);\n                            }\n                        } else if (pos > 0) {\n                            month_day = first_matching_day + (pos - 1) * 7;\n                            if (month_day <= daysInMonth) {\n                                this.days.push(doy_offset + month_day);\n                            }\n                        } else {\n                            month_day = last_matching_day + (pos + 1) * 7;\n                            if (month_day > 0) {\n                                this.days.push(doy_offset + month_day);\n                            }\n                        }\n                    }\n                }\n            }\n            // Return dates in order of occurrence (1,2,3,...) instead\n            // of by groups of weekdays (1,8,15,...,2,9,16,...).\n            this.days.sort(function(a, b) {\n                return a - b;\n            }); // Comparator function allows to sort numbers.\n        } else if (partCount == 2 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts) {\n            let expandedDays = this.expand_by_day(aYear);\n            for (let day of expandedDays){\n                let tt = Time.fromDayOfYear(day, aYear);\n                if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n                    this.days.push(day);\n                }\n            }\n        } else if (partCount == 3 && \"BYDAY\" in parts && \"BYMONTHDAY\" in parts && \"BYMONTH\" in parts) {\n            let expandedDays = this.expand_by_day(aYear);\n            for (let day of expandedDays){\n                let tt = Time.fromDayOfYear(day, aYear);\n                if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 && this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {\n                    this.days.push(day);\n                }\n            }\n        } else if (partCount == 2 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts) {\n            let expandedDays = this.expand_by_day(aYear);\n            for (let day of expandedDays){\n                let tt = Time.fromDayOfYear(day, aYear);\n                let weekno = tt.weekNumber(this.rule.wkst);\n                if (this.by_data.BYWEEKNO.indexOf(weekno)) {\n                    this.days.push(day);\n                }\n            }\n        } else if (partCount == 3 && \"BYDAY\" in parts && \"BYWEEKNO\" in parts && \"BYMONTHDAY\" in parts) ;\n        else if (partCount == 1 && \"BYYEARDAY\" in parts) {\n            this.days = this.days.concat(this.by_data.BYYEARDAY);\n        } else {\n            this.days = [];\n        }\n        let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;\n        this.days.sort((a, b)=>{\n            if (a < 0) a += daysInYear + 1;\n            if (b < 0) b += daysInYear + 1;\n            return a - b;\n        });\n        return 0;\n    }\n    expand_by_day(aYear) {\n        let days_list = [];\n        let tmp = this.last.clone();\n        tmp.year = aYear;\n        tmp.month = 1;\n        tmp.day = 1;\n        tmp.isDate = true;\n        let start_dow = tmp.dayOfWeek();\n        tmp.month = 12;\n        tmp.day = 31;\n        tmp.isDate = true;\n        let end_dow = tmp.dayOfWeek();\n        let end_year_day = tmp.dayOfYear();\n        for (let day of this.by_data.BYDAY){\n            let parts = this.ruleDayOfWeek(day);\n            let pos = parts[0];\n            let dow = parts[1];\n            if (pos == 0) {\n                let tmp_start_doy = (dow + 7 - start_dow) % 7 + 1;\n                for(let doy = tmp_start_doy; doy <= end_year_day; doy += 7){\n                    days_list.push(doy);\n                }\n            } else if (pos > 0) {\n                let first;\n                if (dow >= start_dow) {\n                    first = dow - start_dow + 1;\n                } else {\n                    first = dow - start_dow + 8;\n                }\n                days_list.push(first + (pos - 1) * 7);\n            } else {\n                let last;\n                pos = -pos;\n                if (dow <= end_dow) {\n                    last = end_year_day - end_dow + dow;\n                } else {\n                    last = end_year_day - end_dow + dow - 7;\n                }\n                days_list.push(last - (pos - 1) * 7);\n            }\n        }\n        return days_list;\n    }\n    is_day_in_byday(tt) {\n        if (this.by_data.BYDAY) {\n            for (let day of this.by_data.BYDAY){\n                let parts = this.ruleDayOfWeek(day);\n                let pos = parts[0];\n                let dow = parts[1];\n                let this_dow = tt.dayOfWeek();\n                if (pos == 0 && dow == this_dow || tt.nthWeekDay(dow, pos) == tt.day) {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n    /**\n   * Checks if given value is in BYSETPOS.\n   *\n   * @private\n   * @param {Numeric} aPos position to check for.\n   * @return {Boolean} false unless BYSETPOS rules exist\n   *                   and the given value is present in rules.\n   */ check_set_position(aPos) {\n        if (this.has_by_data(\"BYSETPOS\")) {\n            let idx = this.by_data.BYSETPOS.indexOf(aPos);\n            // negative numbers are not false-y\n            return idx !== -1;\n        }\n        return false;\n    }\n    sort_byday_rules(aRules) {\n        for(let i = 0; i < aRules.length; i++){\n            for(let j = 0; j < i; j++){\n                let one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];\n                let two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];\n                if (one > two) {\n                    let tmp = aRules[i];\n                    aRules[i] = aRules[j];\n                    aRules[j] = tmp;\n                }\n            }\n        }\n    }\n    check_contract_restriction(aRuleType, v) {\n        let indexMapValue = RecurIterator._indexMap[aRuleType];\n        let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n        let pass = false;\n        if (aRuleType in this.by_data && ruleMapValue == RecurIterator.CONTRACT) {\n            let ruleType = this.by_data[aRuleType];\n            for (let bydata of ruleType){\n                if (bydata == v) {\n                    pass = true;\n                    break;\n                }\n            }\n        } else {\n            // Not a contracting byrule or has no data, test passes\n            pass = true;\n        }\n        return pass;\n    }\n    check_contracting_rules() {\n        let dow = this.last.dayOfWeek();\n        let weekNo = this.last.weekNumber(this.rule.wkst);\n        let doy = this.last.dayOfYear();\n        return this.check_contract_restriction(\"BYSECOND\", this.last.second) && this.check_contract_restriction(\"BYMINUTE\", this.last.minute) && this.check_contract_restriction(\"BYHOUR\", this.last.hour) && this.check_contract_restriction(\"BYDAY\", Recur.numericDayToIcalDay(dow)) && this.check_contract_restriction(\"BYWEEKNO\", weekNo) && this.check_contract_restriction(\"BYMONTHDAY\", this.last.day) && this.check_contract_restriction(\"BYMONTH\", this.last.month) && this.check_contract_restriction(\"BYYEARDAY\", doy);\n    }\n    setup_defaults(aRuleType, req, deftime) {\n        let indexMapValue = RecurIterator._indexMap[aRuleType];\n        let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];\n        if (ruleMapValue != RecurIterator.CONTRACT) {\n            if (!(aRuleType in this.by_data)) {\n                this.by_data[aRuleType] = [\n                    deftime\n                ];\n            }\n            if (this.rule.freq != req) {\n                return this.by_data[aRuleType][0];\n            }\n        }\n        return deftime;\n    }\n    /**\n   * Convert iterator into a serialize-able object.  Will preserve current\n   * iteration sequence to ensure the seamless continuation of the recurrence\n   * rule.\n   * @return {Object}\n   */ toJSON() {\n        let result = Object.create(null);\n        result.initialized = this.initialized;\n        result.rule = this.rule.toJSON();\n        result.dtstart = this.dtstart.toJSON();\n        result.by_data = this.by_data;\n        result.days = this.days;\n        result.last = this.last.toJSON();\n        result.by_indices = this.by_indices;\n        result.occurrence_number = this.occurrence_number;\n        return result;\n    }\n}\n/**\n * An error indicating that a recurrence rule is invalid and produces no\n * occurrences.\n *\n * @extends {Error}\n * @class\n */ class InvalidRecurrenceRuleError extends Error {\n    constructor(){\n        super(\"Recurrence rule has no valid occurrences\");\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").weekDay} weekDay\n * Imports the 'weekDay' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n */ const VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;\nconst VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst DOW_MAP = {\n    SU: Time.SUNDAY,\n    MO: Time.MONDAY,\n    TU: Time.TUESDAY,\n    WE: Time.WEDNESDAY,\n    TH: Time.THURSDAY,\n    FR: Time.FRIDAY,\n    SA: Time.SATURDAY\n};\nconst REVERSE_DOW_MAP = Object.fromEntries(Object.entries(DOW_MAP).map((entry)=>entry.reverse()));\nconst ALLOWED_FREQ = [\n    \"SECONDLY\",\n    \"MINUTELY\",\n    \"HOURLY\",\n    \"DAILY\",\n    \"WEEKLY\",\n    \"MONTHLY\",\n    \"YEARLY\"\n];\n/**\n * This class represents the \"recur\" value type, used for example by RRULE. It provides methods to\n * calculate occurrences among others.\n *\n * @memberof ICAL\n */ class Recur {\n    /**\n   * Creates a new {@link ICAL.Recur} instance from the passed string.\n   *\n   * @param {String} string         The string to parse\n   * @return {Recur}                The created recurrence instance\n   */ static fromString(string) {\n        let data = this._stringToData(string, false);\n        return new Recur(data);\n    }\n    /**\n   * Creates a new {@link ICAL.Recur} instance using members from the passed\n   * data object.\n   *\n   * @param {Object} aData                              An object with members of the recurrence\n   * @param {frequencyValues=} aData.freq               The frequency value\n   * @param {Number=} aData.interval                    The INTERVAL value\n   * @param {weekDay=} aData.wkst                       The week start value\n   * @param {Time=} aData.until                         The end of the recurrence set\n   * @param {Number=} aData.count                       The number of occurrences\n   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part\n   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part\n   * @param {Array.<String>=} aData.byday               The BYDAY values\n   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part\n   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part\n   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part\n   */ static fromData(aData) {\n        return new Recur(aData);\n    }\n    /**\n   * Converts a recurrence string to a data object, suitable for the fromData\n   * method.\n   *\n   * @private\n   * @param {String} string     The string to parse\n   * @param {Boolean} fmtIcal   If true, the string is considered to be an\n   *                              iCalendar string\n   * @return {Recur}            The recurrence instance\n   */ static _stringToData(string, fmtIcal) {\n        let dict = Object.create(null);\n        // split is slower in FF but fast enough.\n        // v8 however this is faster then manual split?\n        let values = string.split(\";\");\n        let len = values.length;\n        for(let i = 0; i < len; i++){\n            let parts = values[i].split(\"=\");\n            let ucname = parts[0].toUpperCase();\n            let lcname = parts[0].toLowerCase();\n            let name = fmtIcal ? lcname : ucname;\n            let value = parts[1];\n            if (ucname in partDesign) {\n                let partArr = value.split(\",\");\n                let partSet = new Set();\n                for (let part of partArr){\n                    partSet.add(partDesign[ucname](part));\n                }\n                partArr = [\n                    ...partSet\n                ];\n                dict[name] = partArr.length == 1 ? partArr[0] : partArr;\n            } else if (ucname in optionDesign) {\n                optionDesign[ucname](value, dict, fmtIcal);\n            } else {\n                // Don't swallow unknown values. Just set them as they are.\n                dict[lcname] = value;\n            }\n        }\n        return dict;\n    }\n    /**\n   * Convert an ical representation of a day (SU, MO, etc..)\n   * into a numeric value of that day.\n   *\n   * @param {String} string     The iCalendar day name\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {Number}           Numeric value of given day\n   */ static icalDayToNumericDay(string, aWeekStart) {\n        //XXX: this is here so we can deal\n        //     with possibly invalid string values.\n        let firstDow = aWeekStart || Time.SUNDAY;\n        return (DOW_MAP[string] - firstDow + 7) % 7 + 1;\n    }\n    /**\n   * Convert a numeric day value into its ical representation (SU, MO, etc..)\n   *\n   * @param {Number} num        Numeric value of given day\n   * @param {weekDay=} aWeekStart\n   *        The week start weekday, defaults to SUNDAY\n   * @return {String}           The ICAL day value, e.g SU,MO,...\n   */ static numericDayToIcalDay(num, aWeekStart) {\n        //XXX: this is here so we can deal with possibly invalid number values.\n        //     Also, this allows consistent mapping between day numbers and day\n        //     names for external users.\n        let firstDow = aWeekStart || Time.SUNDAY;\n        let dow = num + firstDow - Time.SUNDAY;\n        if (dow > 7) {\n            dow -= 7;\n        }\n        return REVERSE_DOW_MAP[dow];\n    }\n    /**\n   * Create a new instance of the Recur class.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */ constructor(data){\n        /**\n   * An object holding the BY-parts of the recurrence rule\n   * @memberof ICAL.Recur\n   * @typedef {Object} byParts\n   * @property {Array.<Number>=} BYSECOND            The seconds for the BYSECOND part\n   * @property {Array.<Number>=} BYMINUTE            The minutes for the BYMINUTE part\n   * @property {Array.<Number>=} BYHOUR              The hours for the BYHOUR part\n   * @property {Array.<String>=} BYDAY               The BYDAY values\n   * @property {Array.<Number>=} BYMONTHDAY          The days for the BYMONTHDAY part\n   * @property {Array.<Number>=} BYYEARDAY           The days for the BYYEARDAY part\n   * @property {Array.<Number>=} BYWEEKNO            The weeks for the BYWEEKNO part\n   * @property {Array.<Number>=} BYMONTH             The month for the BYMONTH part\n   * @property {Array.<Number>=} BYSETPOS            The positionals for the BYSETPOS part\n   */ /**\n   * An object holding the BY-parts of the recurrence rule\n   * @type {byParts}\n   */ this.parts = null;\n        /**\n   * The interval value for the recurrence rule.\n   * @type {Number}\n   */ this.interval = 1;\n        /**\n   * The week start day\n   *\n   * @type {weekDay}\n   * @default ICAL.Time.MONDAY\n   */ this.wkst = Time.MONDAY;\n        /**\n   * The end of the recurrence\n   * @type {?Time}\n   */ this.until = null;\n        /**\n   * The maximum number of occurrences\n   * @type {?Number}\n   */ this.count = null;\n        /**\n   * The frequency value.\n   * @type {frequencyValues}\n   */ this.freq = null;\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalrecur\"\n   */ this.icalclass = \"icalrecur\";\n        /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"recur\"\n   */ this.icaltype = \"recur\";\n        this.wrappedJSObject = this;\n        this.parts = {};\n        if (data && typeof data === \"object\") {\n            this.fromData(data);\n        }\n    }\n    /**\n   * Create a new iterator for this recurrence rule. The passed start date\n   * must be the start date of the event, not the start of the range to\n   * search in.\n   *\n   * @example\n   * let recur = comp.getFirstPropertyValue('rrule');\n   * let dtstart = comp.getFirstPropertyValue('dtstart');\n   * let iter = recur.iterator(dtstart);\n   * for (let next = iter.next(); next; next = iter.next()) {\n   *   if (next.compare(rangeStart) < 0) {\n   *     continue;\n   *   }\n   *   console.log(next.toString());\n   * }\n   *\n   * @param {Time} aStart        The item's start date\n   * @return {RecurIterator}     The recurrence iterator\n   */ iterator(aStart) {\n        return new RecurIterator({\n            rule: this,\n            dtstart: aStart\n        });\n    }\n    /**\n   * Returns a clone of the recurrence object.\n   *\n   * @return {Recur}      The cloned object\n   */ clone() {\n        return new Recur(this.toJSON());\n    }\n    /**\n   * Checks if the current rule is finite, i.e. has a count or until part.\n   *\n   * @return {Boolean}        True, if the rule is finite\n   */ isFinite() {\n        return !!(this.count || this.until);\n    }\n    /**\n   * Checks if the current rule has a count part, and not limited by an until\n   * part.\n   *\n   * @return {Boolean}        True, if the rule is by count\n   */ isByCount() {\n        return !!(this.count && !this.until);\n    }\n    /**\n   * Adds a component (part) to the recurrence rule. This is not a component\n   * in the sense of {@link ICAL.Component}, but a part of the recurrence\n   * rule, i.e. BYMONTH.\n   *\n   * @param {String} aType            The name of the component part\n   * @param {Array|String} aValue     The component value\n   */ addComponent(aType, aValue) {\n        let ucname = aType.toUpperCase();\n        if (ucname in this.parts) {\n            this.parts[ucname].push(aValue);\n        } else {\n            this.parts[ucname] = [\n                aValue\n            ];\n        }\n    }\n    /**\n   * Sets the component value for the given by-part.\n   *\n   * @param {String} aType        The component part name\n   * @param {Array} aValues       The component values\n   */ setComponent(aType, aValues) {\n        this.parts[aType.toUpperCase()] = aValues.slice();\n    }\n    /**\n   * Gets (a copy) of the requested component value.\n   *\n   * @param {String} aType        The component part name\n   * @return {Array}              The component part value\n   */ getComponent(aType) {\n        let ucname = aType.toUpperCase();\n        return ucname in this.parts ? this.parts[ucname].slice() : [];\n    }\n    /**\n   * Retrieves the next occurrence after the given recurrence id. See the\n   * guide on {@tutorial terminology} for more details.\n   *\n   * NOTE: Currently, this method iterates all occurrences from the start\n   * date. It should not be called in a loop for performance reasons. If you\n   * would like to get more than one occurrence, you can iterate the\n   * occurrences manually, see the example on the\n   * {@link ICAL.Recur#iterator iterator} method.\n   *\n   * @param {Time} aStartTime        The start of the event series\n   * @param {Time} aRecurrenceId     The date of the last occurrence\n   * @return {Time}                  The next occurrence after\n   */ getNextOccurrence(aStartTime, aRecurrenceId) {\n        let iter = this.iterator(aStartTime);\n        let next;\n        do {\n            next = iter.next();\n        }while (next && next.compare(aRecurrenceId) <= 0);\n        if (next && aRecurrenceId.zone) {\n            next.zone = aRecurrenceId.zone;\n        }\n        return next;\n    }\n    /**\n   * Sets up the current instance using members from the passed data object.\n   *\n   * @param {Object} data                               An object with members of the recurrence\n   * @param {frequencyValues=} data.freq                The frequency value\n   * @param {Number=} data.interval                     The INTERVAL value\n   * @param {weekDay=} data.wkst                        The week start value\n   * @param {Time=} data.until                          The end of the recurrence set\n   * @param {Number=} data.count                        The number of occurrences\n   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part\n   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part\n   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part\n   * @param {Array.<String>=} data.byday                The BYDAY values\n   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part\n   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part\n   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part\n   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part\n   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part\n   */ fromData(data) {\n        for(let key in data){\n            let uckey = key.toUpperCase();\n            if (uckey in partDesign) {\n                if (Array.isArray(data[key])) {\n                    this.parts[uckey] = data[key];\n                } else {\n                    this.parts[uckey] = [\n                        data[key]\n                    ];\n                }\n            } else {\n                this[key] = data[key];\n            }\n        }\n        if (this.interval && typeof this.interval != \"number\") {\n            optionDesign.INTERVAL(this.interval, this);\n        }\n        if (this.wkst && typeof this.wkst != \"number\") {\n            this.wkst = Recur.icalDayToNumericDay(this.wkst);\n        }\n        if (this.until && !(this.until instanceof Time)) {\n            this.until = Time.fromString(this.until);\n        }\n    }\n    /**\n   * The jCal representation of this recurrence type.\n   * @return {Object}\n   */ toJSON() {\n        let res = Object.create(null);\n        res.freq = this.freq;\n        if (this.count) {\n            res.count = this.count;\n        }\n        if (this.interval > 1) {\n            res.interval = this.interval;\n        }\n        for (let [k, kparts] of Object.entries(this.parts)){\n            if (Array.isArray(kparts) && kparts.length == 1) {\n                res[k.toLowerCase()] = kparts[0];\n            } else {\n                res[k.toLowerCase()] = clone(kparts);\n            }\n        }\n        if (this.until) {\n            res.until = this.until.toString();\n        }\n        if (\"wkst\" in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n            res.wkst = Recur.numericDayToIcalDay(this.wkst);\n        }\n        return res;\n    }\n    /**\n   * The string representation of this recurrence rule.\n   * @return {String}\n   */ toString() {\n        // TODO retain order\n        let str = \"FREQ=\" + this.freq;\n        if (this.count) {\n            str += \";COUNT=\" + this.count;\n        }\n        if (this.interval > 1) {\n            str += \";INTERVAL=\" + this.interval;\n        }\n        for (let [k, v] of Object.entries(this.parts)){\n            str += \";\" + k + \"=\" + v;\n        }\n        if (this.until) {\n            str += \";UNTIL=\" + this.until.toICALString();\n        }\n        if (\"wkst\" in this && this.wkst !== Time.DEFAULT_WEEK_START) {\n            str += \";WKST=\" + Recur.numericDayToIcalDay(this.wkst);\n        }\n        return str;\n    }\n}\nfunction parseNumericValue(type, min, max, value) {\n    let result = value;\n    if (value[0] === \"+\") {\n        result = value.slice(1);\n    }\n    result = strictParseInt(result);\n    if (min !== undefined && value < min) {\n        throw new Error(type + ': invalid value \"' + value + '\" must be > ' + min);\n    }\n    if (max !== undefined && value > max) {\n        throw new Error(type + ': invalid value \"' + value + '\" must be < ' + min);\n    }\n    return result;\n}\nconst optionDesign = {\n    FREQ: function(value, dict, fmtIcal) {\n        // yes this is actually equal or faster then regex.\n        // upside here is we can enumerate the valid values.\n        if (ALLOWED_FREQ.indexOf(value) !== -1) {\n            dict.freq = value;\n        } else {\n            throw new Error('invalid frequency \"' + value + '\" expected: \"' + ALLOWED_FREQ.join(\", \") + '\"');\n        }\n    },\n    COUNT: function(value, dict, fmtIcal) {\n        dict.count = strictParseInt(value);\n    },\n    INTERVAL: function(value, dict, fmtIcal) {\n        dict.interval = strictParseInt(value);\n        if (dict.interval < 1) {\n            // 0 or negative values are not allowed, some engines seem to generate\n            // it though. Assume 1 instead.\n            dict.interval = 1;\n        }\n    },\n    UNTIL: function(value, dict, fmtIcal) {\n        if (value.length > 10) {\n            dict.until = design$1.icalendar.value[\"date-time\"].fromICAL(value);\n        } else {\n            dict.until = design$1.icalendar.value.date.fromICAL(value);\n        }\n        if (!fmtIcal) {\n            dict.until = Time.fromString(dict.until);\n        }\n    },\n    WKST: function(value, dict, fmtIcal) {\n        if (VALID_DAY_NAMES.test(value)) {\n            dict.wkst = Recur.icalDayToNumericDay(value);\n        } else {\n            throw new Error('invalid WKST value \"' + value + '\"');\n        }\n    }\n};\nconst partDesign = {\n    BYSECOND: parseNumericValue.bind(undefined, \"BYSECOND\", 0, 60),\n    BYMINUTE: parseNumericValue.bind(undefined, \"BYMINUTE\", 0, 59),\n    BYHOUR: parseNumericValue.bind(undefined, \"BYHOUR\", 0, 23),\n    BYDAY: function(value) {\n        if (VALID_BYDAY_PART.test(value)) {\n            return value;\n        } else {\n            throw new Error('invalid BYDAY value \"' + value + '\"');\n        }\n    },\n    BYMONTHDAY: parseNumericValue.bind(undefined, \"BYMONTHDAY\", -31, 31),\n    BYYEARDAY: parseNumericValue.bind(undefined, \"BYYEARDAY\", -366, 366),\n    BYWEEKNO: parseNumericValue.bind(undefined, \"BYWEEKNO\", -53, 53),\n    BYMONTH: parseNumericValue.bind(undefined, \"BYMONTH\", 1, 12),\n    BYSETPOS: parseNumericValue.bind(undefined, \"BYSETPOS\", -366, 366)\n};\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").jCalComponent} jCalComponent\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */ /**\n * This class represents the \"period\" value type, with various calculation and manipulation methods.\n *\n * @memberof ICAL\n */ class Period {\n    /**\n   * Creates a new {@link ICAL.Period} instance from the passed string.\n   *\n   * @param {String} str            The string to parse\n   * @param {Property} prop         The property this period will be on\n   * @return {Period}               The created period instance\n   */ static fromString(str, prop) {\n        let parts = str.split(\"/\");\n        if (parts.length !== 2) {\n            throw new Error('Invalid string value: \"' + str + '\" must contain a \"/\" char.');\n        }\n        let options = {\n            start: Time.fromDateTimeString(parts[0], prop)\n        };\n        let end = parts[1];\n        if (Duration.isValueString(end)) {\n            options.duration = Duration.fromString(end);\n        } else {\n            options.end = Time.fromDateTimeString(end, prop);\n        }\n        return new Period(options);\n    }\n    /**\n   * Creates a new {@link ICAL.Period} instance from the given data object.\n   * The passed data object cannot contain both and end date and a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   * @return {Period}                       The period instance\n   */ static fromData(aData) {\n        return new Period(aData);\n    }\n    /**\n   * Returns a new period instance from the given jCal data array. The first\n   * member is always the start date string, the second member is either a\n   * duration or end date string.\n   *\n   * @param {jCalComponent} aData           The jCal data array\n   * @param {Property} aProp                The property this jCal data is on\n   * @param {Boolean} aLenient              If true, data value can be both date and date-time\n   * @return {Period}                       The period instance\n   */ static fromJSON(aData, aProp, aLenient) {\n        function fromDateOrDateTimeString(aValue, dateProp) {\n            if (aLenient) {\n                return Time.fromString(aValue, dateProp);\n            } else {\n                return Time.fromDateTimeString(aValue, dateProp);\n            }\n        }\n        if (Duration.isValueString(aData[1])) {\n            return Period.fromData({\n                start: fromDateOrDateTimeString(aData[0], aProp),\n                duration: Duration.fromString(aData[1])\n            });\n        } else {\n            return Period.fromData({\n                start: fromDateOrDateTimeString(aData[0], aProp),\n                end: fromDateOrDateTimeString(aData[1], aProp)\n            });\n        }\n    }\n    /**\n   * Creates a new ICAL.Period instance. The passed data object cannot contain both and end date and\n   * a duration.\n   *\n   * @param {Object} aData                  An object with members of the period\n   * @param {Time=} aData.start             The start of the period\n   * @param {Time=} aData.end               The end of the period\n   * @param {Duration=} aData.duration      The duration of the period\n   */ constructor(aData){\n        /**\n   * The start of the period\n   * @type {Time}\n   */ this.start = null;\n        /**\n   * The end of the period\n   * @type {Time}\n   */ this.end = null;\n        /**\n   * The duration of the period\n   * @type {Duration}\n   */ this.duration = null;\n        /**\n   * The class identifier.\n   * @constant\n   * @type {String}\n   * @default \"icalperiod\"\n   */ this.icalclass = \"icalperiod\";\n        /**\n   * The type name, to be used in the jCal object.\n   * @constant\n   * @type {String}\n   * @default \"period\"\n   */ this.icaltype = \"period\";\n        this.wrappedJSObject = this;\n        if (aData && \"start\" in aData) {\n            if (aData.start && !(aData.start instanceof Time)) {\n                throw new TypeError(\".start must be an instance of ICAL.Time\");\n            }\n            this.start = aData.start;\n        }\n        if (aData && aData.end && aData.duration) {\n            throw new Error(\"cannot accept both end and duration\");\n        }\n        if (aData && \"end\" in aData) {\n            if (aData.end && !(aData.end instanceof Time)) {\n                throw new TypeError(\".end must be an instance of ICAL.Time\");\n            }\n            this.end = aData.end;\n        }\n        if (aData && \"duration\" in aData) {\n            if (aData.duration && !(aData.duration instanceof Duration)) {\n                throw new TypeError(\".duration must be an instance of ICAL.Duration\");\n            }\n            this.duration = aData.duration;\n        }\n    }\n    /**\n   * Returns a clone of the duration object.\n   *\n   * @return {Period}      The cloned object\n   */ clone() {\n        return Period.fromData({\n            start: this.start ? this.start.clone() : null,\n            end: this.end ? this.end.clone() : null,\n            duration: this.duration ? this.duration.clone() : null\n        });\n    }\n    /**\n   * Calculates the duration of the period, either directly or by subtracting\n   * start from end date.\n   *\n   * @return {Duration}      The calculated duration\n   */ getDuration() {\n        if (this.duration) {\n            return this.duration;\n        } else {\n            return this.end.subtractDate(this.start);\n        }\n    }\n    /**\n   * Calculates the end date of the period, either directly or by adding\n   * duration to start date.\n   *\n   * @return {Time}          The calculated end date\n   */ getEnd() {\n        if (this.end) {\n            return this.end;\n        } else {\n            let end = this.start.clone();\n            end.addDuration(this.duration);\n            return end;\n        }\n    }\n    /**\n   * The string representation of this period.\n   * @return {String}\n   */ toString() {\n        return this.start + \"/\" + (this.end || this.duration);\n    }\n    /**\n   * The jCal representation of this period type.\n   * @return {Object}\n   */ toJSON() {\n        return [\n            this.start.toString(),\n            (this.end || this.duration).toString()\n        ];\n    }\n    /**\n   * The iCalendar string representation of this period.\n   * @return {String}\n   */ toICALString() {\n        return this.start.toICALString() + \"/\" + (this.end || this.duration).toICALString();\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */ /** @module ICAL.design */ const FROM_ICAL_NEWLINE = /\\\\\\\\|\\\\;|\\\\,|\\\\[Nn]/g;\nconst TO_ICAL_NEWLINE = /\\\\|;|,|\\n/g;\nconst FROM_VCARD_NEWLINE = /\\\\\\\\|\\\\,|\\\\[Nn]/g;\nconst TO_VCARD_NEWLINE = /\\\\|,|\\n/g;\nfunction createTextType(fromNewline, toNewline) {\n    let result = {\n        matches: /.*/,\n        fromICAL: function(aValue, structuredEscape) {\n            return replaceNewline(aValue, fromNewline, structuredEscape);\n        },\n        toICAL: function(aValue, structuredEscape) {\n            let regEx = toNewline;\n            if (structuredEscape) regEx = new RegExp(regEx.source + \"|\" + structuredEscape, regEx.flags);\n            return aValue.replace(regEx, function(str) {\n                switch(str){\n                    case \"\\\\\":\n                        return \"\\\\\\\\\";\n                    case \";\":\n                        return \"\\\\;\";\n                    case \",\":\n                        return \"\\\\,\";\n                    case \"\\n\":\n                        return \"\\\\n\";\n                    /* c8 ignore next 2 */ default:\n                        return str;\n                }\n            });\n        }\n    };\n    return result;\n}\n// default types used multiple times\nconst DEFAULT_TYPE_TEXT = {\n    defaultType: \"text\"\n};\nconst DEFAULT_TYPE_TEXT_MULTI = {\n    defaultType: \"text\",\n    multiValue: \",\"\n};\nconst DEFAULT_TYPE_TEXT_STRUCTURED = {\n    defaultType: \"text\",\n    structuredValue: \";\"\n};\nconst DEFAULT_TYPE_INTEGER = {\n    defaultType: \"integer\"\n};\nconst DEFAULT_TYPE_DATETIME_DATE = {\n    defaultType: \"date-time\",\n    allowedTypes: [\n        \"date-time\",\n        \"date\"\n    ]\n};\nconst DEFAULT_TYPE_DATETIME = {\n    defaultType: \"date-time\"\n};\nconst DEFAULT_TYPE_URI = {\n    defaultType: \"uri\"\n};\nconst DEFAULT_TYPE_UTCOFFSET = {\n    defaultType: \"utc-offset\"\n};\nconst DEFAULT_TYPE_RECUR = {\n    defaultType: \"recur\"\n};\nconst DEFAULT_TYPE_DATE_ANDOR_TIME = {\n    defaultType: \"date-and-or-time\",\n    allowedTypes: [\n        \"date-time\",\n        \"date\",\n        \"text\"\n    ]\n};\nfunction replaceNewlineReplace(string) {\n    switch(string){\n        case \"\\\\\\\\\":\n            return \"\\\\\";\n        case \"\\\\;\":\n            return \";\";\n        case \"\\\\,\":\n            return \",\";\n        case \"\\\\n\":\n        case \"\\\\N\":\n            return \"\\n\";\n        /* c8 ignore next 2 */ default:\n            return string;\n    }\n}\nfunction replaceNewline(value, newline, structuredEscape) {\n    // avoid regex when possible.\n    if (value.indexOf(\"\\\\\") === -1) {\n        return value;\n    }\n    if (structuredEscape) newline = new RegExp(newline.source + \"|\\\\\\\\\" + structuredEscape, newline.flags);\n    return value.replace(newline, replaceNewlineReplace);\n}\nlet commonProperties = {\n    \"categories\": DEFAULT_TYPE_TEXT_MULTI,\n    \"url\": DEFAULT_TYPE_URI,\n    \"version\": DEFAULT_TYPE_TEXT,\n    \"uid\": DEFAULT_TYPE_TEXT\n};\nlet commonValues = {\n    \"boolean\": {\n        values: [\n            \"TRUE\",\n            \"FALSE\"\n        ],\n        fromICAL: function(aValue) {\n            switch(aValue){\n                case \"TRUE\":\n                    return true;\n                case \"FALSE\":\n                    return false;\n                default:\n                    //TODO: parser warning\n                    return false;\n            }\n        },\n        toICAL: function(aValue) {\n            if (aValue) {\n                return \"TRUE\";\n            }\n            return \"FALSE\";\n        }\n    },\n    float: {\n        matches: /^[+-]?\\d+\\.\\d+$/,\n        fromICAL: function(aValue) {\n            let parsed = parseFloat(aValue);\n            if (isStrictlyNaN(parsed)) {\n                // TODO: parser warning\n                return 0.0;\n            }\n            return parsed;\n        },\n        toICAL: function(aValue) {\n            return String(aValue);\n        }\n    },\n    integer: {\n        fromICAL: function(aValue) {\n            let parsed = parseInt(aValue);\n            if (isStrictlyNaN(parsed)) {\n                return 0;\n            }\n            return parsed;\n        },\n        toICAL: function(aValue) {\n            return String(aValue);\n        }\n    },\n    \"utc-offset\": {\n        toICAL: function(aValue) {\n            if (aValue.length < 7) {\n                // no seconds\n                // -0500\n                return aValue.slice(0, 3) + aValue.slice(4, 6);\n            } else {\n                // seconds\n                // -050000\n                return aValue.slice(0, 3) + aValue.slice(4, 6) + aValue.slice(7, 9);\n            }\n        },\n        fromICAL: function(aValue) {\n            if (aValue.length < 6) {\n                // no seconds\n                // -05:00\n                return aValue.slice(0, 3) + \":\" + aValue.slice(3, 5);\n            } else {\n                // seconds\n                // -05:00:00\n                return aValue.slice(0, 3) + \":\" + aValue.slice(3, 5) + \":\" + aValue.slice(5, 7);\n            }\n        },\n        decorate: function(aValue) {\n            return UtcOffset.fromString(aValue);\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        }\n    }\n};\nlet icalParams = {\n    // Although the syntax is DQUOTE uri DQUOTE, I don't think we should\n    // enforce anything aside from it being a valid content line.\n    //\n    // At least some params require - if multi values are used - DQUOTEs\n    // for each of its values - e.g. delegated-from=\"uri1\",\"uri2\"\n    // To indicate this, I introduced the new k/v pair\n    // multiValueSeparateDQuote: true\n    //\n    // \"ALTREP\": { ... },\n    // CN just wants a param-value\n    // \"CN\": { ... }\n    \"cutype\": {\n        values: [\n            \"INDIVIDUAL\",\n            \"GROUP\",\n            \"RESOURCE\",\n            \"ROOM\",\n            \"UNKNOWN\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    },\n    \"delegated-from\": {\n        valueType: \"cal-address\",\n        multiValue: \",\",\n        multiValueSeparateDQuote: true\n    },\n    \"delegated-to\": {\n        valueType: \"cal-address\",\n        multiValue: \",\",\n        multiValueSeparateDQuote: true\n    },\n    // \"DIR\": { ... }, // See ALTREP\n    \"encoding\": {\n        values: [\n            \"8BIT\",\n            \"BASE64\"\n        ]\n    },\n    // \"FMTTYPE\": { ... }, // See ALTREP\n    \"fbtype\": {\n        values: [\n            \"FREE\",\n            \"BUSY\",\n            \"BUSY-UNAVAILABLE\",\n            \"BUSY-TENTATIVE\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    },\n    // \"LANGUAGE\": { ... }, // See ALTREP\n    \"member\": {\n        valueType: \"cal-address\",\n        multiValue: \",\",\n        multiValueSeparateDQuote: true\n    },\n    \"partstat\": {\n        // TODO These values are actually different per-component\n        values: [\n            \"NEEDS-ACTION\",\n            \"ACCEPTED\",\n            \"DECLINED\",\n            \"TENTATIVE\",\n            \"DELEGATED\",\n            \"COMPLETED\",\n            \"IN-PROCESS\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    },\n    \"range\": {\n        values: [\n            \"THISANDFUTURE\"\n        ]\n    },\n    \"related\": {\n        values: [\n            \"START\",\n            \"END\"\n        ]\n    },\n    \"reltype\": {\n        values: [\n            \"PARENT\",\n            \"CHILD\",\n            \"SIBLING\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    },\n    \"role\": {\n        values: [\n            \"REQ-PARTICIPANT\",\n            \"CHAIR\",\n            \"OPT-PARTICIPANT\",\n            \"NON-PARTICIPANT\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    },\n    \"rsvp\": {\n        values: [\n            \"TRUE\",\n            \"FALSE\"\n        ]\n    },\n    \"sent-by\": {\n        valueType: \"cal-address\"\n    },\n    \"tzid\": {\n        matches: /^\\//\n    },\n    \"value\": {\n        // since the value here is a 'type' lowercase is used.\n        values: [\n            \"binary\",\n            \"boolean\",\n            \"cal-address\",\n            \"date\",\n            \"date-time\",\n            \"duration\",\n            \"float\",\n            \"integer\",\n            \"period\",\n            \"recur\",\n            \"text\",\n            \"time\",\n            \"uri\",\n            \"utc-offset\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    }\n};\n// When adding a value here, be sure to add it to the parameter types!\nconst icalValues = extend(commonValues, {\n    text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),\n    uri: {\n    },\n    \"binary\": {\n        decorate: function(aString) {\n            return Binary.fromString(aString);\n        },\n        undecorate: function(aBinary) {\n            return aBinary.toString();\n        }\n    },\n    \"cal-address\": {\n    },\n    \"date\": {\n        decorate: function(aValue, aProp) {\n            if (design.strict) {\n                return Time.fromDateString(aValue, aProp);\n            } else {\n                return Time.fromString(aValue, aProp);\n            }\n        },\n        /**\n     * undecorates a time object.\n     */ undecorate: function(aValue) {\n            return aValue.toString();\n        },\n        fromICAL: function(aValue) {\n            // from: 20120901\n            // to: 2012-09-01\n            if (!design.strict && aValue.length >= 15) {\n                // This is probably a date-time, e.g. 20120901T130000Z\n                return icalValues[\"date-time\"].fromICAL(aValue);\n            } else {\n                return aValue.slice(0, 4) + \"-\" + aValue.slice(4, 6) + \"-\" + aValue.slice(6, 8);\n            }\n        },\n        toICAL: function(aValue) {\n            // from: 2012-09-01\n            // to: 20120901\n            let len = aValue.length;\n            if (len == 10) {\n                return aValue.slice(0, 4) + aValue.slice(5, 7) + aValue.slice(8, 10);\n            } else if (len >= 19) {\n                return icalValues[\"date-time\"].toICAL(aValue);\n            } else {\n                //TODO: serialize warning?\n                return aValue;\n            }\n        }\n    },\n    \"date-time\": {\n        fromICAL: function(aValue) {\n            // from: 20120901T130000\n            // to: 2012-09-01T13:00:00\n            if (!design.strict && aValue.length == 8) {\n                // This is probably a date, e.g. 20120901\n                return icalValues.date.fromICAL(aValue);\n            } else {\n                let result = aValue.slice(0, 4) + \"-\" + aValue.slice(4, 6) + \"-\" + aValue.slice(6, 8) + \"T\" + aValue.slice(9, 11) + \":\" + aValue.slice(11, 13) + \":\" + aValue.slice(13, 15);\n                if (aValue[15] && aValue[15] === \"Z\") {\n                    result += \"Z\";\n                }\n                return result;\n            }\n        },\n        toICAL: function(aValue) {\n            // from: 2012-09-01T13:00:00\n            // to: 20120901T130000\n            let len = aValue.length;\n            if (len == 10 && !design.strict) {\n                return icalValues.date.toICAL(aValue);\n            } else if (len >= 19) {\n                let result = aValue.slice(0, 4) + aValue.slice(5, 7) + // grab the (DDTHH) segment\n                aValue.slice(8, 13) + // MM\n                aValue.slice(14, 16) + // SS\n                aValue.slice(17, 19);\n                if (aValue[19] && aValue[19] === \"Z\") {\n                    result += \"Z\";\n                }\n                return result;\n            } else {\n                // TODO: error\n                return aValue;\n            }\n        },\n        decorate: function(aValue, aProp) {\n            if (design.strict) {\n                return Time.fromDateTimeString(aValue, aProp);\n            } else {\n                return Time.fromString(aValue, aProp);\n            }\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        }\n    },\n    duration: {\n        decorate: function(aValue) {\n            return Duration.fromString(aValue);\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        }\n    },\n    period: {\n        fromICAL: function(string) {\n            let parts = string.split(\"/\");\n            parts[0] = icalValues[\"date-time\"].fromICAL(parts[0]);\n            if (!Duration.isValueString(parts[1])) {\n                parts[1] = icalValues[\"date-time\"].fromICAL(parts[1]);\n            }\n            return parts;\n        },\n        toICAL: function(parts) {\n            parts = parts.slice();\n            if (!design.strict && parts[0].length == 10) {\n                parts[0] = icalValues.date.toICAL(parts[0]);\n            } else {\n                parts[0] = icalValues[\"date-time\"].toICAL(parts[0]);\n            }\n            if (!Duration.isValueString(parts[1])) {\n                if (!design.strict && parts[1].length == 10) {\n                    parts[1] = icalValues.date.toICAL(parts[1]);\n                } else {\n                    parts[1] = icalValues[\"date-time\"].toICAL(parts[1]);\n                }\n            }\n            return parts.join(\"/\");\n        },\n        decorate: function(aValue, aProp) {\n            return Period.fromJSON(aValue, aProp, !design.strict);\n        },\n        undecorate: function(aValue) {\n            return aValue.toJSON();\n        }\n    },\n    recur: {\n        fromICAL: function(string) {\n            return Recur._stringToData(string, true);\n        },\n        toICAL: function(data) {\n            let str = \"\";\n            for (let [k, val] of Object.entries(data)){\n                if (k == \"until\") {\n                    if (val.length > 10) {\n                        val = icalValues[\"date-time\"].toICAL(val);\n                    } else {\n                        val = icalValues.date.toICAL(val);\n                    }\n                } else if (k == \"wkst\") {\n                    if (typeof val === \"number\") {\n                        val = Recur.numericDayToIcalDay(val);\n                    }\n                } else if (Array.isArray(val)) {\n                    val = val.join(\",\");\n                }\n                str += k.toUpperCase() + \"=\" + val + \";\";\n            }\n            return str.slice(0, Math.max(0, str.length - 1));\n        },\n        decorate: function decorate(aValue) {\n            return Recur.fromData(aValue);\n        },\n        undecorate: function(aRecur) {\n            return aRecur.toJSON();\n        }\n    },\n    time: {\n        fromICAL: function(aValue) {\n            // from: MMHHSS(Z)?\n            // to: HH:MM:SS(Z)?\n            if (aValue.length < 6) {\n                // TODO: parser exception?\n                return aValue;\n            }\n            // HH::MM::SSZ?\n            let result = aValue.slice(0, 2) + \":\" + aValue.slice(2, 4) + \":\" + aValue.slice(4, 6);\n            if (aValue[6] === \"Z\") {\n                result += \"Z\";\n            }\n            return result;\n        },\n        toICAL: function(aValue) {\n            // from: HH:MM:SS(Z)?\n            // to: MMHHSS(Z)?\n            if (aValue.length < 8) {\n                //TODO: error\n                return aValue;\n            }\n            let result = aValue.slice(0, 2) + aValue.slice(3, 5) + aValue.slice(6, 8);\n            if (aValue[8] === \"Z\") {\n                result += \"Z\";\n            }\n            return result;\n        }\n    }\n});\nlet icalProperties = extend(commonProperties, {\n    \"action\": DEFAULT_TYPE_TEXT,\n    \"attach\": {\n        defaultType: \"uri\"\n    },\n    \"attendee\": {\n        defaultType: \"cal-address\"\n    },\n    \"calscale\": DEFAULT_TYPE_TEXT,\n    \"class\": DEFAULT_TYPE_TEXT,\n    \"comment\": DEFAULT_TYPE_TEXT,\n    \"completed\": DEFAULT_TYPE_DATETIME,\n    \"contact\": DEFAULT_TYPE_TEXT,\n    \"created\": DEFAULT_TYPE_DATETIME,\n    \"description\": DEFAULT_TYPE_TEXT,\n    \"dtend\": DEFAULT_TYPE_DATETIME_DATE,\n    \"dtstamp\": DEFAULT_TYPE_DATETIME,\n    \"dtstart\": DEFAULT_TYPE_DATETIME_DATE,\n    \"due\": DEFAULT_TYPE_DATETIME_DATE,\n    \"duration\": {\n        defaultType: \"duration\"\n    },\n    \"exdate\": {\n        defaultType: \"date-time\",\n        allowedTypes: [\n            \"date-time\",\n            \"date\"\n        ],\n        multiValue: \",\"\n    },\n    \"exrule\": DEFAULT_TYPE_RECUR,\n    \"freebusy\": {\n        defaultType: \"period\",\n        multiValue: \",\"\n    },\n    \"geo\": {\n        defaultType: \"float\",\n        structuredValue: \";\"\n    },\n    \"last-modified\": DEFAULT_TYPE_DATETIME,\n    \"location\": DEFAULT_TYPE_TEXT,\n    \"method\": DEFAULT_TYPE_TEXT,\n    \"organizer\": {\n        defaultType: \"cal-address\"\n    },\n    \"percent-complete\": DEFAULT_TYPE_INTEGER,\n    \"priority\": DEFAULT_TYPE_INTEGER,\n    \"prodid\": DEFAULT_TYPE_TEXT,\n    \"related-to\": DEFAULT_TYPE_TEXT,\n    \"repeat\": DEFAULT_TYPE_INTEGER,\n    \"rdate\": {\n        defaultType: \"date-time\",\n        allowedTypes: [\n            \"date-time\",\n            \"date\",\n            \"period\"\n        ],\n        multiValue: \",\",\n        detectType: function(string) {\n            if (string.indexOf(\"/\") !== -1) {\n                return \"period\";\n            }\n            return string.indexOf(\"T\") === -1 ? \"date\" : \"date-time\";\n        }\n    },\n    \"recurrence-id\": DEFAULT_TYPE_DATETIME_DATE,\n    \"resources\": DEFAULT_TYPE_TEXT_MULTI,\n    \"request-status\": DEFAULT_TYPE_TEXT_STRUCTURED,\n    \"rrule\": DEFAULT_TYPE_RECUR,\n    \"sequence\": DEFAULT_TYPE_INTEGER,\n    \"status\": DEFAULT_TYPE_TEXT,\n    \"summary\": DEFAULT_TYPE_TEXT,\n    \"transp\": DEFAULT_TYPE_TEXT,\n    \"trigger\": {\n        defaultType: \"duration\",\n        allowedTypes: [\n            \"duration\",\n            \"date-time\"\n        ]\n    },\n    \"tzoffsetfrom\": DEFAULT_TYPE_UTCOFFSET,\n    \"tzoffsetto\": DEFAULT_TYPE_UTCOFFSET,\n    \"tzurl\": DEFAULT_TYPE_URI,\n    \"tzid\": DEFAULT_TYPE_TEXT,\n    \"tzname\": DEFAULT_TYPE_TEXT\n});\n// When adding a value here, be sure to add it to the parameter types!\nconst vcardValues = extend(commonValues, {\n    text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n    uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),\n    date: {\n        decorate: function(aValue) {\n            return VCardTime.fromDateAndOrTimeString(aValue, \"date\");\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        },\n        fromICAL: function(aValue) {\n            if (aValue.length == 8) {\n                return icalValues.date.fromICAL(aValue);\n            } else if (aValue[0] == \"-\" && aValue.length == 6) {\n                return aValue.slice(0, 4) + \"-\" + aValue.slice(4);\n            } else {\n                return aValue;\n            }\n        },\n        toICAL: function(aValue) {\n            if (aValue.length == 10) {\n                return icalValues.date.toICAL(aValue);\n            } else if (aValue[0] == \"-\" && aValue.length == 7) {\n                return aValue.slice(0, 4) + aValue.slice(5);\n            } else {\n                return aValue;\n            }\n        }\n    },\n    time: {\n        decorate: function(aValue) {\n            return VCardTime.fromDateAndOrTimeString(\"T\" + aValue, \"time\");\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        },\n        fromICAL: function(aValue) {\n            let splitzone = vcardValues.time._splitZone(aValue, true);\n            let zone = splitzone[0], value = splitzone[1];\n            //console.log(\"SPLIT: \",splitzone);\n            if (value.length == 6) {\n                value = value.slice(0, 2) + \":\" + value.slice(2, 4) + \":\" + value.slice(4, 6);\n            } else if (value.length == 4 && value[0] != \"-\") {\n                value = value.slice(0, 2) + \":\" + value.slice(2, 4);\n            } else if (value.length == 5) {\n                value = value.slice(0, 3) + \":\" + value.slice(3, 5);\n            }\n            if (zone.length == 5 && (zone[0] == \"-\" || zone[0] == \"+\")) {\n                zone = zone.slice(0, 3) + \":\" + zone.slice(3);\n            }\n            return value + zone;\n        },\n        toICAL: function(aValue) {\n            let splitzone = vcardValues.time._splitZone(aValue);\n            let zone = splitzone[0], value = splitzone[1];\n            if (value.length == 8) {\n                value = value.slice(0, 2) + value.slice(3, 5) + value.slice(6, 8);\n            } else if (value.length == 5 && value[0] != \"-\") {\n                value = value.slice(0, 2) + value.slice(3, 5);\n            } else if (value.length == 6) {\n                value = value.slice(0, 3) + value.slice(4, 6);\n            }\n            if (zone.length == 6 && (zone[0] == \"-\" || zone[0] == \"+\")) {\n                zone = zone.slice(0, 3) + zone.slice(4);\n            }\n            return value + zone;\n        },\n        _splitZone: function(aValue, isFromIcal) {\n            let lastChar = aValue.length - 1;\n            let signChar = aValue.length - (isFromIcal ? 5 : 6);\n            let sign = aValue[signChar];\n            let zone, value;\n            if (aValue[lastChar] == \"Z\") {\n                zone = aValue[lastChar];\n                value = aValue.slice(0, Math.max(0, lastChar));\n            } else if (aValue.length > 6 && (sign == \"-\" || sign == \"+\")) {\n                zone = aValue.slice(signChar);\n                value = aValue.slice(0, Math.max(0, signChar));\n            } else {\n                zone = \"\";\n                value = aValue;\n            }\n            return [\n                zone,\n                value\n            ];\n        }\n    },\n    \"date-time\": {\n        decorate: function(aValue) {\n            return VCardTime.fromDateAndOrTimeString(aValue, \"date-time\");\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        },\n        fromICAL: function(aValue) {\n            return vcardValues[\"date-and-or-time\"].fromICAL(aValue);\n        },\n        toICAL: function(aValue) {\n            return vcardValues[\"date-and-or-time\"].toICAL(aValue);\n        }\n    },\n    \"date-and-or-time\": {\n        decorate: function(aValue) {\n            return VCardTime.fromDateAndOrTimeString(aValue, \"date-and-or-time\");\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        },\n        fromICAL: function(aValue) {\n            let parts = aValue.split(\"T\");\n            return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : \"\") + (parts[1] ? \"T\" + vcardValues.time.fromICAL(parts[1]) : \"\");\n        },\n        toICAL: function(aValue) {\n            let parts = aValue.split(\"T\");\n            return vcardValues.date.toICAL(parts[0]) + (parts[1] ? \"T\" + vcardValues.time.toICAL(parts[1]) : \"\");\n        }\n    },\n    timestamp: icalValues[\"date-time\"],\n    \"language-tag\": {\n        matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here\n    },\n    \"phone-number\": {\n        fromICAL: function(aValue) {\n            return Array.from(aValue).filter(function(c) {\n                return c === \"\\\\\" ? undefined : c;\n            }).join(\"\");\n        },\n        toICAL: function(aValue) {\n            return Array.from(aValue).map(function(c) {\n                return c === \",\" || c === \";\" ? \"\\\\\" + c : c;\n            }).join(\"\");\n        }\n    }\n});\nlet vcardParams = {\n    \"type\": {\n        valueType: \"text\",\n        multiValue: \",\"\n    },\n    \"value\": {\n        // since the value here is a 'type' lowercase is used.\n        values: [\n            \"text\",\n            \"uri\",\n            \"date\",\n            \"time\",\n            \"date-time\",\n            \"date-and-or-time\",\n            \"timestamp\",\n            \"boolean\",\n            \"integer\",\n            \"float\",\n            \"utc-offset\",\n            \"language-tag\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    }\n};\nlet vcardProperties = extend(commonProperties, {\n    \"adr\": {\n        defaultType: \"text\",\n        structuredValue: \";\",\n        multiValue: \",\"\n    },\n    \"anniversary\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n    \"bday\": DEFAULT_TYPE_DATE_ANDOR_TIME,\n    \"caladruri\": DEFAULT_TYPE_URI,\n    \"caluri\": DEFAULT_TYPE_URI,\n    \"clientpidmap\": DEFAULT_TYPE_TEXT_STRUCTURED,\n    \"email\": DEFAULT_TYPE_TEXT,\n    \"fburl\": DEFAULT_TYPE_URI,\n    \"fn\": DEFAULT_TYPE_TEXT,\n    \"gender\": DEFAULT_TYPE_TEXT_STRUCTURED,\n    \"geo\": DEFAULT_TYPE_URI,\n    \"impp\": DEFAULT_TYPE_URI,\n    \"key\": DEFAULT_TYPE_URI,\n    \"kind\": DEFAULT_TYPE_TEXT,\n    \"lang\": {\n        defaultType: \"language-tag\"\n    },\n    \"logo\": DEFAULT_TYPE_URI,\n    \"member\": DEFAULT_TYPE_URI,\n    \"n\": {\n        defaultType: \"text\",\n        structuredValue: \";\",\n        multiValue: \",\"\n    },\n    \"nickname\": DEFAULT_TYPE_TEXT_MULTI,\n    \"note\": DEFAULT_TYPE_TEXT,\n    \"org\": {\n        defaultType: \"text\",\n        structuredValue: \";\"\n    },\n    \"photo\": DEFAULT_TYPE_URI,\n    \"related\": DEFAULT_TYPE_URI,\n    \"rev\": {\n        defaultType: \"timestamp\"\n    },\n    \"role\": DEFAULT_TYPE_TEXT,\n    \"sound\": DEFAULT_TYPE_URI,\n    \"source\": DEFAULT_TYPE_URI,\n    \"tel\": {\n        defaultType: \"uri\",\n        allowedTypes: [\n            \"uri\",\n            \"text\"\n        ]\n    },\n    \"title\": DEFAULT_TYPE_TEXT,\n    \"tz\": {\n        defaultType: \"text\",\n        allowedTypes: [\n            \"text\",\n            \"utc-offset\",\n            \"uri\"\n        ]\n    },\n    \"xml\": DEFAULT_TYPE_TEXT\n});\nlet vcard3Values = extend(commonValues, {\n    binary: icalValues.binary,\n    date: vcardValues.date,\n    \"date-time\": vcardValues[\"date-time\"],\n    \"phone-number\": vcardValues[\"phone-number\"],\n    uri: icalValues.uri,\n    text: icalValues.text,\n    time: icalValues.time,\n    vcard: icalValues.text,\n    \"utc-offset\": {\n        toICAL: function(aValue) {\n            return aValue.slice(0, 7);\n        },\n        fromICAL: function(aValue) {\n            return aValue.slice(0, 7);\n        },\n        decorate: function(aValue) {\n            return UtcOffset.fromString(aValue);\n        },\n        undecorate: function(aValue) {\n            return aValue.toString();\n        }\n    }\n});\nlet vcard3Params = {\n    \"type\": {\n        valueType: \"text\",\n        multiValue: \",\"\n    },\n    \"value\": {\n        // since the value here is a 'type' lowercase is used.\n        values: [\n            \"text\",\n            \"uri\",\n            \"date\",\n            \"date-time\",\n            \"phone-number\",\n            \"time\",\n            \"boolean\",\n            \"integer\",\n            \"float\",\n            \"utc-offset\",\n            \"vcard\",\n            \"binary\"\n        ],\n        allowXName: true,\n        allowIanaToken: true\n    }\n};\nlet vcard3Properties = extend(commonProperties, {\n    fn: DEFAULT_TYPE_TEXT,\n    n: {\n        defaultType: \"text\",\n        structuredValue: \";\",\n        multiValue: \",\"\n    },\n    nickname: DEFAULT_TYPE_TEXT_MULTI,\n    photo: {\n        defaultType: \"binary\",\n        allowedTypes: [\n            \"binary\",\n            \"uri\"\n        ]\n    },\n    bday: {\n        defaultType: \"date-time\",\n        allowedTypes: [\n            \"date-time\",\n            \"date\"\n        ],\n        detectType: function(string) {\n            return string.indexOf(\"T\") === -1 ? \"date\" : \"date-time\";\n        }\n    },\n    adr: {\n        defaultType: \"text\",\n        structuredValue: \";\",\n        multiValue: \",\"\n    },\n    label: DEFAULT_TYPE_TEXT,\n    tel: {\n        defaultType: \"phone-number\"\n    },\n    email: DEFAULT_TYPE_TEXT,\n    mailer: DEFAULT_TYPE_TEXT,\n    tz: {\n        defaultType: \"utc-offset\",\n        allowedTypes: [\n            \"utc-offset\",\n            \"text\"\n        ]\n    },\n    geo: {\n        defaultType: \"float\",\n        structuredValue: \";\"\n    },\n    title: DEFAULT_TYPE_TEXT,\n    role: DEFAULT_TYPE_TEXT,\n    logo: {\n        defaultType: \"binary\",\n        allowedTypes: [\n            \"binary\",\n            \"uri\"\n        ]\n    },\n    agent: {\n        defaultType: \"vcard\",\n        allowedTypes: [\n            \"vcard\",\n            \"text\",\n            \"uri\"\n        ]\n    },\n    org: DEFAULT_TYPE_TEXT_STRUCTURED,\n    note: DEFAULT_TYPE_TEXT_MULTI,\n    prodid: DEFAULT_TYPE_TEXT,\n    rev: {\n        defaultType: \"date-time\",\n        allowedTypes: [\n            \"date-time\",\n            \"date\"\n        ],\n        detectType: function(string) {\n            return string.indexOf(\"T\") === -1 ? \"date\" : \"date-time\";\n        }\n    },\n    \"sort-string\": DEFAULT_TYPE_TEXT,\n    sound: {\n        defaultType: \"binary\",\n        allowedTypes: [\n            \"binary\",\n            \"uri\"\n        ]\n    },\n    class: DEFAULT_TYPE_TEXT,\n    key: {\n        defaultType: \"binary\",\n        allowedTypes: [\n            \"binary\",\n            \"text\"\n        ]\n    }\n});\n/**\n * iCalendar design set\n * @type {designSet}\n */ let icalSet = {\n    value: icalValues,\n    param: icalParams,\n    property: icalProperties,\n    propertyGroups: false\n};\n/**\n * vCard 4.0 design set\n * @type {designSet}\n */ let vcardSet = {\n    value: vcardValues,\n    param: vcardParams,\n    property: vcardProperties,\n    propertyGroups: true\n};\n/**\n * vCard 3.0 design set\n * @type {designSet}\n */ let vcard3Set = {\n    value: vcard3Values,\n    param: vcard3Params,\n    property: vcard3Properties,\n    propertyGroups: true\n};\n/**\n * The design data, used by the parser to determine types for properties and\n * other metadata needed to produce correct jCard/jCal data.\n *\n * @alias ICAL.design\n * @exports module:ICAL.design\n */ const design = {\n    /**\n   * Can be set to false to make the parser more lenient.\n   */ strict: true,\n    /**\n   * The default set for new properties and components if none is specified.\n   * @type {designSet}\n   */ defaultSet: icalSet,\n    /**\n   * The default type for unknown properties\n   * @type {String}\n   */ defaultType: \"unknown\",\n    /**\n   * Holds the design set for known top-level components\n   *\n   * @type {Object}\n   * @property {designSet} vcard       vCard VCARD\n   * @property {designSet} vevent      iCalendar VEVENT\n   * @property {designSet} vtodo       iCalendar VTODO\n   * @property {designSet} vjournal    iCalendar VJOURNAL\n   * @property {designSet} valarm      iCalendar VALARM\n   * @property {designSet} vtimezone   iCalendar VTIMEZONE\n   * @property {designSet} daylight    iCalendar DAYLIGHT\n   * @property {designSet} standard    iCalendar STANDARD\n   *\n   * @example\n   * let propertyName = 'fn';\n   * let componentDesign = ICAL.design.components.vcard;\n   * let propertyDetails = componentDesign.property[propertyName];\n   * if (propertyDetails.defaultType == 'text') {\n   *   // Yep, sure is...\n   * }\n   */ components: {\n        vcard: vcardSet,\n        vcard3: vcard3Set,\n        vevent: icalSet,\n        vtodo: icalSet,\n        vjournal: icalSet,\n        valarm: icalSet,\n        vtimezone: icalSet,\n        daylight: icalSet,\n        standard: icalSet\n    },\n    /**\n   * The design set for iCalendar (rfc5545/rfc7265) components.\n   * @type {designSet}\n   */ icalendar: icalSet,\n    /**\n   * The design set for vCard (rfc6350/rfc7095) components.\n   * @type {designSet}\n   */ vcard: vcardSet,\n    /**\n   * The design set for vCard (rfc2425/rfc2426/rfc7095) components.\n   * @type {designSet}\n   */ vcard3: vcard3Set,\n    /**\n   * Gets the design set for the given component name.\n   *\n   * @param {String} componentName        The name of the component\n   * @return {designSet}      The design set for the component\n   */ getDesignSet: function(componentName) {\n        let isInDesign = componentName && componentName in design.components;\n        return isInDesign ? design.components[componentName] : design.defaultSet;\n    }\n};\nvar design$1 = design;\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n *\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n */ const LINE_ENDING = \"\\r\\n\";\nconst DEFAULT_VALUE_TYPE = \"unknown\";\nconst RFC6868_REPLACE_MAP = {\n    '\"': \"^'\",\n    \"\\n\": \"^n\",\n    \"^\": \"^^\"\n};\n/**\n * Convert a full jCal/jCard array into a iCalendar/vCard string.\n *\n * @function ICAL.stringify\n * @variation function\n * @param {Array} jCal    The jCal/jCard document\n * @return {String}       The stringified iCalendar/vCard document\n */ function stringify(jCal) {\n    if (typeof jCal[0] == \"string\") {\n        // This is a single component\n        jCal = [\n            jCal\n        ];\n    }\n    let i = 0;\n    let len = jCal.length;\n    let result = \"\";\n    for(; i < len; i++){\n        result += stringify.component(jCal[i]) + LINE_ENDING;\n    }\n    return result;\n}\n/**\n * Converts an jCal component array into a ICAL string.\n * Recursive will resolve sub-components.\n *\n * Exact component/property order is not saved all\n * properties will come before subcomponents.\n *\n * @function ICAL.stringify.component\n * @param {Array} component\n *        jCal/jCard fragment of a component\n * @param {designSet} designSet\n *        The design data to use for this component\n * @return {String}       The iCalendar/vCard string\n */ stringify.component = function(component, designSet) {\n    let name = component[0].toUpperCase();\n    let result = \"BEGIN:\" + name + LINE_ENDING;\n    let props = component[1];\n    let propIdx = 0;\n    let propLen = props.length;\n    let designSetName = component[0];\n    // rfc6350 requires that in vCard 4.0 the first component is the VERSION\n    // component with as value 4.0, note that 3.0 does not have this requirement.\n    if (designSetName === \"vcard\" && component[1].length > 0 && !(component[1][0][0] === \"version\" && component[1][0][3] === \"4.0\")) {\n        designSetName = \"vcard3\";\n    }\n    designSet = designSet || design$1.getDesignSet(designSetName);\n    for(; propIdx < propLen; propIdx++){\n        result += stringify.property(props[propIdx], designSet) + LINE_ENDING;\n    }\n    // Ignore subcomponents if none exist, e.g. in vCard.\n    let comps = component[2] || [];\n    let compIdx = 0;\n    let compLen = comps.length;\n    for(; compIdx < compLen; compIdx++){\n        result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;\n    }\n    result += \"END:\" + name;\n    return result;\n};\n/**\n * Converts a single jCal/jCard property to a iCalendar/vCard string.\n *\n * @function ICAL.stringify.property\n * @param {Array} property\n *        jCal/jCard property array\n * @param {designSet} designSet\n *        The design data to use for this property\n * @param {Boolean} noFold\n *        If true, the line is not folded\n * @return {String}       The iCalendar/vCard string\n */ stringify.property = function(property, designSet, noFold) {\n    let name = property[0].toUpperCase();\n    let jsName = property[0];\n    let params = property[1];\n    if (!designSet) {\n        designSet = design$1.defaultSet;\n    }\n    let groupName = params.group;\n    let line;\n    if (designSet.propertyGroups && groupName) {\n        line = groupName.toUpperCase() + \".\" + name;\n    } else {\n        line = name;\n    }\n    for (let [paramName, value] of Object.entries(params)){\n        if (designSet.propertyGroups && paramName == \"group\") {\n            continue;\n        }\n        let paramDesign = designSet.param[paramName];\n        let multiValue = paramDesign && paramDesign.multiValue;\n        if (multiValue && Array.isArray(value)) {\n            value = value.map(function(val) {\n                val = stringify._rfc6868Unescape(val);\n                val = stringify.paramPropertyValue(val, paramDesign.multiValueSeparateDQuote);\n                return val;\n            });\n            value = stringify.multiValue(value, multiValue, \"unknown\", null, designSet);\n        } else {\n            value = stringify._rfc6868Unescape(value);\n            value = stringify.paramPropertyValue(value);\n        }\n        line += \";\" + paramName.toUpperCase() + \"=\" + value;\n    }\n    if (property.length === 3) {\n        // If there are no values, we must assume a blank value\n        return line + \":\";\n    }\n    let valueType = property[2];\n    let propDetails;\n    let multiValue = false;\n    let structuredValue = false;\n    let isDefault = false;\n    if (jsName in designSet.property) {\n        propDetails = designSet.property[jsName];\n        if (\"multiValue\" in propDetails) {\n            multiValue = propDetails.multiValue;\n        }\n        if (\"structuredValue\" in propDetails && Array.isArray(property[3])) {\n            structuredValue = propDetails.structuredValue;\n        }\n        if (\"defaultType\" in propDetails) {\n            if (valueType === propDetails.defaultType) {\n                isDefault = true;\n            }\n        } else {\n            if (valueType === DEFAULT_VALUE_TYPE) {\n                isDefault = true;\n            }\n        }\n    } else {\n        if (valueType === DEFAULT_VALUE_TYPE) {\n            isDefault = true;\n        }\n    }\n    // push the VALUE property if type is not the default\n    // for the current property.\n    if (!isDefault) {\n        // value will never contain ;/:/, so we don't escape it here.\n        line += \";VALUE=\" + valueType.toUpperCase();\n    }\n    line += \":\";\n    if (multiValue && structuredValue) {\n        line += stringify.multiValue(property[3], structuredValue, valueType, multiValue, designSet, structuredValue);\n    } else if (multiValue) {\n        line += stringify.multiValue(property.slice(3), multiValue, valueType, null, designSet, false);\n    } else if (structuredValue) {\n        line += stringify.multiValue(property[3], structuredValue, valueType, null, designSet, structuredValue);\n    } else {\n        line += stringify.value(property[3], valueType, designSet, false);\n    }\n    return noFold ? line : foldline(line);\n};\n/**\n * Handles escaping of property values that may contain:\n *\n *    COLON (:), SEMICOLON (;), or COMMA (,)\n *\n * If any of the above are present the result is wrapped\n * in double quotes.\n *\n * @function ICAL.stringify.paramPropertyValue\n * @param {String} value      Raw property value\n * @param {boolean} force     If value should be escaped even when unnecessary\n * @return {String}           Given or escaped value when needed\n */ stringify.paramPropertyValue = function(value, force) {\n    if (!force && value.indexOf(\",\") === -1 && value.indexOf(\":\") === -1 && value.indexOf(\";\") === -1) {\n        return value;\n    }\n    return '\"' + value + '\"';\n};\n/**\n * Converts an array of ical values into a single\n * string based on a type and a delimiter value (like \",\").\n *\n * @function ICAL.stringify.multiValue\n * @param {Array} values      List of values to convert\n * @param {String} delim      Used to join the values (\",\", \";\", \":\")\n * @param {String} type       Lowecase ical value type\n *        (like boolean, date-time, etc..)\n * @param {?String} innerMulti If set, each value will again be processed\n *        Used for structured values\n * @param {designSet} designSet\n *        The design data to use for this property\n *\n * @return {String}           iCalendar/vCard string for value\n */ stringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {\n    let result = \"\";\n    let len = values.length;\n    let i = 0;\n    for(; i < len; i++){\n        if (innerMulti && Array.isArray(values[i])) {\n            result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);\n        } else {\n            result += stringify.value(values[i], type, designSet, structuredValue);\n        }\n        if (i !== len - 1) {\n            result += delim;\n        }\n    }\n    return result;\n};\n/**\n * Processes a single ical value runs the associated \"toICAL\" method from the\n * design value type if available to convert the value.\n *\n * @function ICAL.stringify.value\n * @param {String|Number} value       A formatted value\n * @param {String} type               Lowercase iCalendar/vCard value type\n *  (like boolean, date-time, etc..)\n * @return {String}                   iCalendar/vCard value for single value\n */ stringify.value = function(value, type, designSet, structuredValue) {\n    if (type in designSet.value && \"toICAL\" in designSet.value[type]) {\n        return designSet.value[type].toICAL(value, structuredValue);\n    }\n    return value;\n};\n/**\n * Internal helper for rfc6868. Exposing this on ICAL.stringify so that\n * hackers can disable the rfc6868 parsing if the really need to.\n *\n * @param {String} val        The value to unescape\n * @return {String}           The escaped value\n */ stringify._rfc6868Unescape = function(val) {\n    return val.replace(/[\\n^\"]/g, function(x) {\n        return RFC6868_REPLACE_MAP[x];\n    });\n};\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ const NAME_INDEX$1 = 0;\nconst PROP_INDEX = 1;\nconst TYPE_INDEX = 2;\nconst VALUE_INDEX = 3;\n/**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */ /**\n * Provides a layer on top of the raw jCal object for manipulating a single property, with its\n * parameters and value.\n *\n * @memberof ICAL\n */ class Property {\n    /**\n   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.\n   *\n   * @param {String} str            The iCalendar string to parse\n   * @param {designSet=} designSet  The design data to use for this property\n   * @return {Property}             The created iCalendar property\n   */ static fromString(str, designSet) {\n        return new Property(parse.property(str, designSet));\n    }\n    /**\n   * Creates a new ICAL.Property instance.\n   *\n   * It is important to note that mutations done in the wrapper directly mutate the jCal object used\n   * to initialize.\n   *\n   * Can also be used to create new properties by passing the name of the property (as a String).\n   *\n   * @param {Array|String} jCal         Raw jCal representation OR the new name of the property\n   * @param {Component=} parent         Parent component\n   */ constructor(jCal, parent){\n        this._parent = parent || null;\n        if (typeof jCal === \"string\") {\n            // We are creating the property by name and need to detect the type\n            this.jCal = [\n                jCal,\n                {},\n                design$1.defaultType\n            ];\n            this.jCal[TYPE_INDEX] = this.getDefaultType();\n        } else {\n            this.jCal = jCal;\n        }\n        this._updateType();\n    }\n    /**\n   * The value type for this property\n   * @type {String}\n   */ get type() {\n        return this.jCal[TYPE_INDEX];\n    }\n    /**\n   * The name of this property, in lowercase.\n   * @type {String}\n   */ get name() {\n        return this.jCal[NAME_INDEX$1];\n    }\n    /**\n   * The parent component for this property.\n   * @type {Component}\n   */ get parent() {\n        return this._parent;\n    }\n    set parent(p) {\n        // Before setting the parent, check if the design set has changed. If it\n        // has, we later need to update the type if it was unknown before.\n        let designSetChanged = !this._parent || p && p._designSet != this._parent._designSet;\n        this._parent = p;\n        if (this.type == design$1.defaultType && designSetChanged) {\n            this.jCal[TYPE_INDEX] = this.getDefaultType();\n            this._updateType();\n        }\n    }\n    /**\n   * The design set for this property, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */ get _designSet() {\n        return this.parent ? this.parent._designSet : design$1.defaultSet;\n    }\n    /**\n   * Updates the type metadata from the current jCal type and design set.\n   *\n   * @private\n   */ _updateType() {\n        let designSet = this._designSet;\n        if (this.type in designSet.value) {\n            if (\"decorate\" in designSet.value[this.type]) {\n                this.isDecorated = true;\n            } else {\n                this.isDecorated = false;\n            }\n            if (this.name in designSet.property) {\n                this.isMultiValue = \"multiValue\" in designSet.property[this.name];\n                this.isStructuredValue = \"structuredValue\" in designSet.property[this.name];\n            }\n        }\n    }\n    /**\n   * Hydrate a single value. The act of hydrating means turning the raw jCal\n   * value into a potentially wrapped object, for example {@link ICAL.Time}.\n   *\n   * @private\n   * @param {Number} index        The index of the value to hydrate\n   * @return {?Object}             The decorated value.\n   */ _hydrateValue(index) {\n        if (this._values && this._values[index]) {\n            return this._values[index];\n        }\n        // for the case where there is no value.\n        if (this.jCal.length <= VALUE_INDEX + index) {\n            return null;\n        }\n        if (this.isDecorated) {\n            if (!this._values) {\n                this._values = [];\n            }\n            return this._values[index] = this._decorate(this.jCal[VALUE_INDEX + index]);\n        } else {\n            return this.jCal[VALUE_INDEX + index];\n        }\n    }\n    /**\n   * Decorate a single value, returning its wrapped object. This is used by\n   * the hydrate function to actually wrap the value.\n   *\n   * @private\n   * @param {?} value         The value to decorate\n   * @return {Object}         The decorated value\n   */ _decorate(value) {\n        return this._designSet.value[this.type].decorate(value, this);\n    }\n    /**\n   * Undecorate a single value, returning its raw jCal data.\n   *\n   * @private\n   * @param {Object} value         The value to undecorate\n   * @return {?}                   The undecorated value\n   */ _undecorate(value) {\n        return this._designSet.value[this.type].undecorate(value, this);\n    }\n    /**\n   * Sets the value at the given index while also hydrating it. The passed\n   * value can either be a decorated or undecorated value.\n   *\n   * @private\n   * @param {?} value             The value to set\n   * @param {Number} index        The index to set it at\n   */ _setDecoratedValue(value, index) {\n        if (!this._values) {\n            this._values = [];\n        }\n        if (typeof value === \"object\" && \"icaltype\" in value) {\n            // decorated value\n            this.jCal[VALUE_INDEX + index] = this._undecorate(value);\n            this._values[index] = value;\n        } else {\n            // undecorated value\n            this.jCal[VALUE_INDEX + index] = value;\n            this._values[index] = this._decorate(value);\n        }\n    }\n    /**\n   * Gets a parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {Array|String}        Parameter value\n   */ getParameter(name) {\n        if (name in this.jCal[PROP_INDEX]) {\n            return this.jCal[PROP_INDEX][name];\n        } else {\n            return undefined;\n        }\n    }\n    /**\n   * Gets first parameter on the property.\n   *\n   * @param {String}        name   Parameter name (lowercase)\n   * @return {String}        Parameter value\n   */ getFirstParameter(name) {\n        let parameters = this.getParameter(name);\n        if (Array.isArray(parameters)) {\n            return parameters[0];\n        }\n        return parameters;\n    }\n    /**\n   * Sets a parameter on the property.\n   *\n   * @param {String}       name     The parameter name\n   * @param {Array|String} value    The parameter value\n   */ setParameter(name, value) {\n        let lcname = name.toLowerCase();\n        if (typeof value === \"string\" && lcname in this._designSet.param && \"multiValue\" in this._designSet.param[lcname]) {\n            value = [\n                value\n            ];\n        }\n        this.jCal[PROP_INDEX][name] = value;\n    }\n    /**\n   * Removes a parameter\n   *\n   * @param {String} name     The parameter name\n   */ removeParameter(name) {\n        delete this.jCal[PROP_INDEX][name];\n    }\n    /**\n   * Get the default type based on this property's name.\n   *\n   * @return {String}     The default type for this property\n   */ getDefaultType() {\n        let name = this.jCal[NAME_INDEX$1];\n        let designSet = this._designSet;\n        if (name in designSet.property) {\n            let details = designSet.property[name];\n            if (\"defaultType\" in details) {\n                return details.defaultType;\n            }\n        }\n        return design$1.defaultType;\n    }\n    /**\n   * Sets type of property and clears out any existing values of the current\n   * type.\n   *\n   * @param {String} type     New iCAL type (see design.*.values)\n   */ resetType(type) {\n        this.removeAllValues();\n        this.jCal[TYPE_INDEX] = type;\n        this._updateType();\n    }\n    /**\n   * Finds the first property value.\n   *\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         First property value\n   */ getFirstValue() {\n        return this._hydrateValue(0);\n    }\n    /**\n   * Gets all values on the property.\n   *\n   * NOTE: this creates an array during each call.\n   *\n   * @return {Array}          List of values\n   */ getValues() {\n        let len = this.jCal.length - VALUE_INDEX;\n        if (len < 1) {\n            // it is possible for a property to have no value.\n            return [];\n        }\n        let i = 0;\n        let result = [];\n        for(; i < len; i++){\n            result[i] = this._hydrateValue(i);\n        }\n        return result;\n    }\n    /**\n   * Removes all values from this property\n   */ removeAllValues() {\n        if (this._values) {\n            this._values.length = 0;\n        }\n        this.jCal.length = 3;\n    }\n    /**\n   * Sets the values of the property.  Will overwrite the existing values.\n   * This can only be used for multi-value properties.\n   *\n   * @param {Array} values    An array of values\n   */ setValues(values) {\n        if (!this.isMultiValue) {\n            throw new Error(this.name + \": does not not support mulitValue.\\n\" + \"override isMultiValue\");\n        }\n        let len = values.length;\n        let i = 0;\n        this.removeAllValues();\n        if (len > 0 && typeof values[0] === \"object\" && \"icaltype\" in values[0]) {\n            this.resetType(values[0].icaltype);\n        }\n        if (this.isDecorated) {\n            for(; i < len; i++){\n                this._setDecoratedValue(values[i], i);\n            }\n        } else {\n            for(; i < len; i++){\n                this.jCal[VALUE_INDEX + i] = values[i];\n            }\n        }\n    }\n    /**\n   * Sets the current value of the property. If this is a multi-value\n   * property, all other values will be removed.\n   *\n   * @param {String|Object} value     New property value.\n   */ setValue(value) {\n        this.removeAllValues();\n        if (typeof value === \"object\" && \"icaltype\" in value) {\n            this.resetType(value.icaltype);\n        }\n        if (this.isDecorated) {\n            this._setDecoratedValue(value, 0);\n        } else {\n            this.jCal[VALUE_INDEX] = value;\n        }\n    }\n    /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */ toJSON() {\n        return this.jCal;\n    }\n    /**\n   * The string representation of this component.\n   * @return {String}\n   */ toICALString() {\n        return stringify.property(this.jCal, this._designSet, true);\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").designSet} designSet\n * Imports the 'designSet' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").Geo} Geo\n * Imports the 'Geo' type from the \"types.js\" module\n */ const NAME_INDEX = 0;\nconst PROPERTY_INDEX = 1;\nconst COMPONENT_INDEX = 2;\n/**\n * Wraps a jCal component, adding convenience methods to add, remove and update subcomponents and\n * properties.\n *\n * @memberof ICAL\n */ class Component {\n    /**\n   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.\n   *\n   * @param {String} str        The iCalendar string to parse\n   */ static fromString(str) {\n        return new Component(parse.component(str));\n    }\n    /**\n   * Creates a new Component instance.\n   *\n   * @param {Array|String} jCal         Raw jCal component data OR name of new\n   *                                      component\n   * @param {Component=} parent     Parent component to associate\n   */ constructor(jCal, parent){\n        /**\n   * Hydrated properties are inserted into the _properties array at the same\n   * position as in the jCal array, so it is possible that the array contains\n   * undefined values for unhydrdated properties. To avoid iterating the\n   * array when checking if all properties have been hydrated, we save the\n   * count here.\n   *\n   * @type {Number}\n   * @private\n   */ this._hydratedPropertyCount = 0;\n        /**\n   * The same count as for _hydratedPropertyCount, but for subcomponents\n   *\n   * @type {Number}\n   * @private\n   */ this._hydratedComponentCount = 0;\n        /**\n   * A cache of hydrated time zone objects which may be used by consumers, keyed\n   * by time zone ID.\n   *\n   * @type {Map}\n   * @private\n   */ this._timezoneCache = null;\n        /**\n   * @private\n   */ this._components = null;\n        /**\n   * @private\n   */ this._properties = null;\n        if (typeof jCal === \"string\") {\n            // jCal spec (name, properties, components)\n            jCal = [\n                jCal,\n                [],\n                []\n            ];\n        }\n        // mostly for legacy reasons.\n        this.jCal = jCal;\n        this.parent = parent || null;\n        if (!this.parent && this.name === \"vcalendar\") {\n            this._timezoneCache = new Map();\n        }\n    }\n    /**\n   * The name of this component\n   *\n   * @type {String}\n   */ get name() {\n        return this.jCal[NAME_INDEX];\n    }\n    /**\n   * The design set for this component, e.g. icalendar vs vcard\n   *\n   * @type {designSet}\n   * @private\n   */ get _designSet() {\n        let parentDesign = this.parent && this.parent._designSet;\n        return parentDesign || design$1.getDesignSet(this.name);\n    }\n    /**\n   * @private\n   */ _hydrateComponent(index) {\n        if (!this._components) {\n            this._components = [];\n            this._hydratedComponentCount = 0;\n        }\n        if (this._components[index]) {\n            return this._components[index];\n        }\n        let comp = new Component(this.jCal[COMPONENT_INDEX][index], this);\n        this._hydratedComponentCount++;\n        return this._components[index] = comp;\n    }\n    /**\n   * @private\n   */ _hydrateProperty(index) {\n        if (!this._properties) {\n            this._properties = [];\n            this._hydratedPropertyCount = 0;\n        }\n        if (this._properties[index]) {\n            return this._properties[index];\n        }\n        let prop = new Property(this.jCal[PROPERTY_INDEX][index], this);\n        this._hydratedPropertyCount++;\n        return this._properties[index] = prop;\n    }\n    /**\n   * Finds first sub component, optionally filtered by name.\n   *\n   * @param {String=} name        Optional name to filter by\n   * @return {?Component}     The found subcomponent\n   */ getFirstSubcomponent(name) {\n        if (name) {\n            let i = 0;\n            let comps = this.jCal[COMPONENT_INDEX];\n            let len = comps.length;\n            for(; i < len; i++){\n                if (comps[i][NAME_INDEX] === name) {\n                    let result = this._hydrateComponent(i);\n                    return result;\n                }\n            }\n        } else {\n            if (this.jCal[COMPONENT_INDEX].length) {\n                return this._hydrateComponent(0);\n            }\n        }\n        // ensure we return a value (strict mode)\n        return null;\n    }\n    /**\n   * Finds all sub components, optionally filtering by name.\n   *\n   * @param {String=} name            Optional name to filter by\n   * @return {Component[]}       The found sub components\n   */ getAllSubcomponents(name) {\n        let jCalLen = this.jCal[COMPONENT_INDEX].length;\n        let i = 0;\n        if (name) {\n            let comps = this.jCal[COMPONENT_INDEX];\n            let result = [];\n            for(; i < jCalLen; i++){\n                if (name === comps[i][NAME_INDEX]) {\n                    result.push(this._hydrateComponent(i));\n                }\n            }\n            return result;\n        } else {\n            if (!this._components || this._hydratedComponentCount !== jCalLen) {\n                for(; i < jCalLen; i++){\n                    this._hydrateComponent(i);\n                }\n            }\n            return this._components || [];\n        }\n    }\n    /**\n   * Returns true when a named property exists.\n   *\n   * @param {String} name     The property name\n   * @return {Boolean}        True, when property is found\n   */ hasProperty(name) {\n        let props = this.jCal[PROPERTY_INDEX];\n        let len = props.length;\n        let i = 0;\n        for(; i < len; i++){\n            // 0 is property name\n            if (props[i][NAME_INDEX] === name) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * Finds the first property, optionally with the given name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {?Property}     The found property\n   */ getFirstProperty(name) {\n        if (name) {\n            let i = 0;\n            let props = this.jCal[PROPERTY_INDEX];\n            let len = props.length;\n            for(; i < len; i++){\n                if (props[i][NAME_INDEX] === name) {\n                    let result = this._hydrateProperty(i);\n                    return result;\n                }\n            }\n        } else {\n            if (this.jCal[PROPERTY_INDEX].length) {\n                return this._hydrateProperty(0);\n            }\n        }\n        return null;\n    }\n    /**\n   * Returns first property's value, if available.\n   *\n   * @param {String=} name                    Lowercase property name\n   * @return {Binary | Duration | Period |\n   * Recur | Time | UtcOffset | Geo | string | null}         The found property value.\n   */ getFirstPropertyValue(name) {\n        let prop = this.getFirstProperty(name);\n        if (prop) {\n            return prop.getFirstValue();\n        }\n        return null;\n    }\n    /**\n   * Get all properties in the component, optionally filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Property[]}    List of properties\n   */ getAllProperties(name) {\n        let jCalLen = this.jCal[PROPERTY_INDEX].length;\n        let i = 0;\n        if (name) {\n            let props = this.jCal[PROPERTY_INDEX];\n            let result = [];\n            for(; i < jCalLen; i++){\n                if (name === props[i][NAME_INDEX]) {\n                    result.push(this._hydrateProperty(i));\n                }\n            }\n            return result;\n        } else {\n            if (!this._properties || this._hydratedPropertyCount !== jCalLen) {\n                for(; i < jCalLen; i++){\n                    this._hydrateProperty(i);\n                }\n            }\n            return this._properties || [];\n        }\n    }\n    /**\n   * @private\n   */ _removeObjectByIndex(jCalIndex, cache, index) {\n        cache = cache || [];\n        // remove cached version\n        if (cache[index]) {\n            let obj = cache[index];\n            if (\"parent\" in obj) {\n                obj.parent = null;\n            }\n        }\n        cache.splice(index, 1);\n        // remove it from the jCal\n        this.jCal[jCalIndex].splice(index, 1);\n    }\n    /**\n   * @private\n   */ _removeObject(jCalIndex, cache, nameOrObject) {\n        let i = 0;\n        let objects = this.jCal[jCalIndex];\n        let len = objects.length;\n        let cached = this[cache];\n        if (typeof nameOrObject === \"string\") {\n            for(; i < len; i++){\n                if (objects[i][NAME_INDEX] === nameOrObject) {\n                    this._removeObjectByIndex(jCalIndex, cached, i);\n                    return true;\n                }\n            }\n        } else if (cached) {\n            for(; i < len; i++){\n                if (cached[i] && cached[i] === nameOrObject) {\n                    this._removeObjectByIndex(jCalIndex, cached, i);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n   * @private\n   */ _removeAllObjects(jCalIndex, cache, name) {\n        let cached = this[cache];\n        // Unfortunately we have to run through all children to reset their\n        // parent property.\n        let objects = this.jCal[jCalIndex];\n        let i = objects.length - 1;\n        // descending search required because splice\n        // is used and will effect the indices.\n        for(; i >= 0; i--){\n            if (!name || objects[i][NAME_INDEX] === name) {\n                this._removeObjectByIndex(jCalIndex, cached, i);\n            }\n        }\n    }\n    /**\n   * Adds a single sub component.\n   *\n   * @param {Component} component        The component to add\n   * @return {Component}                 The passed in component\n   */ addSubcomponent(component) {\n        if (!this._components) {\n            this._components = [];\n            this._hydratedComponentCount = 0;\n        }\n        if (component.parent) {\n            component.parent.removeSubcomponent(component);\n        }\n        let idx = this.jCal[COMPONENT_INDEX].push(component.jCal);\n        this._components[idx - 1] = component;\n        this._hydratedComponentCount++;\n        component.parent = this;\n        return component;\n    }\n    /**\n   * Removes a single component by name or the instance of a specific\n   * component.\n   *\n   * @param {Component|String} nameOrComp    Name of component, or component\n   * @return {Boolean}                            True when comp is removed\n   */ removeSubcomponent(nameOrComp) {\n        let removed = this._removeObject(COMPONENT_INDEX, \"_components\", nameOrComp);\n        if (removed) {\n            this._hydratedComponentCount--;\n        }\n        return removed;\n    }\n    /**\n   * Removes all components or (if given) all components by a particular\n   * name.\n   *\n   * @param {String=} name            Lowercase component name\n   */ removeAllSubcomponents(name) {\n        let removed = this._removeAllObjects(COMPONENT_INDEX, \"_components\", name);\n        this._hydratedComponentCount = 0;\n        return removed;\n    }\n    /**\n   * Adds an {@link ICAL.Property} to the component.\n   *\n   * @param {Property} property      The property to add\n   * @return {Property}              The passed in property\n   */ addProperty(property) {\n        if (!(property instanceof Property)) {\n            throw new TypeError(\"must be instance of ICAL.Property\");\n        }\n        if (!this._properties) {\n            this._properties = [];\n            this._hydratedPropertyCount = 0;\n        }\n        if (property.parent) {\n            property.parent.removeProperty(property);\n        }\n        let idx = this.jCal[PROPERTY_INDEX].push(property.jCal);\n        this._properties[idx - 1] = property;\n        this._hydratedPropertyCount++;\n        property.parent = this;\n        return property;\n    }\n    /**\n   * Helper method to add a property with a value to the component.\n   *\n   * @param {String}               name         Property name to add\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */ addPropertyWithValue(name, value) {\n        let prop = new Property(name);\n        prop.setValue(value);\n        this.addProperty(prop);\n        return prop;\n    }\n    /**\n   * Helper method that will update or create a property of the given name\n   * and sets its value. If multiple properties with the given name exist,\n   * only the first is updated.\n   *\n   * @param {String}               name         Property name to update\n   * @param {String|Number|Object} value        Property value\n   * @return {Property}                    The created property\n   */ updatePropertyWithValue(name, value) {\n        let prop = this.getFirstProperty(name);\n        if (prop) {\n            prop.setValue(value);\n        } else {\n            prop = this.addPropertyWithValue(name, value);\n        }\n        return prop;\n    }\n    /**\n   * Removes a single property by name or the instance of the specific\n   * property.\n   *\n   * @param {String|Property} nameOrProp     Property name or instance to remove\n   * @return {Boolean}                            True, when deleted\n   */ removeProperty(nameOrProp) {\n        let removed = this._removeObject(PROPERTY_INDEX, \"_properties\", nameOrProp);\n        if (removed) {\n            this._hydratedPropertyCount--;\n        }\n        return removed;\n    }\n    /**\n   * Removes all properties associated with this component, optionally\n   * filtered by name.\n   *\n   * @param {String=} name        Lowercase property name\n   * @return {Boolean}            True, when deleted\n   */ removeAllProperties(name) {\n        let removed = this._removeAllObjects(PROPERTY_INDEX, \"_properties\", name);\n        this._hydratedPropertyCount = 0;\n        return removed;\n    }\n    /**\n   * Returns the Object representation of this component. The returned object\n   * is a live jCal object and should be cloned if modified.\n   * @return {Object}\n   */ toJSON() {\n        return this.jCal;\n    }\n    /**\n   * The string representation of this component.\n   * @return {String}\n   */ toString() {\n        return stringify.component(this.jCal, this._designSet);\n    }\n    /**\n   * Retrieve a time zone definition from the component tree, if any is present.\n   * If the tree contains no time zone definitions or the TZID cannot be\n   * matched, returns null.\n   *\n   * @param {String} tzid     The ID of the time zone to retrieve\n   * @return {Timezone}  The time zone corresponding to the ID, or null\n   */ getTimeZoneByID(tzid) {\n        // VTIMEZONE components can only appear as a child of the VCALENDAR\n        // component; walk the tree if we're not the root.\n        if (this.parent) {\n            return this.parent.getTimeZoneByID(tzid);\n        }\n        // If there is no time zone cache, we are probably parsing an incomplete\n        // file and will have no time zone definitions.\n        if (!this._timezoneCache) {\n            return null;\n        }\n        if (this._timezoneCache.has(tzid)) {\n            return this._timezoneCache.get(tzid);\n        }\n        // If the time zone is not already cached, hydrate it from the\n        // subcomponents.\n        const zones = this.getAllSubcomponents(\"vtimezone\");\n        for (const zone of zones){\n            if (zone.getFirstProperty(\"tzid\").getFirstValue() === tzid) {\n                const hydratedZone = new Timezone({\n                    component: zone,\n                    tzid: tzid\n                });\n                this._timezoneCache.set(tzid, hydratedZone);\n                return hydratedZone;\n            }\n        }\n        // Per the standard, we should always have a time zone defined in a file\n        // for any referenced TZID, but don't blow up if the file is invalid.\n        return null;\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * Primary class for expanding recurring rules.  Can take multiple rrules, rdates, exdate(s) and\n * iterate (in order) over each next occurrence.\n *\n * Once initialized this class can also be serialized saved and continue iteration from the last\n * point.\n *\n * NOTE: it is intended that this class is to be used with {@link ICAL.Event} which handles recurrence\n * exceptions.\n *\n * @example\n * // assuming event is a parsed ical component\n * var event;\n *\n * var expand = new ICAL.RecurExpansion({\n *   component: event,\n *   dtstart: event.getFirstPropertyValue('dtstart')\n * });\n *\n * // remember there are infinite rules so it is a good idea to limit the scope of the iterations\n * // then resume later on.\n *\n * // next is always an ICAL.Time or null\n * var next;\n *\n * while (someCondition && (next = expand.next())) {\n *   // do something with next\n * }\n *\n * // save instance for later\n * var json = JSON.stringify(expand);\n *\n * //...\n *\n * // NOTE: if the component's properties have changed you will need to rebuild the class and start\n * // over. This only works when the component's recurrence info is the same.\n * var expand = new ICAL.RecurExpansion(JSON.parse(json));\n *\n * @memberof ICAL\n */ class RecurExpansion {\n    /**\n   * Creates a new ICAL.RecurExpansion instance.\n   *\n   * The options object can be filled with the specified initial values. It can also contain\n   * additional members, as a result of serializing a previous expansion state, as shown in the\n   * example.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */ constructor(options){\n        /**\n   * True when iteration is fully completed.\n   * @type {Boolean}\n   */ this.complete = false;\n        /**\n   * Array of rrule iterators.\n   *\n   * @type {RecurIterator[]}\n   * @private\n   */ this.ruleIterators = null;\n        /**\n   * Array of rdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */ this.ruleDates = null;\n        /**\n   * Array of exdate instances.\n   *\n   * @type {Time[]}\n   * @private\n   */ this.exDates = null;\n        /**\n   * Current position in ruleDates array.\n   * @type {Number}\n   * @private\n   */ this.ruleDateInc = 0;\n        /**\n   * Current position in exDates array\n   * @type {Number}\n   * @private\n   */ this.exDateInc = 0;\n        /**\n   * Current negative date.\n   *\n   * @type {Time}\n   * @private\n   */ this.exDate = null;\n        /**\n   * Current additional date.\n   *\n   * @type {Time}\n   * @private\n   */ this.ruleDate = null;\n        /**\n   * Start date of recurring rules.\n   *\n   * @type {Time}\n   */ this.dtstart = null;\n        /**\n   * Last expanded time\n   *\n   * @type {Time}\n   */ this.last = null;\n        this.ruleDates = [];\n        this.exDates = [];\n        this.fromData(options);\n    }\n    /**\n   * Initialize the recurrence expansion from the data object. The options\n   * object may also contain additional members, see the\n   * {@link ICAL.RecurExpansion constructor} for more details.\n   *\n   * @param {Object} options\n   *        Recurrence expansion options\n   * @param {Time} options.dtstart\n   *        Start time of the event\n   * @param {Component=} options.component\n   *        Component for expansion, required if not resuming.\n   */ fromData(options) {\n        let start = formatClassType(options.dtstart, Time);\n        if (!start) {\n            throw new Error(\".dtstart (ICAL.Time) must be given\");\n        } else {\n            this.dtstart = start;\n        }\n        if (options.component) {\n            this._init(options.component);\n        } else {\n            this.last = formatClassType(options.last, Time) || start.clone();\n            if (!options.ruleIterators) {\n                throw new Error(\".ruleIterators or .component must be given\");\n            }\n            this.ruleIterators = options.ruleIterators.map(function(item) {\n                return formatClassType(item, RecurIterator);\n            });\n            this.ruleDateInc = options.ruleDateInc;\n            this.exDateInc = options.exDateInc;\n            if (options.ruleDates) {\n                this.ruleDates = options.ruleDates.map((item)=>formatClassType(item, Time));\n                this.ruleDate = this.ruleDates[this.ruleDateInc];\n            }\n            if (options.exDates) {\n                this.exDates = options.exDates.map((item)=>formatClassType(item, Time));\n                this.exDate = this.exDates[this.exDateInc];\n            }\n            if (typeof options.complete !== \"undefined\") {\n                this.complete = options.complete;\n            }\n        }\n    }\n    /**\n   * Retrieve the next occurrence in the series.\n   * @return {Time}\n   */ next() {\n        let iter;\n        let next;\n        let compare;\n        let maxTries = 500;\n        let currentTry = 0;\n        while(true){\n            if (currentTry++ > maxTries) {\n                throw new Error(\"max tries have occurred, rule may be impossible to fulfill.\");\n            }\n            next = this.ruleDate;\n            iter = this._nextRecurrenceIter(this.last);\n            // no more matches\n            // because we increment the rule day or rule\n            // _after_ we choose a value this should be\n            // the only spot where we need to worry about the\n            // end of events.\n            if (!next && !iter) {\n                // there are no more iterators or rdates\n                this.complete = true;\n                break;\n            }\n            // no next rule day or recurrence rule is first.\n            if (!next || iter && next.compare(iter.last) > 0) {\n                // must be cloned, recur will reuse the time element.\n                next = iter.last.clone();\n                // move to next so we can continue\n                iter.next();\n            }\n            // if the ruleDate is still next increment it.\n            if (this.ruleDate === next) {\n                this._nextRuleDay();\n            }\n            this.last = next;\n            // check the negative rules\n            if (this.exDate) {\n                compare = this.exDate.compare(this.last);\n                if (compare < 0) {\n                    this._nextExDay();\n                }\n                // if the current rule is excluded skip it.\n                if (compare === 0) {\n                    this._nextExDay();\n                    continue;\n                }\n            }\n            //XXX: The spec states that after we resolve the final\n            //     list of dates we execute exdate this seems somewhat counter\n            //     intuitive to what I have seen most servers do so for now\n            //     I exclude based on the original date not the one that may\n            //     have been modified by the exception.\n            return this.last;\n        }\n    }\n    /**\n   * Converts object into a serialize-able format. This format can be passed\n   * back into the expansion to resume iteration.\n   * @return {Object}\n   */ toJSON() {\n        function toJSON(item) {\n            return item.toJSON();\n        }\n        let result = Object.create(null);\n        result.ruleIterators = this.ruleIterators.map(toJSON);\n        if (this.ruleDates) {\n            result.ruleDates = this.ruleDates.map(toJSON);\n        }\n        if (this.exDates) {\n            result.exDates = this.exDates.map(toJSON);\n        }\n        result.ruleDateInc = this.ruleDateInc;\n        result.exDateInc = this.exDateInc;\n        result.last = this.last.toJSON();\n        result.dtstart = this.dtstart.toJSON();\n        result.complete = this.complete;\n        return result;\n    }\n    /**\n   * Extract all dates from the properties in the given component. The\n   * properties will be filtered by the property name.\n   *\n   * @private\n   * @param {Component} component             The component to search in\n   * @param {String} propertyName             The property name to search for\n   * @return {Time[]}                         The extracted dates.\n   */ _extractDates(component, propertyName) {\n        let result = [];\n        let props = component.getAllProperties(propertyName);\n        for(let i = 0, len = props.length; i < len; i++){\n            for (let prop of props[i].getValues()){\n                let idx = binsearchInsert(result, prop, (a, b)=>a.compare(b));\n                // ordered insert\n                result.splice(idx, 0, prop);\n            }\n        }\n        return result;\n    }\n    /**\n   * Initialize the recurrence expansion.\n   *\n   * @private\n   * @param {Component} component    The component to initialize from.\n   */ _init(component) {\n        this.ruleIterators = [];\n        this.last = this.dtstart.clone();\n        // to provide api consistency non-recurring\n        // events can also use the iterator though it will\n        // only return a single time.\n        if (!component.hasProperty(\"rdate\") && !component.hasProperty(\"rrule\") && !component.hasProperty(\"recurrence-id\")) {\n            this.ruleDate = this.last.clone();\n            this.complete = true;\n            return;\n        }\n        if (component.hasProperty(\"rdate\")) {\n            this.ruleDates = this._extractDates(component, \"rdate\");\n            // special hack for cases where first rdate is prior\n            // to the start date. We only check for the first rdate.\n            // This is mostly for google's crazy recurring date logic\n            // (contacts birthdays).\n            if (this.ruleDates[0] && this.ruleDates[0].compare(this.dtstart) < 0) {\n                this.ruleDateInc = 0;\n                this.last = this.ruleDates[0].clone();\n            } else {\n                this.ruleDateInc = binsearchInsert(this.ruleDates, this.last, (a, b)=>a.compare(b));\n            }\n            this.ruleDate = this.ruleDates[this.ruleDateInc];\n        }\n        if (component.hasProperty(\"rrule\")) {\n            let rules = component.getAllProperties(\"rrule\");\n            let i = 0;\n            let len = rules.length;\n            let rule;\n            let iter;\n            for(; i < len; i++){\n                rule = rules[i].getFirstValue();\n                iter = rule.iterator(this.dtstart);\n                this.ruleIterators.push(iter);\n                // increment to the next occurrence so future\n                // calls to next return times beyond the initial iteration.\n                // XXX: I find this suspicious might be a bug?\n                iter.next();\n            }\n        }\n        if (component.hasProperty(\"exdate\")) {\n            this.exDates = this._extractDates(component, \"exdate\");\n            // if we have a .last day we increment the index to beyond it.\n            this.exDateInc = binsearchInsert(this.exDates, this.last, (a, b)=>a.compare(b));\n            this.exDate = this.exDates[this.exDateInc];\n        }\n    }\n    /**\n   * Advance to the next exdate\n   * @private\n   */ _nextExDay() {\n        this.exDate = this.exDates[++this.exDateInc];\n    }\n    /**\n   * Advance to the next rule date\n   * @private\n   */ _nextRuleDay() {\n        this.ruleDate = this.ruleDates[++this.ruleDateInc];\n    }\n    /**\n   * Find and return the recurrence rule with the most recent event and\n   * return it.\n   *\n   * @private\n   * @return {?RecurIterator}    Found iterator.\n   */ _nextRecurrenceIter() {\n        let iters = this.ruleIterators;\n        if (iters.length === 0) {\n            return null;\n        }\n        let len = iters.length;\n        let iter;\n        let iterTime;\n        let iterIdx = 0;\n        let chosenIter;\n        // loop through each iterator\n        for(; iterIdx < len; iterIdx++){\n            iter = iters[iterIdx];\n            iterTime = iter.last;\n            // if iteration is complete\n            // then we must exclude it from\n            // the search and remove it.\n            if (iter.completed) {\n                len--;\n                if (iterIdx !== 0) {\n                    iterIdx--;\n                }\n                iters.splice(iterIdx, 1);\n                continue;\n            }\n            // find the most recent possible choice\n            if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {\n                // that iterator is saved\n                chosenIter = iter;\n            }\n        }\n        // the chosen iterator is returned but not mutated\n        // this iterator contains the most recent event.\n        return chosenIter;\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * This lets typescript resolve our custom types in the\n * generated d.ts files (jsdoc typedefs are converted to typescript types).\n * Ignore prevents the typedefs from being documented more than once.\n * @ignore\n * @typedef {import(\"./types.js\").frequencyValues} frequencyValues\n * Imports the 'frequencyValues' type from the \"types.js\" module\n * @typedef {import(\"./types.js\").occurrenceDetails} occurrenceDetails\n * Imports the 'occurrenceDetails' type from the \"types.js\" module\n */ /**\n * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal\n * object, followed by the component/property layer. The highest level is the\n * event representation, which this class is part of. See the\n * {@tutorial layers} guide for more details.\n *\n * @memberof ICAL\n */ class Event {\n    /**\n   * Creates a new ICAL.Event instance.\n   *\n   * @param {Component=} component              The ICAL.Component to base this event on\n   * @param {Object} [options]                  Options for this event\n   * @param {Boolean=} options.strictExceptions  When true, will verify exceptions are related by\n   *                                              their UUID\n   * @param {Array<Component|Event>=} options.exceptions\n   *          Exceptions to this event, either as components or events. If not\n   *            specified exceptions will automatically be set in relation of\n   *            component's parent\n   */ constructor(component, options){\n        /**\n   * List of related event exceptions.\n   *\n   * @type {Event[]}\n   */ this.exceptions = null;\n        /**\n   * When true, will verify exceptions are related by their UUID.\n   *\n   * @type {Boolean}\n   */ this.strictExceptions = false;\n        if (!(component instanceof Component)) {\n            options = component;\n            component = null;\n        }\n        if (component) {\n            this.component = component;\n        } else {\n            this.component = new Component(\"vevent\");\n        }\n        this._rangeExceptionCache = Object.create(null);\n        this.exceptions = Object.create(null);\n        this.rangeExceptions = [];\n        if (options && options.strictExceptions) {\n            this.strictExceptions = options.strictExceptions;\n        }\n        if (options && options.exceptions) {\n            options.exceptions.forEach(this.relateException, this);\n        } else if (this.component.parent && !this.isRecurrenceException()) {\n            this.component.parent.getAllSubcomponents(\"vevent\").forEach(function(event) {\n                if (event.hasProperty(\"recurrence-id\")) {\n                    this.relateException(event);\n                }\n            }, this);\n        }\n    }\n    static{\n        this.THISANDFUTURE = \"THISANDFUTURE\";\n    }\n    /**\n   * Relates a given event exception to this object.  If the given component\n   * does not share the UID of this event it cannot be related and will throw\n   * an exception.\n   *\n   * If this component is an exception it cannot have other exceptions\n   * related to it.\n   *\n   * @param {Component|Event} obj       Component or event\n   */ relateException(obj) {\n        if (this.isRecurrenceException()) {\n            throw new Error(\"cannot relate exception to exceptions\");\n        }\n        if (obj instanceof Component) {\n            obj = new Event(obj);\n        }\n        if (this.strictExceptions && obj.uid !== this.uid) {\n            throw new Error(\"attempted to relate unrelated exception\");\n        }\n        let id = obj.recurrenceId.toString();\n        // we don't sort or manage exceptions directly\n        // here the recurrence expander handles that.\n        this.exceptions[id] = obj;\n        // index RANGE=THISANDFUTURE exceptions so we can\n        // look them up later in getOccurrenceDetails.\n        if (obj.modifiesFuture()) {\n            let item = [\n                obj.recurrenceId.toUnixTime(),\n                id\n            ];\n            // we keep them sorted so we can find the nearest\n            // value later on...\n            let idx = binsearchInsert(this.rangeExceptions, item, compareRangeException);\n            this.rangeExceptions.splice(idx, 0, item);\n        }\n    }\n    /**\n   * Checks if this record is an exception and has the RANGE=THISANDFUTURE\n   * value.\n   *\n   * @return {Boolean}        True, when exception is within range\n   */ modifiesFuture() {\n        if (!this.component.hasProperty(\"recurrence-id\")) {\n            return false;\n        }\n        let range = this.component.getFirstProperty(\"recurrence-id\").getParameter(\"range\");\n        return range === Event.THISANDFUTURE;\n    }\n    /**\n   * Finds the range exception nearest to the given date.\n   *\n   * @param {Time} time   usually an occurrence time of an event\n   * @return {?Event}     the related event/exception or null\n   */ findRangeException(time) {\n        if (!this.rangeExceptions.length) {\n            return null;\n        }\n        let utc = time.toUnixTime();\n        let idx = binsearchInsert(this.rangeExceptions, [\n            utc\n        ], compareRangeException);\n        idx -= 1;\n        // occurs before\n        if (idx < 0) {\n            return null;\n        }\n        let rangeItem = this.rangeExceptions[idx];\n        /* c8 ignore next 4 */ if (utc < rangeItem[0]) {\n            // sanity check only\n            return null;\n        }\n        return rangeItem[1];\n    }\n    /**\n   * Returns the occurrence details based on its start time.  If the\n   * occurrence has an exception will return the details for that exception.\n   *\n   * NOTE: this method is intend to be used in conjunction\n   *       with the {@link ICAL.Event#iterator iterator} method.\n   *\n   * @param {Time} occurrence               time occurrence\n   * @return {occurrenceDetails}            Information about the occurrence\n   */ getOccurrenceDetails(occurrence) {\n        let id = occurrence.toString();\n        let utcId = occurrence.convertToZone(Timezone.utcTimezone).toString();\n        let item;\n        let result = {\n            //XXX: Clone?\n            recurrenceId: occurrence\n        };\n        if (id in this.exceptions) {\n            item = result.item = this.exceptions[id];\n            result.startDate = item.startDate;\n            result.endDate = item.endDate;\n            result.item = item;\n        } else if (utcId in this.exceptions) {\n            item = this.exceptions[utcId];\n            result.startDate = item.startDate;\n            result.endDate = item.endDate;\n            result.item = item;\n        } else {\n            // range exceptions (RANGE=THISANDFUTURE) have a\n            // lower priority then direct exceptions but\n            // must be accounted for first. Their item is\n            // always the first exception with the range prop.\n            let rangeExceptionId = this.findRangeException(occurrence);\n            let end;\n            if (rangeExceptionId) {\n                let exception = this.exceptions[rangeExceptionId];\n                // range exception must modify standard time\n                // by the difference (if any) in start/end times.\n                result.item = exception;\n                let startDiff = this._rangeExceptionCache[rangeExceptionId];\n                if (!startDiff) {\n                    let original = exception.recurrenceId.clone();\n                    let newStart = exception.startDate.clone();\n                    // zones must be same otherwise subtract may be incorrect.\n                    original.zone = newStart.zone;\n                    startDiff = newStart.subtractDate(original);\n                    this._rangeExceptionCache[rangeExceptionId] = startDiff;\n                }\n                let start = occurrence.clone();\n                start.zone = exception.startDate.zone;\n                start.addDuration(startDiff);\n                end = start.clone();\n                end.addDuration(exception.duration);\n                result.startDate = start;\n                result.endDate = end;\n            } else {\n                // no range exception standard expansion\n                end = occurrence.clone();\n                end.addDuration(this.duration);\n                result.endDate = end;\n                result.startDate = occurrence;\n                result.item = this;\n            }\n        }\n        return result;\n    }\n    /**\n   * Builds a recur expansion instance for a specific point in time (defaults\n   * to startDate).\n   *\n   * @param {Time=} startTime     Starting point for expansion\n   * @return {RecurExpansion}    Expansion object\n   */ iterator(startTime) {\n        return new RecurExpansion({\n            component: this.component,\n            dtstart: startTime || this.startDate\n        });\n    }\n    /**\n   * Checks if the event is recurring\n   *\n   * @return {Boolean}        True, if event is recurring\n   */ isRecurring() {\n        let comp = this.component;\n        return comp.hasProperty(\"rrule\") || comp.hasProperty(\"rdate\");\n    }\n    /**\n   * Checks if the event describes a recurrence exception. See\n   * {@tutorial terminology} for details.\n   *\n   * @return {Boolean}    True, if the event describes a recurrence exception\n   */ isRecurrenceException() {\n        return this.component.hasProperty(\"recurrence-id\");\n    }\n    /**\n   * Returns the types of recurrences this event may have.\n   *\n   * Returned as an object with the following possible keys:\n   *\n   *    - YEARLY\n   *    - MONTHLY\n   *    - WEEKLY\n   *    - DAILY\n   *    - MINUTELY\n   *    - SECONDLY\n   *\n   * @return {Object.<frequencyValues, Boolean>}\n   *          Object of recurrence flags\n   */ getRecurrenceTypes() {\n        let rules = this.component.getAllProperties(\"rrule\");\n        let i = 0;\n        let len = rules.length;\n        let result = Object.create(null);\n        for(; i < len; i++){\n            let value = rules[i].getFirstValue();\n            result[value.freq] = true;\n        }\n        return result;\n    }\n    /**\n   * The uid of this event\n   * @type {String}\n   */ get uid() {\n        return this._firstProp(\"uid\");\n    }\n    set uid(value) {\n        this._setProp(\"uid\", value);\n    }\n    /**\n   * The start date\n   * @type {Time}\n   */ get startDate() {\n        return this._firstProp(\"dtstart\");\n    }\n    set startDate(value) {\n        this._setTime(\"dtstart\", value);\n    }\n    /**\n   * The end date. This can be the result directly from the property, or the\n   * end date calculated from start date and duration. Setting the property\n   * will remove any duration properties.\n   * @type {Time}\n   */ get endDate() {\n        let endDate = this._firstProp(\"dtend\");\n        if (!endDate) {\n            let duration = this._firstProp(\"duration\");\n            endDate = this.startDate.clone();\n            if (duration) {\n                endDate.addDuration(duration);\n            } else if (endDate.isDate) {\n                endDate.day += 1;\n            }\n        }\n        return endDate;\n    }\n    set endDate(value) {\n        if (this.component.hasProperty(\"duration\")) {\n            this.component.removeProperty(\"duration\");\n        }\n        this._setTime(\"dtend\", value);\n    }\n    /**\n   * The duration. This can be the result directly from the property, or the\n   * duration calculated from start date and end date. Setting the property\n   * will remove any `dtend` properties.\n   * @type {Duration}\n   */ get duration() {\n        let duration = this._firstProp(\"duration\");\n        if (!duration) {\n            return this.endDate.subtractDateTz(this.startDate);\n        }\n        return duration;\n    }\n    set duration(value) {\n        if (this.component.hasProperty(\"dtend\")) {\n            this.component.removeProperty(\"dtend\");\n        }\n        this._setProp(\"duration\", value);\n    }\n    /**\n   * The location of the event.\n   * @type {String}\n   */ get location() {\n        return this._firstProp(\"location\");\n    }\n    set location(value) {\n        this._setProp(\"location\", value);\n    }\n    /**\n   * The attendees in the event\n   * @type {Property[]}\n   */ get attendees() {\n        //XXX: This is way lame we should have a better\n        //     data structure for this later.\n        return this.component.getAllProperties(\"attendee\");\n    }\n    /**\n   * The event summary\n   * @type {String}\n   */ get summary() {\n        return this._firstProp(\"summary\");\n    }\n    set summary(value) {\n        this._setProp(\"summary\", value);\n    }\n    /**\n   * The event description.\n   * @type {String}\n   */ get description() {\n        return this._firstProp(\"description\");\n    }\n    set description(value) {\n        this._setProp(\"description\", value);\n    }\n    /**\n   * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)\n   * @type {String}\n   */ get color() {\n        return this._firstProp(\"color\");\n    }\n    set color(value) {\n        this._setProp(\"color\", value);\n    }\n    /**\n   * The organizer value as an uri. In most cases this is a mailto: uri, but\n   * it can also be something else, like urn:uuid:...\n   * @type {String}\n   */ get organizer() {\n        return this._firstProp(\"organizer\");\n    }\n    set organizer(value) {\n        this._setProp(\"organizer\", value);\n    }\n    /**\n   * The sequence value for this event. Used for scheduling\n   * see {@tutorial terminology}.\n   * @type {Number}\n   */ get sequence() {\n        return this._firstProp(\"sequence\");\n    }\n    set sequence(value) {\n        this._setProp(\"sequence\", value);\n    }\n    /**\n   * The recurrence id for this event. See {@tutorial terminology} for details.\n   * @type {Time}\n   */ get recurrenceId() {\n        return this._firstProp(\"recurrence-id\");\n    }\n    set recurrenceId(value) {\n        this._setTime(\"recurrence-id\", value);\n    }\n    /**\n   * Set/update a time property's value.\n   * This will also update the TZID of the property.\n   *\n   * TODO: this method handles the case where we are switching\n   * from a known timezone to an implied timezone (one without TZID).\n   * This does _not_ handle the case of moving between a known\n   *  (by TimezoneService) timezone to an unknown timezone...\n   *\n   * We will not add/remove/update the VTIMEZONE subcomponents\n   *  leading to invalid ICAL data...\n   * @private\n   * @param {String} propName     The property name\n   * @param {Time} time           The time to set\n   */ _setTime(propName, time) {\n        let prop = this.component.getFirstProperty(propName);\n        if (!prop) {\n            prop = new Property(propName);\n            this.component.addProperty(prop);\n        }\n        // utc and local don't get a tzid\n        if (time.zone === Timezone.localTimezone || time.zone === Timezone.utcTimezone) {\n            // remove the tzid\n            prop.removeParameter(\"tzid\");\n        } else {\n            prop.setParameter(\"tzid\", time.zone.tzid);\n        }\n        prop.setValue(time);\n    }\n    _setProp(name, value) {\n        this.component.updatePropertyWithValue(name, value);\n    }\n    _firstProp(name) {\n        return this.component.getFirstPropertyValue(name);\n    }\n    /**\n   * The string representation of this event.\n   * @return {String}\n   */ toString() {\n        return this.component.toString();\n    }\n}\nfunction compareRangeException(a, b) {\n    if (a[0] > b[0]) return 1;\n    if (b[0] > a[0]) return -1;\n    return 0;\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * The ComponentParser is used to process a String or jCal Object,\n * firing callbacks for various found components, as well as completion.\n *\n * @example\n * var options = {\n *   // when false no events will be emitted for type\n *   parseEvent: true,\n *   parseTimezone: true\n * };\n *\n * var parser = new ICAL.ComponentParser(options);\n *\n * parser.onevent(eventComponent) {\n *   //...\n * }\n *\n * // ontimezone, etc...\n *\n * parser.oncomplete = function() {\n *\n * };\n *\n * parser.process(stringOrComponent);\n *\n * @memberof ICAL\n */ class ComponentParser {\n    /**\n   * Creates a new ICAL.ComponentParser instance.\n   *\n   * @param {Object=} options                   Component parser options\n   * @param {Boolean} options.parseEvent        Whether events should be parsed\n   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed\n   */ constructor(options){\n        /**\n   * When true, parse events\n   *\n   * @type {Boolean}\n   */ this.parseEvent = true;\n        /**\n   * When true, parse timezones\n   *\n   * @type {Boolean}\n   */ this.parseTimezone = true;\n        /* SAX like events here for reference */ /**\n   * Fired when parsing is complete\n   * @callback\n   */ this.oncomplete = /* c8 ignore next */ function() {};\n        /**\n   * Fired if an error occurs during parsing.\n   *\n   * @callback\n   * @param {Error} err details of error\n   */ this.onerror = /* c8 ignore next */ function(err) {};\n        /**\n   * Fired when a top level component (VTIMEZONE) is found\n   *\n   * @callback\n   * @param {Timezone} component     Timezone object\n   */ this.ontimezone = /* c8 ignore next */ function(component) {};\n        /**\n   * Fired when a top level component (VEVENT) is found.\n   *\n   * @callback\n   * @param {Event} component    Top level component\n   */ this.onevent = /* c8 ignore next */ function(component) {};\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n        for (let [key, value] of Object.entries(options)){\n            this[key] = value;\n        }\n    }\n    /**\n   * Process a string or parse ical object.  This function itself will return\n   * nothing but will start the parsing process.\n   *\n   * Events must be registered prior to calling this method.\n   *\n   * @param {Component|String|Object} ical      The component to process,\n   *        either in its final form, as a jCal Object, or string representation\n   */ process(ical) {\n        //TODO: this is sync now in the future we will have a incremental parser.\n        if (typeof ical === \"string\") {\n            ical = parse(ical);\n        }\n        if (!(ical instanceof Component)) {\n            ical = new Component(ical);\n        }\n        let components = ical.getAllSubcomponents();\n        let i = 0;\n        let len = components.length;\n        let component;\n        for(; i < len; i++){\n            component = components[i];\n            switch(component.name){\n                case \"vtimezone\":\n                    if (this.parseTimezone) {\n                        let tzid = component.getFirstPropertyValue(\"tzid\");\n                        if (tzid) {\n                            this.ontimezone(new Timezone({\n                                tzid: tzid,\n                                component: component\n                            }));\n                        }\n                    }\n                    break;\n                case \"vevent\":\n                    if (this.parseEvent) {\n                        this.onevent(new Event(component));\n                    }\n                    break;\n                default:\n                    continue;\n            }\n        }\n        //XXX: ideally we should do a \"nextTick\" here\n        //     so in all cases this is actually async.\n        this.oncomplete();\n    }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n * Portions Copyright (C) Philipp Kewisch */ /**\n * The main ICAL module. Provides access to everything else.\n *\n * @alias ICAL\n * @namespace ICAL\n * @property {ICAL.design} design\n * @property {ICAL.helpers} helpers\n */ var ICALmodule = {\n    /**\n   * The number of characters before iCalendar line folding should occur\n   * @type {Number}\n   * @default 75\n   */ foldLength: 75,\n    debug: false,\n    /**\n   * The character(s) to be used for a newline. The default value is provided by\n   * rfc5545.\n   * @type {String}\n   * @default \"\\r\\n\"\n   */ newLineChar: \"\\r\\n\",\n    Binary,\n    Component,\n    ComponentParser,\n    Duration,\n    Event,\n    Period,\n    Property,\n    Recur,\n    RecurExpansion,\n    RecurIterator,\n    Time,\n    Timezone,\n    TimezoneService,\n    UtcOffset,\n    VCardTime,\n    parse,\n    stringify,\n    design: design$1,\n    helpers\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ical.js/dist/ical.js\n");

/***/ })

};
;